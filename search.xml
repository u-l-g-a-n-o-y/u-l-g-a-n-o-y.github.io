<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>web-CTFshow</title>
    <url>/2023/12/04/web-CTFshow/</url>
    <content><![CDATA[<p>记载CTFshow上的web题目(少数能复现 大多都只能看WP&#x2F;视频 来积累思路)</p>
<span id="more"></span>

<h1 id="信息搜集模块"><a href="#信息搜集模块" class="headerlink" title="信息搜集模块"></a>信息搜集模块</h1><p>VIP题目限免呐~</p>
<h2 id="web1-源码泄露"><a href="#web1-源码泄露" class="headerlink" title="web1 源码泄露"></a>web1 源码泄露</h2><p>bp抓包可以直接在response的源码看到flag</p>
<h2 id="web2-前台JS绕过"><a href="#web2-前台JS绕过" class="headerlink" title="web2 前台JS绕过"></a>web2 前台JS绕过</h2><p>az 直接ctrl+u就看到flag了<br>查看源码发现确实就是js前端作了全部return false的处理 但丝毫不影响 禁用js等操作都可以绕过</p>
<h2 id="web3-协议头信息泄露"><a href="#web3-协议头信息泄露" class="headerlink" title="web3 协议头信息泄露"></a>web3 协议头信息泄露</h2><p>bp抓包 然后在response看到Flag:一栏信息即为flag</p>
<h2 id="web4-robots后台泄露"><a href="#web4-robots后台泄露" class="headerlink" title="web4 robots后台泄露"></a>web4 robots后台泄露</h2><p>一些常见的备份文件(仅限于懒得用dirsearch…)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.index.php.swp</span><br><span class="line">index.php.swp</span><br><span class="line">index.php.bak</span><br><span class="line">.index.php~</span><br><span class="line">index.php.bak_Edietplus</span><br><span class="line">index.php.~</span><br><span class="line">index.php<span class="number">.1</span></span><br><span class="line">index.php</span><br><span class="line">index.php~</span><br><span class="line">index.php.rar</span><br><span class="line">index.php.zip</span><br><span class="line">index.php<span class="number">.7</span>z</span><br><span class="line">index.php.tar.gz</span><br><span class="line">www.zip</span><br><span class="line">www.rar</span><br><span class="line">www.zip</span><br><span class="line">www<span class="number">.7</span>z</span><br><span class="line">www.tar.gz</span><br><span class="line">www.tar</span><br><span class="line">web.zip</span><br><span class="line">web.rar</span><br><span class="line">web.zip</span><br><span class="line">web<span class="number">.7</span>z</span><br><span class="line">web.tar.gz</span><br><span class="line">web.tar</span><br><span class="line">wwwroot.rar</span><br><span class="line">web.rar</span><br><span class="line">robots.txt</span><br><span class="line">index.phps</span><br></pre></td></tr></table></figure>
<p>结合题目提示 访问 &#x2F;robots.txt 得到flag的路径&#x2F;flagishere.txt 访问即可</p>
<h2 id="web5-phps源码泄露"><a href="#web5-phps源码泄露" class="headerlink" title="web5 phps源码泄露"></a>web5 phps源码泄露</h2><p>phps源码 &#x2F;index.phps<br>平时一般猜&#x2F;index.php 这里告诉我们有新的一种.phps<br>访问下载文件 里面即有flag</p>
<h2 id="web6-源码压缩包泄露"><a href="#web6-源码压缩包泄露" class="headerlink" title="web6 源码压缩包泄露"></a>web6 源码压缩包泄露</h2><p>常见的 &#x2F;<a href="http://www.zip/">www.zip</a><br>下载后得到fl000g.txt<br>猜想这是flag路径 访问 &#x2F;fl000g.txt 得到flag</p>
<h2 id="web7-版本控制泄露源码"><a href="#web7-版本控制泄露源码" class="headerlink" title="web7 版本控制泄露源码"></a>web7 版本控制泄露源码</h2><p>.git泄露(所以平时用git要小心啊!!!)<br>访问 &#x2F;.git 得到flag</p>
<h2 id="web8-版本控制泄露源码2"><a href="#web8-版本控制泄露源码2" class="headerlink" title="web8 版本控制泄露源码2"></a>web8 版本控制泄露源码2</h2><p>又学习到了新姿势<br>.svn泄露<br>访问 &#x2F;.svn 得到flag<br>注: SVN是一个开放源代码的版本控制系统(可实现多人协同开发 &amp; …)</p>
<h2 id="web9-vim临时文件泄露"><a href="#web9-vim临时文件泄露" class="headerlink" title="web9 vim临时文件泄露"></a>web9 vim临时文件泄露</h2><p>index.php.swp 泄露<br>vim中的swp即swap 交换分区 在编辑vim时用来备份缓冲区内容</p>
<h2 id="web10-cookie泄露"><a href="#web10-cookie泄露" class="headerlink" title="web10 cookie泄露"></a>web10 cookie泄露</h2><p>bp抓包 在request中的cookie栏得到flag(只是 ‘{‘和’}’被url编码了)</p>
<h2 id="web11-域名txt记录泄露"><a href="#web11-域名txt记录泄露" class="headerlink" title="web11 域名txt记录泄露"></a>web11 域名txt记录泄露</h2><p>题目提示: 域名其实也可以隐藏信息，比如flag.ctfshow.com就隐藏了一条信息<br>这里学习到利用DNS查询<br><a href="http://www.jsons.cn/nslookup/" target="_blank">在线网站</a>查询即可得到flag</p>
<h2 id="web12-敏感信息公布"><a href="#web12-敏感信息公布" class="headerlink" title="web12 敏感信息公布"></a>web12 敏感信息公布</h2><p>哇 很有趣的题~<br>利用题目提示 在下面heapline找到 372619038 猜测这是密码<br>但是找了半天找不到哪里用得上<br>看提示 说返回 &#x2F;admin ! 学到了 然后以 admin 372619038 登录即可得到flag~</p>
<h2 id="web13-内部技术文档泄露"><a href="#web13-内部技术文档泄露" class="headerlink" title="web13 内部技术文档泄露"></a>web13 内部技术文档泄露</h2><p>这 属实想不到 orz<br>Home最下面会发现document可以点！ 然后就能下载得到pdf…<br>里面<del>贴心的</del>记录了登录路径&#x2F;用户名&#x2F;密码…<br>跟着访问即可得到flag</p>
<h2 id="web14-编辑器配置不当"><a href="#web14-编辑器配置不当" class="headerlink" title="web14 编辑器配置不当"></a>web14 编辑器配置不当</h2><p>az 访问 &#x2F;editor (…)<br>进入里面 找到图片上传 发现可以访问文件空间 能看到网站的所有信息<br>然后在 &#x2F;var&#x2F;www&#x2F;nothinghere下找到flag地址 访问&#x2F;nothinghere&#x2F;flag…txt即可<br>&#x2F;var&#x2F;www下放置的是站点配置 所以用后面地址才能访问</p>
<h2 id="web15-密码逻辑脆弱"><a href="#web15-密码逻辑脆弱" class="headerlink" title="web15 密码逻辑脆弱"></a>web15 密码逻辑脆弱</h2><p>网站最下面泄露邮箱咯 <a href="mailto:&#x31;&#x31;&#53;&#54;&#54;&#51;&#49;&#57;&#x36;&#49;&#64;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#x31;&#x31;&#53;&#54;&#54;&#51;&#49;&#57;&#x36;&#49;&#64;&#x71;&#113;&#46;&#x63;&#111;&#109;</a> (敲响警钟！ 自己网站也要注意！)<br>访问 &#x2F;admin 密码尝试 1156631961发现不对劲 怎么都登不进去<br>又学到骚操作了 忘记密码 密保是城市 那么利用QQ号搜索！！！<br>在西安 就行了 orz<br>密码被重置为 admin7789</p>
<h2 id="web16-探针泄露"><a href="#web16-探针泄露" class="headerlink" title="web16 探针泄露"></a>web16 探针泄露</h2><p>你别说这网站还挺炫的 orz<br>?? 什么是探针??? </p>
<p><a href="https://xz.aliyun.com/t/2222#:~:text=%E7%BD%91%E7%AB%99%E6%8E%A2%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF,%E5%9C%A8%E5%90%84%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E3%80%82">https://xz.aliyun.com/t/2222#:~:text=%E7%BD%91%E7%AB%99%E6%8E%A2%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF,%E5%9C%A8%E5%90%84%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E3%80%82</a></p>
<p>但是这道题 访问 &#x2F;tz.php<br>发现phpinfo()可以点击查看(也符合上面链接的介绍)<br>搜索flag即得</p>
<h2 id="web17-CDN穿透"><a href="#web17-CDN穿透" class="headerlink" title="web17 CDN穿透"></a>web17 CDN穿透</h2><p>透过重重缓存，查找到ctfer.com的真实IP<br><a href="https://www.cnblogs.com/qiudabai/p/9763739.html">https://www.cnblogs.com/qiudabai/p/9763739.html</a><br>这里直接ping即可 (做题归做题 还是要多学点相关知识)<br>但是貌似现在的ip变了… 比如我Ping&#x2F;查询 都得到的是 124.222.110.176 …</p>
<h2 id="web18-js敏感信息泄露"><a href="#web18-js敏感信息泄露" class="headerlink" title="web18 js敏感信息泄露"></a>web18 js敏感信息泄露</h2><p>一个小游戏界面 查看源码 发现score&gt;101会弹出 <code>\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b</code><br>解码: 你赢了，去幺幺零点皮爱吃皮看看<br>屮 皮爱吃皮是’php’的意思 … (想想也是 通关后肯定弹出一个php界面~)<br>行吧 访问 110.php即可</p>
<h2 id="web19-前端密钥泄露"><a href="#web19-前端密钥泄露" class="headerlink" title="web19 前端密钥泄露"></a>web19 前端密钥泄露</h2><p>一个登录界面 前端源码一看 everthing is here…<br>给了CBC加密的IV KEY 和最后的passwd加密值 直接decrypt即可(写的时候又把参数位置写反了… key MODE iv)<br>passwd : i_want_a_36d_girl</p>
<h2 id="web20-数据库恶意下载"><a href="#web20-数据库恶意下载" class="headerlink" title="web20 数据库恶意下载"></a>web20 数据库恶意下载</h2><p>题目提示 : mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了<br>早期的asp+access是.mdb形式 访问 &#x2F;db&#x2F;db.mdb(这db咋想到的啊 orz)<br>下载得到数据库 🔍即可找到flag</p>
<hr>
<hr>
<p>总结: 这些细枝末节的考点有时候真的会成为关键！ 当源码找不到思路 尝试许久无果时 试试找泄露！</p>
<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p>这部分没环境爆个鬼🤣</p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>只过滤了 flag 所以可以用?,* 来匹配<br>视频有个很秀的做法 <code>system(&quot;cp flag.php 1.txt&quot;)</code> 然后直接访问 &#x2F;1.txt !</p>
<h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><p>过滤了 flag system php<br>用上面的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`cp fla?.??? <span class="number">1.</span>txt`</span><br></pre></td></tr></table></figure>
<p>然后访问 &#x2F;1.txt</p>
<h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号<br>视频这样执行:  <code>/?c=eval($_GET[1]);&amp;1=phpinfo();</code> 注意phpinfo()结尾分号!<br>这里是参数逃逸(跳板) 学到了 orz<br>这样的话 &amp;1&#x3D;后面就可以传任意值了(脱离了参数c的约束 所以不会被匹配到)<br>这样 <code>cat flag.php</code>需要在源代码中查看<br>而视频又给了一种做法 <code>tac flag.php</code> cat反过来写 就可以直接看到了</p>
<h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 反引号 分号 括号<br>首先还是可以用上一题的方法 <code>/?c=eval($_GET[1]);&amp;1=phpinfo();</code><br>空格被过滤了可以用url编码(空格 换行 都可以)<br>还有一个点 这里分号被过滤了 可以用 ?&gt;形式  (php最后一条语句不需要分号)<br>视频采用了include<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code><br>&#x2F;etc&#x2F;passwd 也是一个常见的点 可以得到一些基本信息<br>甚至还可以包括 &#x2F;bin&#x2F;ls 二进制文件 orz<br>接下来的获取flag 视频采用的是文件包含的形式 (因为我们这里用的include 无法直接输出)<br><code>/...?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p>
<h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号<br>继续学习新姿势 用require<br><code>/?c=require%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code><br>所以&amp;1&#x3D;后面接伪协议即可读取flag</p>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto-Other</title>
    <url>/2023/12/04/Crypto-Other/</url>
    <content><![CDATA[<p>一些杂题(密码)&#x2F; (以前)比赛的密码题</p>
<span id="more"></span>

<h1 id="tsgctf2020"><a href="#tsgctf2020" class="headerlink" title="tsgctf2020"></a>tsgctf2020</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()) &lt;= <span class="number">50</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">str</span>(<span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>) &lt;&lt; <span class="number">10000</span>).endswith(<span class="string">&#x27;1002773875431658367671665822006771085816631054109509173556585546508965236428620487083647585179992085437922318783218149808537210712780660412301729655917441546549321914516504576&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>搁着开始没搞懂题目意思…<br>这其实就等价于 给出 <code>m*2**10000 = s (mod 10**175)</code>…<br>由于不互素 不能直接将逆元乘过去<br>两种方法:</p>
<h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><p>观察他们的gcd发现可以全部除掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  (<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10000</span>,<span class="number">10</span>**<span class="number">175</span>))</span><br><span class="line">n = <span class="number">10</span>**<span class="number">175</span></span><br><span class="line"><span class="built_in">print</span>(gcd(x,n))</span><br><span class="line"><span class="built_in">print</span>(gcd(s,n))</span><br><span class="line">GCD = gcd(s,n)</span><br><span class="line">s //= GCD</span><br><span class="line">x //= GCD</span><br><span class="line">n //= GCD</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">m = modinv(x,n)*s%n</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><p>可以改变模数 比如<code>10**175 -&gt; 5**175</code>这种<br>也就是选择新模数为原来模数的因子 且满足大于m的比特数即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">5</span>**<span class="number">175</span></span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">m = modinv(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10000</span>,n),n)*s%n</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<p>flag: TSGCTF{0K4y_Y0U_are_r3aDy_t0_Go_aNd_dO_M0r3_CryPt}</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Groebner基</title>
    <url>/2023/12/04/Groebner%E5%9F%BA/</url>
    <content><![CDATA[<p>目前还完全理解不了原理 先记录一些与Groebner基有关的题目</p>
<span id="more"></span>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2019红帽杯related"><a href="#2019红帽杯related" class="headerlink" title="2019红帽杯related"></a>2019红帽杯related</h2><p>题目给定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n</span><br><span class="line">s = s0+s1+s2</span><br><span class="line">c0 = s0^<span class="number">17</span> (mod n)</span><br><span class="line">c1 = s1^<span class="number">17</span> (mod n)</span><br><span class="line">c2 = s2^<span class="number">17</span> (mod n)</span><br><span class="line">c3 = s3^<span class="number">17</span> (mod n)</span><br><span class="line">s3 = <span class="number">65537</span>*s0 - <span class="number">66666</span>*s1 + <span class="number">12345</span>*s2</span><br></pre></td></tr></table></figure>
<p>求s0,s1,s2</p>
<p>题目大致可以看成一种相关消息攻击的变形 wiki提供了以下方法</p>
<p><img src="https://s2.loli.net/2023/12/04/arkovT57ScK42Zj.png" alt="img"></p>
<p>sage打印一下中间求得的groebner基 是这种形式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498137656000537211565616276407165730632699</span>, y + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498129910188939072517737868873227804201884</span>, z + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498069823870958439283760172034252636423374</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498205967870181640370981402627360812251649</span></span><br><span class="line">s = <span class="number">280513550110197745829890567436265496990</span></span><br><span class="line">c1 = <span class="number">10607235400098586699994392584841806592000660816191315008947917773605476365884572056544621466807636237415893192966935651590312237598366247520986667580174438232591692369894702423377081613821241343307094343575042030793564118302488401888197517625333923710172738913771484628557310164974384462856047065486913046647133386246976457961265115349103039946802386897315176633274295410371986422039106745216230401123542863714301114753239888820442112538285194875243192862692290859625788686421276234445677411280606266052059579743874849594812733193363406594409214632722438592376518310171297234081555028727538951934761726878443311071990</span></span><br><span class="line">c2 = <span class="number">2665348075952836665455323350891842781938471372943896177948046901127648217780657532963063228780230203325378931053293617434754585479452556620021360669764370971665619743473463613391689402725053682169256850873752706252379747752552015341379702582040497607180172854652311649467878714425698676142212588380080361100526614423533767196749274741380258842904968147508033091819979042560336703564128279527380969385330845759998657540777339113519036552454829323666242269607225156846084705957131127720351868483375138773025602253783595007177712673092409157674720974653789039702431795168654387038080256838321255342848782705785524911705</span></span><br><span class="line">c3 = <span class="number">4881225713895414151830685259288740981424662400248897086365166643853409947818654509692299250960938511400178276416929668757746679501254041354795468626916196040017280791985239849062273782179873724736552198083211250561192059448730545500442981534768431023858984817288359193663144417753847196868565476919041282010484259630583394963580424358743754334956833598351424515229883148081492471874232555456362089023976929766530371320876651940855297249474438564801349160584279330339012464716197806221216765180154233949297999618011342678854874769762792918534509941727751433687189532019000334342211838299512315478903418642056097679717</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y,z&gt; = Zmod(n)[]</span><br><span class="line">I = ideal(x+y+z-s,x^<span class="number">17</span>-c1,y^<span class="number">17</span>-c2,z^<span class="number">17</span>-c3)</span><br><span class="line">res = I.groebner_basis()</span><br><span class="line">m1 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498137656000537211565616276407165730632699</span></span><br><span class="line">m2 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498129910188939072517737868873227804201884</span></span><br><span class="line">m3 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498069823870958439283760172034252636423374</span></span><br><span class="line"></span><br><span class="line">m1 = m1%n</span><br><span class="line">m2 = m2%n</span><br><span class="line">m3 = m3%n</span><br><span class="line"></span><br><span class="line">m = (m3&lt;&lt;<span class="number">256</span>)+(m2&lt;&lt;<span class="number">128</span>)+m1</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;bf684fc7-5398-4bf3-ad5f-cfe3dc53a202&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure>
<p>先记着吧 完全没搞懂groebner基的神奇作用</p>
<h2 id="DASCTF-Apr-2023-ECC"><a href="#DASCTF-Apr-2023-ECC" class="headerlink" title="DASCTF Apr.2023 ECC"></a>DASCTF Apr.2023 ECC</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, p, q, a, b, e1, e2, e3</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;DASCTF&#123;&quot;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECC</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, p, q, e</span>):</span><br><span class="line">        self.p, self.q = p, q</span><br><span class="line">        self.a, self.b = a, b</span><br><span class="line">        self.N         = p * q</span><br><span class="line">        self.e         = e</span><br><span class="line">        self.Kbits     = <span class="number">8</span></span><br><span class="line">        self.Ep        = EllipticCurve(IntegerModRing(p), [a, b])</span><br><span class="line">        self.Eq        = EllipticCurve(IntegerModRing(q), [a, b])</span><br><span class="line"></span><br><span class="line">        N1 = self.Ep.order()</span><br><span class="line">        N2 = <span class="number">2</span> * p + <span class="number">2</span> - N1</span><br><span class="line">        N3 = self.Eq.order()</span><br><span class="line">        N4 = <span class="number">2</span> * q + <span class="number">2</span> - N3</span><br><span class="line"></span><br><span class="line">        self.d = &#123;</span><br><span class="line">            ( <span class="number">1</span>,  <span class="number">1</span>): inverse_mod(e, lcm(N1, N3)),</span><br><span class="line">            ( <span class="number">1</span>, -<span class="number">1</span>): inverse_mod(e, lcm(N1, N4)),</span><br><span class="line">            (-<span class="number">1</span>,  <span class="number">1</span>): inverse_mod(e, lcm(N2, N3)),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>): inverse_mod(e, lcm(N2, N4))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.E = EllipticCurve(IntegerModRing(self.N), [a, b])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        msg_point = self.msg_to_point(plaintext, <span class="literal">True</span>)</span><br><span class="line">        mp = self.Ep(msg_point)</span><br><span class="line">        mq = self.Eq(msg_point)</span><br><span class="line">        cp = (self.e * mp).xy()</span><br><span class="line">        cq = (self.e * mq).xy()</span><br><span class="line">        cp = (<span class="built_in">int</span>(cp[<span class="number">0</span>]), <span class="built_in">int</span>(cp[<span class="number">1</span>]))</span><br><span class="line">        cq = (<span class="built_in">int</span>(cq[<span class="number">0</span>]), <span class="built_in">int</span>(cq[<span class="number">1</span>]))</span><br><span class="line">        c  = (<span class="built_in">int</span>(crt([cp[<span class="number">0</span>], cq[<span class="number">0</span>]], [self.p, self.q])), \</span><br><span class="line">              <span class="built_in">int</span>(crt([cp[<span class="number">1</span>], cq[<span class="number">1</span>]], [self.p, self.q])))</span><br><span class="line">        c = self.E(c)</span><br><span class="line">        <span class="keyword">return</span> c.xy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        x = ciphertext</span><br><span class="line">        w = x^<span class="number">3</span> + self.a*x + self.b % self.N</span><br><span class="line"></span><br><span class="line">        P.&lt;Yp&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">        fp = x^<span class="number">3</span> + self.a*x + self.b -Yp^<span class="number">2</span></span><br><span class="line">        yp = fp.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        P.&lt;Yq&gt; = PolynomialRing(Zmod(self.q))</span><br><span class="line">        fq = x^<span class="number">3</span> + self.a*x + self.b -Yq^<span class="number">2</span></span><br><span class="line">        yq = fq.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        y = crt([<span class="built_in">int</span>(yp), <span class="built_in">int</span>(yq)], [self.p, self.q])</span><br><span class="line"></span><br><span class="line">        cp, cq = self.Ep((x, y)), self.Eq((x, y))</span><br><span class="line">        legendre_symbol_p = legendre_symbol(w, self.p)</span><br><span class="line">        legendre_symbol_q = legendre_symbol(w, self.q)</span><br><span class="line"></span><br><span class="line">        mp = (self.d[(legendre_symbol_p, legendre_symbol_q)] * cp).xy()</span><br><span class="line">        mq = (self.d[(legendre_symbol_p, legendre_symbol_q)] * cq).xy()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> crt([<span class="built_in">int</span>(mp[<span class="number">0</span>]), <span class="built_in">int</span>(mq[<span class="number">0</span>])], [self.p, self.q]) &gt;&gt; self.Kbits</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msg_to_point</span>(<span class="params">self, x, shift=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> shift:</span><br><span class="line">            x &lt;&lt;= self.Kbits</span><br><span class="line">        res_point = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> &lt;&lt; self.Kbits):</span><br><span class="line">            P.&lt;Yp&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">            fp = x^<span class="number">3</span> + self.a*x + self.b - Yp^<span class="number">2</span></span><br><span class="line">            P.&lt;Yq&gt; = PolynomialRing(Zmod(self.q))</span><br><span class="line">            fq = x^<span class="number">3</span> + self.a*x + self.b - Yq^<span class="number">2</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                yp, yq = <span class="built_in">int</span>(fp.roots()[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">int</span>(fq.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                y = crt([yp, yq], [self.p, self.q])</span><br><span class="line">                E = EllipticCurve(IntegerModRing(self.p*self.q), [self.a, self.b])</span><br><span class="line">                res_point = E.point((x, y))</span><br><span class="line">                <span class="keyword">return</span> res_point</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res_point</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ecc1 = ECC(a, b, p, q, e1)</span><br><span class="line">ecc2 = ECC(a, b, p, q, e2)</span><br><span class="line">ecc3 = ECC(a, b ,p, q, e3)</span><br><span class="line">gift = p * q * getPrime(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">secret = bytes_to_long(flag[<span class="number">7</span>:-<span class="number">1</span>].encode())</span><br><span class="line">ciphertext1 = ecc1.enc(secret)</span><br><span class="line">ciphertext2 = ecc2.enc(secret)</span><br><span class="line">ciphertext3 = ecc3.enc(secret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    </span><br><span class="line">    f.write(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e3 = <span class="subst">&#123;e3&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;gift = <span class="subst">&#123;gift&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C1 = <span class="subst">&#123;ciphertext1&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C2 = <span class="subst">&#123;ciphertext2&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C3 = <span class="subst">&#123;ciphertext3&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>附件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">516257683822598401</span></span><br><span class="line">e2 = <span class="number">391427904712695553</span></span><br><span class="line">e3 = <span class="number">431785901506020973</span></span><br><span class="line">gift = <span class="number">10954621221812651197619957228527372749810730943802288293715079353550311138677754821746522832935330138708418986232770630995550582619687239759917418738050269898943719822278514605075330569827210725314869039623167495140328454254640051293396463956732280673238182897228775094614386379902845973838934549168736103799539422716766688822243954145073458283746306858717624769112552867126607212724068484647333634548047278790589999183913</span></span><br><span class="line">C1 = (<span class="number">1206929895217993244310816423179846824808172528120308055773133254871707902120929022352908110998765937447485028662679732041</span>, <span class="number">652060368795242052052268674691241294013033011634464089331399905627588366001436638328894634036437584845563026979258880828</span>)</span><br><span class="line">C2 = (<span class="number">1819289899794579183151870678118089723240127083264590266958711858768481876209114055565064148870164568925012329554392844153</span>, <span class="number">1110245535005295568283994217305072930348872582935452177061131445872842458573911993488746144360725164302010081437373324551</span>)</span><br><span class="line">C3 = (<span class="number">1112175463080774353628562547288706975571507012326470665917118873336738873653792420189391867408691423887642725415133046354</span>, <span class="number">1820636035485820691083758790204536675748006232767111209985774382700260408550258280489088658228739971137550264759084468620</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ECC学的还是太肤浅了 恶补一下ECC再来看吧。。。</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>osu</title>
    <url>/2023/12/03/osu/</url>
    <content><![CDATA[<p><strong>Welcome to osu!</strong></p>
<span id="more"></span>

<h1 id="OWC2023-Korea-VS-USA"><a href="#OWC2023-Korea-VS-USA" class="headerlink" title="OWC2023 Korea VS USA"></a>OWC2023 Korea VS USA</h1><p>很好奇为什么要连着打两场？<br>masaka第一场算是胜者组决赛 然后bracket reset再来打真正的grandfinal？🤖</p>
<p><img src="https://s2.loli.net/2023/12/03/QslebCr415jmOwY.png" alt="img"></p>
<p><img src="https://s2.loli.net/2023/12/03/Yuv79oQjWOH6npJ.png" alt="img"></p>
<p>How Could He make it!!!WTF!!! MY GOD WORST_HR_PLAYER!!!!</p>
<p>FM的strategy：</p>
<p><img src="https://s2.loli.net/2023/12/03/URiJLec6dNvSklo.png" alt="img"></p>
<p>flyingtuna一人承担所有 然后让Karcher打NM(other than HR)FC<br>what  a textbook strategy！！！ wow !!!</p>
<p>Are you kidding me ??? lol😂</p>
<p><img src="https://s2.loli.net/2023/12/03/ny1Cz9uobixJlaF.png" alt="img"></p>
<p>How can you hit without anything? lol.O(∩_∩)O</p>
<p>Finally, we have TieBreaker…<br>WTF TB: 8.60⭐ length:6:43 WTF</p>
<p><img src="https://s2.loli.net/2023/12/04/hXvoSkIZlO2yu8L.png" alt="img"></p>
<p>哎 USA几连冠了啊… Korea太可惜了啊啊！ 为什么最后TB不上worst_hr_player 啊！！！！！！！ 太可惜了吧~</p>
]]></content>
      <categories>
        <category>osu</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程核心原理-C13-PE文件格式-笔记</title>
    <url>/2023/12/03/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86-C13-PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>逆向工程核心原理-C13-PE文件格式-笔记</p>
<span id="more"></span>
<p>前几周粗浅看了一遍 由于是电子版 也没留下多大印象<br>最近CTF的re题看着太累了 做一个题挺耗时间的 想着是基础还是不够扎实<br>再者学逆向的目的也不全是CTF 掌握些理论还是很重要的<br>再来重新学一学 写篇笔记记录一下关键点 也启发自己思考</p>
<h1 id="13-1-介绍"><a href="#13-1-介绍" class="headerlink" title="13.1 介绍"></a>13.1 介绍</h1><p>PE32 &amp; PE+&#x2F;PE32+ 别写PE64 :(闹笑话</p>
<h1 id="13-2-PE文件格式"><a href="#13-2-PE文件格式" class="headerlink" title="13.2 PE文件格式"></a>13.2 PE文件格式</h1><p>学习PE文件格式就是学习PE头中的结构体<br><strong>十分重要！！！</strong></p>
<h2 id="13-2-1-基本结构"><a href="#13-2-1-基本结构" class="headerlink" title="13.2.1 基本结构"></a>13.2.1 基本结构</h2><p>DOS头到节区头是PE头部分(4D 5A … 50 45)<br>文件中使用偏移(offset) 内存中使用VA(虚拟地址)来表示位置 当文件加载到内存中时情况会改变 内容分为 .text .data .rsrc分别保存</p>
<h2 id="13-2-2-VA-RVA"><a href="#13-2-2-VA-RVA" class="headerlink" title="13.2.2 VA&amp;RVA"></a>13.2.2 VA&amp;RVA</h2><p>RVA(相对虚拟地址) + ImageBase(基准位置) &#x3D; VA<br>PE头内部信息大多以RVA形式 因为PE(尤其是DLL)加载到进程虚拟内存时由于该位置已经加载其他PE(DLL) 要通过重定位加载到其他空白的位置<br>用RVA就只需要记录ImageBase就可以得到VA</p>
<h1 id="13-3-PE头"><a href="#13-3-PE头" class="headerlink" title="13.3 PE头"></a>13.3 PE头</h1><h2 id="13-3-1-DOS头"><a href="#13-3-1-DOS头" class="headerlink" title="13.3.1 DOS头"></a>13.3.1 DOS头</h2><p>重点关注两个成员</p>
<ul>
<li>e_magic: DOS签名 (4D5A &#x3D;&gt; “MZ”)</li>
<li>e_lfanew: 指示NT头的偏移 (不同文件值可变)</li>
</ul>
<p>在书给的exe中 e_lfanew的值为 000000E0(小端序!)</p>
<h2 id="13-3-2-DOS存根"><a href="#13-3-2-DOS存根" class="headerlink" title="13.3.2 DOS存根"></a>13.3.2 DOS存根</h2><p>40~4D为汇编指令(有兴趣把它写入文件IDA康康)<br>主要就是用来输出一下”This program … DOS mode”就退出了 算是一种对于MS-DOS的兼容</p>
<h2 id="13-3-3-NT头"><a href="#13-3-3-NT头" class="headerlink" title="13.3.3 NT头"></a>13.3.3 NT头</h2><p>NT头的IMAGE_NT_HEADERS</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS64</span> &#123;</span></span><br><span class="line">  DWORD                   Signature;    <span class="comment">//签名</span></span><br><span class="line">  IMAGE_FILE_HEADER       FileHeader;   <span class="comment">//文件头</span></span><br><span class="line">  IMAGE_OPTIONAL_HEADER64 OptionalHeader; <span class="comment">//可选头</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br></pre></td></tr></table></figure>
<p>signature即为50450000(“PE”00)<br>IMAGE_NT_HEADERS结构体总大小为F8 很大</p>
<h2 id="13-3-4-NT头-文件头"><a href="#13-3-4-NT头-文件头" class="headerlink" title="13.3.4 NT头: 文件头"></a>13.3.4 NT头: 文件头</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">  WORD  Machine;</span><br><span class="line">  WORD  NumberOfSections;</span><br><span class="line">  DWORD TimeDateStamp;</span><br><span class="line">  DWORD PointerToSymbolTable;</span><br><span class="line">  DWORD NumberOfSymbols;</span><br><span class="line">  WORD  SizeOfOptionalHeader;</span><br><span class="line">  WORD  Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>
<ul>
<li>Machine: 每个CPU都有唯一的machine码</li>
<li>NumberOfSections: 文件中存在的节区数量</li>
<li>SizeOfOptionalHeader: IMAGE_OPTIONAL_HEADER64结构体大小</li>
<li>Characteristics: 标识文件属性 是否可运行 是否为DLL等</li>
<li>TimeDateStamp: 该成员的值不影响运行 用来记录时间而已</li>
</ul>
<h2 id="13-3-5-NT头-可选头"><a href="#13-3-5-NT头-可选头" class="headerlink" title="13.3.5 NT头: 可选头"></a>13.3.5 NT头: 可选头</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">  WORD                 Magic;</span><br><span class="line">  BYTE                 MajorLinkerVersion;</span><br><span class="line">  BYTE                 MinorLinkerVersion;</span><br><span class="line">  DWORD                SizeOfCode;</span><br><span class="line">  DWORD                SizeOfInitializedData;</span><br><span class="line">  DWORD                SizeOfUninitializedData;</span><br><span class="line">  DWORD                AddressOfEntryPoint;</span><br><span class="line">  DWORD                BaseOfCode;</span><br><span class="line">  DWORD                BaseOfData;</span><br><span class="line">  DWORD                ImageBase;</span><br><span class="line">  DWORD                SectionAlignment;</span><br><span class="line">  DWORD                FileAlignment;</span><br><span class="line">  WORD                 MajorOperatingSystemVersion;</span><br><span class="line">  WORD                 MinorOperatingSystemVersion;</span><br><span class="line">  WORD                 MajorImageVersion;</span><br><span class="line">  WORD                 MinorImageVersion;</span><br><span class="line">  WORD                 MajorSubsystemVersion;</span><br><span class="line">  WORD                 MinorSubsystemVersion;</span><br><span class="line">  DWORD                Win32VersionValue;</span><br><span class="line">  DWORD                SizeOfImage;</span><br><span class="line">  DWORD                SizeOfHeaders;</span><br><span class="line">  DWORD                CheckSum;</span><br><span class="line">  WORD                 Subsystem;</span><br><span class="line">  WORD                 DllCharacteristics;</span><br><span class="line">  DWORD                SizeOfStackReserve;</span><br><span class="line">  DWORD                SizeOfStackCommit;</span><br><span class="line">  DWORD                SizeOfHeapReserve;</span><br><span class="line">  DWORD                SizeOfHeapCommit;</span><br><span class="line">  DWORD                LoaderFlags;</span><br><span class="line">  DWORD                NumberOfRvaAndSizes;</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>
<p>重点关注以下成员</p>
<ul>
<li>Magic: IMAGE_OPTIONAL_HEADER为32位-10B 64位-20B</li>
<li><strong>AddressOfEntryPoint</strong>: 持有EP的RVA值！！！ 指出程序最先执行代码起始地址！！！</li>
<li>ImageBase: 在PE文件被加载到内存时 指出有限装载的地址<br>EXE DLL被装载到用户内存的0 ~ 7FFFFFFF    SYS被装载到内核内存的80000000 ~ FFFFFFFF<br>一般而言 用开发工具创建EXE后 ImageBase值为00400000 DLL文件的ImageBase值为10000000(也可为其他值)<br>执行PE文件时 PE装载器先创建进程 再将文件载入内存 然后把EIP设置为ImageBase+AddressOfEntryPoint</li>
<li>SectionAlignment FileAlignment: PE文件的body部分被划分为节区<br>FileAlignment指定了节区在磁盘文件中的最小单位<br>SectionAlignment则指定了节区在内存中的最小单位</li>
<li>SizeOfImage: 加载PE文件到内存时 SizeOfImage指定了PE Image在虚存中所占空间大小</li>
<li>SizeOfHeaders: 指出整个PE头的大小<br>第一节区所在位置与SizeOfHeaders距文件开始的offset相同</li>
<li>Subsystem: 区分驱动文件(.sys)和普通的可执行文件(.exe .dll)</li>
<li>NumberOfRvaAndSizes: 指定最后一个成员DataDirectory数组的个数(大小不一定为16)</li>
<li>DataDirectory:<br><img src="https://s2.loli.net/2023/12/03/IVkU3uvCy9dxPJZ.png" alt="img"><br>重点关注0,1,9 EXPORT IMPORT TLS</li>
</ul>
<h2 id="13-3-6-节区头"><a href="#13-3-6-节区头" class="headerlink" title="13.3.6 节区头"></a>13.3.6 节区头</h2><p>PE文件被创建为多个节区结构(更加安全 eg.一定程度上防止缓冲区溢出)</p>
<ul>
<li>code: 执行 可读取</li>
<li>data: 非执行 可读写</li>
<li>resource: 非执行 可读取</li>
</ul>
<p>各个节区的属性被记录在节区头中</p>
<p>IMAGE_SECTION_HEADER</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">  <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    DWORD PhysicalAddress;</span><br><span class="line">    DWORD VirtualSize;</span><br><span class="line">  &#125; Misc;</span><br><span class="line">  DWORD VirtualAddress;</span><br><span class="line">  DWORD SizeOfRawData;</span><br><span class="line">  DWORD PointerToRawData;</span><br><span class="line">  DWORD PointerToRelocations;</span><br><span class="line">  DWORD PointerToLinenumbers;</span><br><span class="line">  WORD  NumberOfRelocations;</span><br><span class="line">  WORD  NumberOfLinenumbers;</span><br><span class="line">  DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>
<ul>
<li>VirtualSize: 内存中节区所占大小</li>
<li>VirtualAddress: 内存中节区起始位置(RVA)</li>
<li>SizeOfRawData: 磁盘文件中节区所占大小</li>
<li>PointerToRawData: 磁盘文件中节区起始位置</li>
<li>Characteristics: 节区属性(bit OR)</li>
</ul>
<p>其中VirtualAddress和PointerToRawData不带有任何值 由可选头中的SectionAlignment和FileAlignment确定<br>VirtualSize和SizeOfRawData值一般不同!<br>最后看看Name字段 可以向其中放入任何值(甚至可以NULL填充)</p>
<p><img src="https://s2.loli.net/2023/12/03/VcswHEPriI5SOgB.png" alt="img"></p>
<h1 id="13-4-RVA-to-RAW"><a href="#13-4-RVA-to-RAW" class="headerlink" title="13.4 RVA to RAW"></a>13.4 RVA to RAW</h1><p><img src="https://s2.loli.net/2023/12/03/bVn7942XuTZ18OY.png" alt="img"><br>即磁盘到内存的映射<br>方法:</p>
<ol>
<li>查找RVA所在节区</li>
<li>公式计算偏移(RAW)<br><code>offset = RAW - PointerToRawData = RVA - VitrualAddress </code></li>
</ol>
<p>几个练习:<br><img src="https://s2.loli.net/2023/12/03/VcswHEPriI5SOgB.png" alt="img"></p>
<p>Q1. RVA &#x3D; 5000时 FileOffset &#x3D; ?<br>A1. RVA:第一节区 PTR&#x3D;RawAddress &#x3D; 400 VA &#x3D; 1000 &#x3D;&gt; RAW &#x3D; 4400</p>
<p>Q2. RVA &#x3D; 13314<br>A2. 第三节区 VA &#x3D; B000 PTR &#x3D; 8400 &#x3D;&gt; RAW &#x3D; 10714</p>
<p>Q3. RVA &#x3D; ABA8<br>A3. 第二节区 VA&#x3D;9000 PTR &#x3D; 7C00 &#x3D;&gt; RAW &#x3D; 97A8<br>发现算出来偏移在第三节区 说明”无法定义RVA(ABA8)相对应的RAW值”<br>原因: 第二节区的 VirtualSize比RawSize大!</p>
<h1 id="13-5-IAT"><a href="#13-5-IAT" class="headerlink" title="13.5 IAT"></a>13.5 IAT</h1><p><strong>难点来了</strong><br>IAT: 导入地址表(Import Address Table)<br>IAT保存的内容与Windows操作系统的核心进程 内存 DLL结构等有关<br>简言之 IAT是一种表格 用来记录程序正在使用哪些库中的哪些函数</p>
<h2 id="13-5-1-DLL"><a href="#13-5-1-DLL" class="headerlink" title="13.5.1 DLL"></a>13.5.1 DLL</h2><p>相比早期只有库(library) DLL</p>
<ul>
<li>不需要把库包含在程序中 单独组成DLL文件 需要时调用即可</li>
<li>内存映射技术使加载后的DLL代码 资源 能在多个进程中实现共享</li>
<li>更新库时只需要替换相关DLL文件即可</li>
</ul>
<p>加载DLL的两种方式</p>
<ul>
<li>显示链接: 程序使用DLL时加载 使用完毕后释放内存</li>
<li>隐式链接: 程序一开始就一同加载DLL 程序终止时再释放占用的内存  IAT机制与这种链接方式有关</li>
</ul>
<p>OllyDbg查看notepad.exe</p>
<p><img src="https://s2.loli.net/2023/12/03/3XKFV2lzoc18G7j.png" alt="img"></p>
<p>这里可以看到<br>调用CreateFileW()时并非直接调用而是获取01001104处的地址来实现(所有API调用均如此)<br>地址01001104是.text节区的内存区域(IAT内存区域) 地址的值7645EA70即为加载到exe进程内存中CreateFileW()函数(位于kernel32.dll库)的地址<br>比较书和本地可以发现 01001104地址的值有差异 这也是为什么通过01001104而不是通过它指向的地址的值来调用<br>同时由于DLL的重定位 导致无法对实际地址硬编码 同时PE头中表示地址时使用的是RVA而不是VA</p>
<h2 id="13-5-2-IMAGE-IMPORT-DECRIPTOR"><a href="#13-5-2-IMAGE-IMPORT-DECRIPTOR" class="headerlink" title="13.5.2 IMAGE_IMPORT_DECRIPTOR"></a>13.5.2 IMAGE_IMPORT_DECRIPTOR</h2><p>IMAGE_IMPORT_DECRIPTOR结构体记录着PE文件要导入哪些库文件<br>IMAGE_IMPORT_DECRIPTOR结构体数组也被称为IMPORT Directory Table (导入目录)<br>导入多少个库就意味着有多少个IMAGE_IMPORT_DECRIPTOR结构体</p>
<p><img src="https://s2.loli.net/2023/12/03/au16VZ8spBbtfmH.png" alt="img"></p>
<ul>
<li>OriginalFirstThunk(OFT): INT的地址(RVA)</li>
<li>Name: 库名称字符串的地址(RVA)</li>
<li>FirstThunk(FT): IAT的地址(RVA)</li>
</ul>
<p>提示:</p>
<ul>
<li>PE头中提到的table均指数组</li>
<li>INT和IAT是长整型 以NULL结束</li>
<li>INT中各元素的值为IMAGE_IMPORT_BY_NAME结构体指针</li>
<li>INT与IAT大小应相同</li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/XWDsoRfdbH8ZJFx.png" alt="img"></p>
<p>这张图中 INT和IAT各元素同时指向相同地址 但很多情况下他们是不一致的 要注意</p>
<p>简单了解下PE装载器把导入函数输入IAT的顺序:</p>
<ol>
<li>读取IID的Name成员 获取库名称字符串(“kernel32.dll”)</li>
<li>装载相应库 -&gt; LoadLibrary(“kernel32.dll”)</li>
<li>读取IID中OFT成员 获取INT地址</li>
<li>逐一读取INT数组中的值 获取相应IMAGE_IMPORT_BY_NAME地址(RVA)</li>
<li>使用IIBN的Hint(ordinal)或Name项 获得相应函数的起始地址</li>
<li>读取IID的FT(IAT)成员 获得IAT地址</li>
<li>将上面获取的函数地址输入相应的IAT数组值</li>
<li>重复4-7 直至INT结束(遇到NULL)</li>
</ol>
<h2 id="13-5-3-使用notepad-exe练习"><a href="#13-5-3-使用notepad-exe练习" class="headerlink" title="13.5.3 使用notepad.exe练习"></a>13.5.3 使用notepad.exe练习</h2><p>首先要明确 IMAGE_IMPORT_DECRIPTOR结构体不在PE头而在PE体中 但查找其位置的信息在PE头中<br>前面提到过 NT头中可选头最后一个成员DataDirectory的 [1]记录的就是IMAGE_IMPORT_DECRIPTOR结构体的起始位置(RVA)<br>值为7604<br>RVA-&gt;RAW: 第一节区 RAW&#x3D;0x7604-0x1000+0x400 &#x3D; 6A04<br>WinHEX中找到 可以看到OFT(INT)的RVA值为7990 -&gt; RAW: 6D90   Name RVA:7AAC -&gt; RAW:6EAC  FT(IAT) RVA:12C4-&gt; RAW:6C4<br>跟踪Name可以看到 comdlg.dll字符串<br>跟踪INT 第一个值为7A7A(RVA) -&gt; RAW:6E7A<br>INT是IMAGE_IMPORT_BY_NAME结构体指针数组 数组第一个元素指向函数的Ordinal值000F 函数的名称为PageSetupDlgW<br>跟踪IAT(RAW:6C4) 找到对应comdlg32.dll库</p>
<p>在OllyDbg中查看<br>该exe的ImageBase是01000000所以PageSetupDlgW函数的IAT地址为010012C4 其值为75B83F20 是API的准确起始地址<br>在OD中转到75B83F20对应的反汇编可以看到正是函数开始的地址</p>
<p>IAT真的很重要！ 这些操作要自己多练才能够熟悉<br>尤其是注意到IAT的第一个元素被硬编码成76324906 但是OD中实际地址应该是75B83F20！！ 所以要利用ImageBase+dll’sIAT(RVA)来找!</p>
<h1 id="13-6-EAT"><a href="#13-6-EAT" class="headerlink" title="13.6 EAT"></a>13.6 EAT</h1><p>继续学习EAT<br>EAT使得不同的应用程序可以调用库文件中提供的函数 对应于DLL&#x2F;SYS (IAT对应于exe)<br>只有通过EAT才能准确求得从相应库中导出函数的起始地址<br>对应 IMAGE_EXPORT_DIRECTORY PE文件中仅有一个IMAGE_EXPORT_DIRECTORY结构体</p>
<p>NT可选头的DataDirectory[0].VitrualAdddress的值即为IED结构体数组的起始地址(RVA)<br>再复习下: DataDirectory有两个DWORD成员 VitrualAddress和Size<br>用CFF和WinHex查看<br>ExportDirectory的RVA偏移为168 值为262C &#x3D;&gt; RAW:1A2C<br>ED的size偏移为16C 值为6CFD</p>
<h2 id="13-6-1-IMAGE-EXPORT-DIRECTORY"><a href="#13-6-1-IMAGE-EXPORT-DIRECTORY" class="headerlink" title="13.6.1 IMAGE_EXPORT_DIRECTORY"></a>13.6.1 IMAGE_EXPORT_DIRECTORY</h2><p>下面介绍IMAGE_EXPORT_DIRECTORY结构体中的重要成员</p>
<ul>
<li>NumberOfFunctions: 实际Export函数的个数</li>
<li>NumberOfNames: Export函数中具有名字的函数个数</li>
<li>AddressOfFunctions: Export函数地址数组</li>
<li>AddressOfNames: 函数名称地址数组</li>
<li>AddressOfNameOrdinals: Ordinal地址数组</li>
</ul>
<p>kernel32.dll:</p>
<p><img src="https://s2.loli.net/2023/12/04/qanN2eP5TIwLRBv.png" alt="img"></p>
<p>从库中获取函数地址的API为GetProcAddress()函数 该API通过引用EAT来获取指定API的地址<br>GetProcAddress()操作原理:</p>
<ol>
<li>利用AddressOfNames成员转到函数名称数组</li>
<li>函数名称数组中存储着字符串的地址 通过strcmp比较字符串 查找指定函数的名称(此时数组索引记为name_index)</li>
<li>利用AddressOfNameOrdinals成员 转到ordinal数组</li>
<li>在ordinal数组中通过name_index查找相应ordinal的值</li>
<li>利用AddressOfFunctions成员转到函数地址数组(EAT)</li>
<li>利用4中求到的ordinal值作为数组索引 在EAT中获得指定函数的起始地址</li>
</ol>
<h2 id="13-6-2-使用kernel32-dll练习"><a href="#13-6-2-使用kernel32-dll练习" class="headerlink" title="13.6.2 使用kernel32.dll练习"></a>13.6.2 使用kernel32.dll练习</h2><p>练习从kernel32.dll文件的EAT中查找AddAtomW函数<br>前面计算过IMAGE_EXPORT_DIRECTORY的RAW偏移为1A2C(CFF好像转到输出目录直接就能看)<br>WinHex中找到<br>AddressOfName: offset:1A4C 值:3538(RVA) -&gt; RAW:2938<br>找打第三个地址: 4BB3(RVA) -&gt; RAW:3FB3<br>找到查看 确实是AddAtomw的字符串!</p>
<p>同样可以查到AddAtomW对应的ordinal&#x3D;2(对应数组第3个元素)<br>最后查找AddAtomW的实际函数地址<br>AddressOfFunctions: RAW:1A48 值 2654(RVA) -&gt; RAW:1A54<br>这是数组起始位置 我们已知ordinal为2 所以找第三个 对应地址1A5C 得到的值:0326D9(RVA)<br>这里的RVA是相对kernel32.dll的ImageBase的<br>在NT可选头查看ImageBase的值: 7C800000 所以 AddAtomW函数的VA值为RVA+IB &#x3D; 7C8326D9<br>在OD中查看验证(然而我用OD打开看不到这段的内存…)<br>用IDA打开一样 找到这个地址<br><img src="https://s2.loli.net/2023/12/04/sgUdRnqeV8HJ9Ic.png" alt="img"></p>
<p>可以看到确实就是AddAtomw函数的地址！！！</p>
<hr>
<p>第一遍看的时候只是过了一遍概念 没有跟着书上一起算RVA-&gt;RAW在winhex中来找对应值 也没有开OD来看<br>实操一遍收获还是挺多的 PE文件格式是重中之重！一定要反复看~！</p>
]]></content>
      <categories>
        <category>ReverseEngineering</category>
      </categories>
  </entry>
  <entry>
    <title>Complex RSA</title>
    <url>/2023/12/03/Complex-RSA/</url>
    <content><![CDATA[<p>复数RSA</p>
<span id="more"></span>
<p>在GeekGame2023遇到了复数RSA的概念 挺有意思的(orz) 记录一下</p>
<h2 id="复数域上的rsa-demo"><a href="#复数域上的rsa-demo" class="headerlink" title="复数域上的rsa demo"></a>复数域上的rsa demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,lcm,is_prime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2047</span>)</span><br><span class="line"></span><br><span class="line">f = (<span class="number">378122348642214690905411683807377396279362526734068034297186493255873563264253248095197659138069664908850853277799239471404715546747080714581633876343291058815268009173602365587463522797812239900814474973941995698621021680129530453282192603316731832323767320307650941745085796583822798379896337325L</span>, <span class="number">205549984221850341303682190742446959375043769671555741781145106776498798455293849755553794941345135675348633855787880355726112506553703853175271830126908219803257875131387292937296039523359975622001865593227631119497003599166091642640101746534401068507972834895023584843991641629874709898672559632L</span>)</span><br><span class="line">e = <span class="number">59107</span></span><br><span class="line">p = <span class="number">228517792080140341</span></span><br><span class="line">q = <span class="number">1675909164550923263854591345270445396052847869117231939809062226222204253885693425526434134321712288675268468398852452684029376569327518089966506865838909486699078280423099271324646863671350838232140981094611254627738568184261530942469845202934677427234062382272736609418198352717</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cadd</span>(<span class="params">a,b,n</span>):</span><br><span class="line">    <span class="keyword">return</span> (a[<span class="number">0</span>]+b[<span class="number">0</span>]%n,a[<span class="number">1</span>]+b[<span class="number">1</span>]%n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmul</span>(<span class="params">a,b,n</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a[<span class="number">0</span>]*b[<span class="number">0</span>]-a[<span class="number">1</span>]*b[<span class="number">1</span>])%n,(a[<span class="number">0</span>]*b[<span class="number">1</span>]+a[<span class="number">1</span>]*b[<span class="number">0</span>])%n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpow</span>(<span class="params">a,k,n</span>):</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">        a=cmul(a,a,n)</span><br><span class="line">        <span class="keyword">return</span> cpow(a,k/<span class="number">2</span>,n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> cmul(a,cpow(cmul(a,a,n),(k-<span class="number">1</span>)/<span class="number">2</span>,n),n)</span><br><span class="line"></span><br><span class="line">o=lcm((p*p-<span class="number">1</span>),(q*q-<span class="number">1</span>))</span><br><span class="line">fm=cpow(f,invert(e,o),n)</span><br><span class="line"><span class="built_in">print</span>(fm)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复数中的欧拉函数</p>
<ul>
<li>phi(p) &#x3D; p^2 - 1</li>
<li>phi(q) &#x3D; q^2 - 1</li>
<li>phi(n) &#x3D; phi(p) * phi(q)</li>
</ul>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="2023极客大挑战-EzComplex"><a href="#2023极客大挑战-EzComplex" class="headerlink" title="2023极客大挑战-EzComplex"></a>2023极客大挑战-EzComplex</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage9.3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;FAKE&#123;Do_You_know_Complex_numbers&#125;&#x27;</span></span><br><span class="line">p = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">q = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">N = <span class="built_in">pow</span>(p, <span class="number">2</span>) + <span class="built_in">pow</span>(q, <span class="number">2</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line"><span class="string">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>N &#x3D; p^2 + q^2 &#x3D; (p+qi) * (p-qi)<br>在复数域上分解N 遍历其因子就能得到p,q<br>一些sage用法说明:</p>
<ul>
<li>ZZ(i)[N]: 创建了一个整数高斯环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(zn):</span><br><span class="line">    p, q = <span class="built_in">int</span>(d[<span class="number">0</span>]), <span class="built_in">int</span>(d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q) <span class="keyword">and</span> p.bit_length()&gt;<span class="number">300</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p= <span class="subst">&#123;p&#125;</span>\nq= <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">p= <span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span></span><br><span class="line">q= <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="未知来源"><a href="#未知来源" class="headerlink" title="未知来源"></a>未知来源</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, totient</span><br><span class="line"><span class="comment"># where totient is a function used to calculate phi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, length</span>):</span><br><span class="line">    pad_length = length - <span class="built_in">len</span>(msg) - <span class="number">1</span></span><br><span class="line">    pad_data = os.urandom(pad_length)</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">b&#x27;\x00&#x27;</span> + pad_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">return</span> msg.split(<span class="string">b&quot;\x00&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">bits = <span class="number">512</span></span><br><span class="line">p = getPrime(bits)</span><br><span class="line">q = getPrime(bits)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">sha_flag = hashlib.sha256(flag).digest()</span><br><span class="line"></span><br><span class="line">m1 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[:<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>:], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">m2 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">phi = totient(p, q)</span><br><span class="line">e = q * inverse(p, phi)</span><br><span class="line">c1 = complex_pow(m1, e, n)</span><br><span class="line">c2 = complex_pow(m2, e, n)</span><br><span class="line"></span><br><span class="line">c1.show()</span><br><span class="line">c2.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698, 9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900]</span></span><br><span class="line"><span class="string">[62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003, 62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520]</span></span><br><span class="line"><span class="string">n = 94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里计算p,q的phi是复数域上的计算方式:</p>
<ul>
<li>phi(p) &#x3D; p^2 - 1</li>
<li>phi(q) &#x3D; q^2 - 1</li>
<li>phi(n) &#x3D; phi(p) * phi(q)</li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/SetLslk9bdAMVp4.png" alt="img"></p>
<p>要时刻记住phi(x) &#x3D; x^2 - 1</p>
<p>然后 c1^n - m &#x3D; k1 * q<br>由于m为128bits 完全可以在modn下copper求出m!(更新了cooper的用法 以前只会用来单独求p,q 其实它找的是模n的一个因子的意义下为0的根 完全可以用来解kp,kq的情况)</p>
<p>这里我们要自己加一个返回实部虚部的函数 不然返回的是一个Complex对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re,self.im</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = [<span class="number">90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698</span>, <span class="number">9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900</span>]</span><br><span class="line">c2 = [<span class="number">62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003</span>, <span class="number">62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520</span>]</span><br><span class="line">n = <span class="number">94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"></span><br><span class="line">c1 = Complex(c1[<span class="number">0</span>],c1[<span class="number">1</span>])</span><br><span class="line">c2 = Complex(c2[<span class="number">0</span>],c2[<span class="number">1</span>])</span><br><span class="line">c1n = complex_pow(c1,n,n).get_value()</span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;m1&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment"># f = c1n - m1</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># m_1 = f.small_roots(X=2^128,beta=0.4)[0]</span></span><br><span class="line"><span class="comment"># q = gcd(c1n-m_1,n)</span></span><br><span class="line"><span class="comment"># p = n//q</span></span><br><span class="line"><span class="comment"># assert p*q == n</span></span><br><span class="line"><span class="comment"># print(f&#x27;p= &#123;p&#125;\nq= &#123;q&#125;&#x27;)</span></span><br><span class="line">q = <span class="number">7323077971059291689707065981399299595305255699400528762823657455799263529156562060157257164843406722707105788120169666250562251092133204672454047510142903</span></span><br><span class="line">p = <span class="number">12841648517017166445551091061211185386388830485650207877732791165106786665791893519935905079260599145467726270747052676462914579177741552378246815211750259</span></span><br><span class="line">phi = (p**<span class="number">2</span>-<span class="number">1</span>)*(q**<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">e = modinv(p,phi)*q%phi</span><br><span class="line">d = modinv(e,phi)</span><br><span class="line">m = complex_pow(c2,d,n).get_value()</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m[<span class="number">0</span>])),n2s(<span class="built_in">int</span>(m[<span class="number">1</span>])))</span><br></pre></td></tr></table></figure>
<p>最后<strong>flag</strong>: flag{3ef6db06-b837-11ed-9825-00155dfcdef9}</p>
<p>总结一下:<br>关键知识点: 复数域下phi的不同<br>与常规RSA的结合: 都有 de&#x3D;kphi+1 都有coopersmith等攻击方法<br>通过这道题学习到复数RSA的同时 还更新了cooper求kp,kq！</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023极客大挑战 Crpyto</title>
    <url>/2023/12/03/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Crpyto/</url>
    <content><![CDATA[<p>没参加比赛 跟着其他师傅的博客复现一下其中的一些题目</p>
<span id="more"></span>

<h2 id="OTPTwice"><a href="#OTPTwice" class="headerlink" title="OTPTwice"></a>OTPTwice</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor </span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># step0: key generation &amp; distribution</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s0</span>(<span class="params">msg</span>): </span><br><span class="line">    k1,k2 = [urandom(<span class="built_in">len</span>(msg)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">    <span class="keyword">return</span> k1,k2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1: Alice encrypt M, and send it to Bob</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s1</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c1 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: Bob encrypt c1, and send it to Alice </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    c2 = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> c2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: Alice decrypt c2, and send it to Bob.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s3</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c3 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c3 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step4: Bob decrypt c3, get M.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s4</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    m_ = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> m_ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg,k1,k2</span>): </span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">assert</span> msg == m_</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here&#x27;s what hacker Eve got:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_</span>(<span class="params">msg,k1,k2</span>):</span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">if</span> HACK == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(c1) </span><br><span class="line">        <span class="built_in">print</span>(c2) </span><br><span class="line">        <span class="built_in">print</span>(c3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k1,k2 = s0(flag) </span><br><span class="line">encrypt_(flag,k1,k2) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line"><span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>emmm 看着OTP我就记下来了 …<br>分析一下<br><code>c1 = msg xor k1</code><br><code>c2 = c1 xor k2</code><br><code>c3 = c2 xor k1</code><br>题目还贴心地告诉了我们 <code>_m = c3 xor k2 = msg</code><br>直接解:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1 = <span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line">c2 = <span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line">c3 = <span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"></span><br><span class="line">k2 = xor(c1,c2)</span><br><span class="line">flag = xor(c3,k2)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># SYC&#123;I_l0v3_Crypt0&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="OldAlgorithm"><a href="#OldAlgorithm" class="headerlink" title="OldAlgorithm"></a>OldAlgorithm</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+os.urandom(padlen-<span class="built_in">len</span>(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = pad(flag,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">p = [getPrime(<span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)] </span><br><span class="line">c = [bytes_to_long(flag)%i <span class="keyword">for</span> i <span class="keyword">in</span> p] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]</span></span><br><span class="line"><span class="string">c= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>就是CRT 就当复习下sage用法了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p= [<span class="number">58657</span>, <span class="number">47093</span>, <span class="number">47963</span>, <span class="number">41213</span>, <span class="number">57653</span>, <span class="number">56923</span>, <span class="number">41809</span>, <span class="number">49639</span>, <span class="number">44417</span>, <span class="number">38639</span>, <span class="number">39857</span>, <span class="number">53609</span>, <span class="number">55621</span>, <span class="number">41729</span>, <span class="number">60497</span>, <span class="number">44647</span>, <span class="number">39703</span>, <span class="number">55117</span>, <span class="number">44111</span>, <span class="number">57131</span>, <span class="number">37747</span>, <span class="number">63419</span>, <span class="number">63703</span>, <span class="number">64007</span>, <span class="number">46349</span>, <span class="number">39241</span>, <span class="number">39313</span>, <span class="number">44909</span>, <span class="number">40763</span>, <span class="number">46727</span>, <span class="number">34057</span>, <span class="number">56333</span>]</span><br><span class="line">c= [<span class="number">36086</span>, <span class="number">4005</span>, <span class="number">3350</span>, <span class="number">23179</span>, <span class="number">34246</span>, <span class="number">5145</span>, <span class="number">32490</span>, <span class="number">16348</span>, <span class="number">13001</span>, <span class="number">13628</span>, <span class="number">7742</span>, <span class="number">46317</span>, <span class="number">50824</span>, <span class="number">23718</span>, <span class="number">32995</span>, <span class="number">7640</span>, <span class="number">10590</span>, <span class="number">46897</span>, <span class="number">39245</span>, <span class="number">16633</span>, <span class="number">31488</span>, <span class="number">36547</span>, <span class="number">42136</span>, <span class="number">52782</span>, <span class="number">31929</span>, <span class="number">34747</span>, <span class="number">29026</span>, <span class="number">18748</span>, <span class="number">6634</span>, <span class="number">9700</span>, <span class="number">8126</span>, <span class="number">5197</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(CRT_list[c,p])</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="number">37699681561344853433172597523387281471904607566697320008840601281159457436694</span></span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;CRT_1s_s0_ju1cy!&#125;]mC\x9c\xf9C/\xfc\xb8t\x16&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="PolyRSA"><a href="#PolyRSA" class="headerlink" title="PolyRSA"></a>PolyRSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *  </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line">p,q = [getPrime(<span class="number">2048</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e1,e2 = [getPrime(<span class="number">17</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q </span><br><span class="line">c1 = gmpy2.powmod(<span class="number">2</span>*p + <span class="number">3</span>*q,e1,n)</span><br><span class="line">c2 = gmpy2.powmod(<span class="number">5</span>*p + <span class="number">7</span>*q,e2,n) </span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>,e2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#e1= 113717</span></span><br><span class="line"><span class="comment">#e2= 80737</span></span><br><span class="line"><span class="comment">#c1= 97528398828294138945371018405777243725957112272614466238005409057342884425132214761228537249844134865481148636534134025535106624840957740753950100180978607132333109806554009969378392835952544552269685553539656827070349532458156758965322477969141073720173165958341043159560928836304172136610929023123638981560836183245954461041167802574206323129671965436040047358250847178930436773249800969192016749684095882580749559014647942135761757750292281205876241566597813517452803933496218995755905344070203047797893640399372627351254542342772576533524820435965479881620338366838326652599102311019884528903481310690767832417584600334987458835108576322111553947045733143836419313427495888019352323209000292825566986863770366023326755116931788018138432898323148059980463407567431417724940484236335082696026821105627826117901730695680967455710434307270501190258033004471156993017301443803372029004817834317756597444195146024630164820841200575179112295902020141040090350486764038633257871003899386340004440642516190842086462237559715130631205046041819931656962904630367121414263911179041905140516402771368603623318492074423223885367923228718341206283572152570049573607906130786276734660847733952210105659707746969830132429975090175091281363770357</span></span><br><span class="line"><span class="comment">#c2= 353128571201645377052005694809874806643786163076931670184196149901625274899734977100920488129375537186771931435883114557320913415191396857882995726660784707377672210953334914418470453787964899846194872721616628198368241044602144880543115393715025896206210152190007408112767478800650578941849344868081146624444817544806046188600685873402369145450593575618922226415069043442295774369567389939040265656574664538667552522329712111984168798829635080641332045614585247317991581514218486004191829362787750803153463482021229058714990823658655863245025037102127138472397462755776598314247771125981017814912049441827643898478473451005083533693951329544115861795587564408860828213753948427321483082041546722974666875065831843384005041800692983406353922680299538080900818930589336142421748023025830846906503542594380663429947801329079870530727382679634952272644949425079242992486832995962516376820051495641486546631849426876810933393153871774796182078367277299340503872124124714036499367887886486264658590613431293656417255355575602576047502506125375605713228912611320198066713358654181533335650785578352716562937038768171269136647529849805172492594142026261051266577821582011917001752590659862613307646536049830151262848916867223615064832279222</span></span><br><span class="line"><span class="comment">#c= 375617816311787295279632219241669262704366237192565344884527300748210925539528834207344757670998995567820735715933908541800125317082581328287816628816752542104514363629022246620070560324071543077301256917337165566677142545053272381990573611757629429857842709092285442319141751484248315990593292618113678910350875156232952525787082482638460259354559904243062546518553607882194808191571131590524874275187750985821420412987586148770397073003186510357920710387377990379862185266175190503647626248057084923516190642292152259727446111686043531725993433395002330208067534104745851308178560234372373476331387737629284961288204368572750848248186692623500372605736825205759172773503283282321274793846281079650686871355211691681512637459986684769598186821524093789286661348936784712071312135814683041839882338235290487868969391040389837253093468883093296547473466050960563347060307256735803099039921213839491129726807647623542881247210251994139130146519265086673883077644185971830004165931626986486648581644383717994174627681147696341976767364316172091139507445131410662391699728189797082878876950386933926807186382619331901457205957462337191923354433435013338037399565519987793880572723211669459895193009710035003369626116024630678400746946356</span></span><br><span class="line"><span class="comment">#n= 728002565949733279371529990942440022467681592757835980552797682116929657292509059813629423038094227544032071413317330087468458736175902373398210691802243764786251764982802000867437756347830992118278032311046807282193498960587170291978547754942295932606784354258945168927044376692224049202979158068158842475322825884209352566494900083765571037783472505580851500043517614314755340168507097558967372661966013776090657685241689631615245294004694287660685274079979318342939473469143729494106686592347327776078649315612768988028622890242005700892937828732613800620455225438339852445425046832904615827786856105112781009995862999853122308496903885748394541643702103368974605177097553007573113536089894913967154637055293769061726082740854619536748297829779639633209710676774371525146758917646731487495135734759201537358734170552231657257498090553682791418003138924472103077035355223367678622115314235119493397080290540006942708439607767313672671274857069053688258983103863067394473084183472609906612056828326916114024662795812611685559034285371151973580240723680736227737324052391721149957542711415812665358477474058103338801398214688403784213100455466705770532894531602252798634923125974783427678469124261634518543957766622712661056594132089</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>观察题目给的两个多项式 都是p,q线性组合的形式 那么modn的话就可以把交叉项消掉<br>这种跟羊城杯有一道一模一样<br>展成只有p,q幂次的两个式子分别e2,e1次方<br>然后乘对应系数消元 求个gcd即可分解n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1= <span class="number">113717</span></span><br><span class="line">e2= <span class="number">80737</span></span><br><span class="line">c1= </span><br><span class="line">c2= </span><br><span class="line">c= </span><br><span class="line">n= </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">kq = (<span class="built_in">pow</span>(c1,e2,n)*<span class="built_in">pow</span>(<span class="number">5</span>,e1*e2,n)-<span class="built_in">pow</span>(c2,e1,n)*<span class="built_in">pow</span>(<span class="number">2</span>,e1*e2,n))</span><br><span class="line">q = gcd(kq,n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">p = n//q</span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line">d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;poly_rsa_Just_need5_s1mple_gcd&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Simple3DES"><a href="#Simple3DES" class="headerlink" title="Simple3DES"></a>Simple3DES</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">xor = <span class="keyword">lambda</span> a,b: <span class="built_in">bytes</span>([a[i % <span class="built_in">len</span>(a)] ^ b[i % <span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+<span class="built_in">chr</span>((padlen-(<span class="built_in">len</span>(msg)%padlen))).encode()*(padlen-(<span class="built_in">len</span>(msg)%padlen))</span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">sec = os.urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">msg,key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = long_to_bytes(key)</span><br><span class="line">        msg = xor(long_to_bytes(msg),sec)</span><br><span class="line">        des = DES3.new(key,DES3.MODE_ECB)</span><br><span class="line">        ct = xor(des.encrypt(pad(msg,<span class="number">8</span>)),sec)</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(ct)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> Exception</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service</span>():</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Simple DES Encryption Service&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="keyword">while</span> cnt&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1. Encrypt\n2. Get encrypted flag.&#x27;</span>)</span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input msg:&#x27;</span>)</span><br><span class="line">            msg = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(msg,key))</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(bytes_to_long(flag),key))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bye!&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    service()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>

<p>没靶机 就单纯学习一下吧~ (最近要恶补交互题 :(  🫥qaq )<br>题目给了个<a href="https://blog.csdn.net/Mr_wzc/article/details/121713518" target = "_blank">学习链接 </a><br>题目中在3DES加密结束后还有个 <code>ct = xor(des.encrypt(pad(msg,8)),sec)</code> 再xor了一次</p>
<h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>学习到了一个新知识:DES弱密钥 <a href="https://lightless.me/archives/DES-Weak-Keys.html">https://lightless.me/archives/DES-Weak-Keys.html</a><br>用这些弱密钥加密会导致</p>
<ul>
<li>明文连续加密两次仍然是明文</li>
<li>密文连续解密两次仍然是密文</li>
</ul>
<p>那么利用3DES一个三次操作 加密-解密-加密   解密-加密-解密<br>只要构造 <code>key1=key3</code><br>第一次交互选择 2:</p>
<ul>
<li>enc(flag,k1)</li>
<li>dec(flag,k2)</li>
<li>enc(flag,k3)</li>
<li>xor(flag,sec)</li>
</ul>
<p>这样相当于得到的是 encflag &#x3D; dec(flag,k2)^sec 的值</p>
<p>第二次交互选择 1:</p>
<ul>
<li>enc(encflag,k1)</li>
<li>dec(encflag,k2)</li>
<li>enc(encflag,k3)</li>
<li>xor(encflag,sec)</li>
</ul>
<p>这样就得到 dec(dec(flag,k2),k2)^sec^sec &#x3D; flag</p>
<p>这里选择 弱密钥拼接成key (其实我最开始想的三个key全取一样也行 只是要选择弱密钥来拼接)<br><code>key = b&quot;\x01\x01\x01\x01\x01\x01\x01\x01&quot;+b&quot;\xFE\xFE\xFE\xFE\xFE\xFE\xFE\xFE&quot;+b&quot;\x01\x01\x01\x01\x01\x01\x01\x01&quot;</code></p>
<h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>注意到加密的时候对msg进行了pad填充<br>我们发送一个空字符串过去时</p>
<ul>
<li>sec + b’\x08’*8</li>
<li>3DES</li>
<li>xor sec</li>
</ul>
<p>利用<code>enc[-8:]</code>是3DES(b’\x08’*8) xor sec 这一点便可以反解出 sec</p>
<p>总结一下其实好多与DES&#x2F;AES相关的交互题破题点常常在padding上 (Do not leak your padding status !)</p>
<h2 id="Energetic-Carcano"><a href="#Energetic-Carcano" class="headerlink" title="Energetic_Carcano"></a>Energetic_Carcano</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from sage.all import *</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span> </span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">pbits = <span class="number">120</span></span><br><span class="line">abp = <span class="string">&quot;abp&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a,b,p,turn,ans</span>):</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(a) == ans </span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;b&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(b) == ans</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(p) == ans  </span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nHi Crypto-ers! AL3XEI here. I know you are excellent at math, so I prepared a game for u.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In the equation y^2 = x^3+ a*x + b (mod p), 4 points are given. Plz give me the right a, b or p to contine the game.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Good Luck!\n&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        turn = random.choice(abp) </span><br><span class="line">        p = getPrime(pbits) </span><br><span class="line">        a,b = [next_prime(random.randint(<span class="number">2</span>,p)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span>] </span><br><span class="line">        curve = EllipticCurve(GF(p),[a,b]) </span><br><span class="line">        pts = [curve.random_point() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        pts = [(_[<span class="number">0</span>], _[<span class="number">1</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> pts] </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> pts:</span><br><span class="line">            <span class="built_in">print</span>(_,end=<span class="string">&quot; &quot;</span>) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nGive me &#x27;</span>+turn+<span class="string">&quot; :&quot;</span>) </span><br><span class="line">        ans = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)) </span><br><span class="line">        <span class="keyword">if</span> check(a,b,p,turn,ans):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Good! Next challenge-&gt;\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            pbits+=<span class="number">5</span>  </span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">            exit() </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure>

<p>题目大意：10轮 每次给一条未知参数椭圆曲线上的4个点 要求还原参数</p>
<p>我的第一思路是sage能直接求吗? 把同余写成等式刚好四个方程四个未知数 肯定是能解的 :(<br>由于没有环境也不知道能不能成 瞄了眼师傅的WP 提示用类似LCG的方法<br>那么首先还原p<br>分别取1,2 1,3 1,4 2,3 四组等式<br>每组内作差消去b 移项得到a的表达式<br>再两组联立消掉a 这样得到两组同余0 modp的方程<br>求gcd即可得到p<br>然后还原a,b就简单了</p>
<h2 id="Just-need-One"><a href="#Just-need-One" class="headerlink" title="Just need One"></a>Just need One</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>)</span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==DEBUG MODE==&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    parms = [random.getrandbits(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)] </span><br><span class="line">    res = res = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Give me x calculating f(x) :\n&gt; &#x27;</span>))  </span><br><span class="line">    <span class="keyword">if</span> res &gt;= <span class="number">2</span>**<span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Give me something smaller.\n&quot;</span>)  </span><br><span class="line">        <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">        exit() </span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>): </span><br><span class="line">        cnt += <span class="built_in">pow</span>(res,_)*parms[_]  </span><br><span class="line">    <span class="built_in">print</span>(cnt) </span><br><span class="line">    ans = <span class="built_in">input</span>(<span class="string">&#x27;Give me Coefficients :\n&gt; &#x27;</span>) </span><br><span class="line">    ans = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> ans.split(<span class="string">&quot;,&quot;</span>)] </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ans == parms:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure>

<p>题目的意思是生成了一个127次多项式 我们可以给一个<code>&lt;=2^32</code>的数作为x<br>能知道f(x)的值 反推所有系数</p>
<p>其实题目那个check大小的限制已经很明确的提示思路了 我们选择-2^32也可以还原<br>从最高位开始 除以对应幂次后绝对值向上取整即可还原</p>
<h2 id="Fi1nd-th3-x’"><a href="#Fi1nd-th3-x’" class="headerlink" title="Fi1nd_th3_x’"></a>Fi1nd_th3_x’</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>* </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">e = getPrime(<span class="number">32</span>)</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">dP = d%((q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dQ = d%((p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dR = d%((p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = s2n(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>,r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dP=&#x27;</span>,dP)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dQ=&#x27;</span>,dQ)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dR=&#x27;</span>,dR)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span></span><br><span class="line"><span class="string">q= 12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span></span><br><span class="line"><span class="string">r= 12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span></span><br><span class="line"><span class="string">dP= 116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span></span><br><span class="line"><span class="string">dQ= 44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span></span><br><span class="line"><span class="string">dR= 60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span></span><br><span class="line"><span class="string">c= 93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>emmm 怎么说呢 我就随便试了试 (想到flag不经过padding还是挺小的)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dP,q*r)))</span><br></pre></td></tr></table></figure>
<p>然后就出了…<br><code>SYC&#123;CRT_1s_f3n_but_Gen3hi_im9act_is_a_balabalaba&#125;</code></p>
<p>回到题目本身的考点: 不互素情况下的CRT<br>dP,dQ,dR 分别可以得到</p>
<p><img src="https://s2.loli.net/2023/12/03/dTgqRexIQvDsPkJ.png" alt="H~7~A___X_G80H_J7CW_K1L.png"></p>
<p><code>from sympy.ntheory.modular import crt</code> 这个crt可以解决不互素的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">n = p*q*r</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(crt([q*r,p*r,p*q],[<span class="built_in">pow</span>(c,dP,n),<span class="built_in">pow</span>(c,dQ,n),<span class="built_in">pow</span>(c,dR,n)])[<span class="number">0</span>]%n))</span><br></pre></td></tr></table></figure>

<h2 id="Diligent-Liszt"><a href="#Diligent-Liszt" class="headerlink" title="Diligent_Liszt"></a>Diligent_Liszt</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;SYC&quot;</span>)</span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">g = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_p_1</span>(<span class="params">digit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    pri = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(primes)&lt;<span class="number">100</span>):</span><br><span class="line">        pri = gp.next_prime(pri)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(pri))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">2</span>**digit:</span><br><span class="line">            count *= random.choice(primes)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(gp.is_prime(count)):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">p,q,r = [gen_p_1(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pqr&quot;</span>] </span><br><span class="line"></span><br><span class="line">n = p*q*r </span><br><span class="line">x = bytes_to_long(flag) </span><br><span class="line">y = gp.powmod(g,x,n) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(q))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r))   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(y)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x)) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line"><span class="string">q = 1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line"><span class="string">r = 132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line"><span class="string">y = 5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>由题目p,q,r的生成方式知: p-1,q-1,r-1均光滑<br>注意到p,q,r均为素数 那么我们分别对mod p,q,r求dlp后crt组合起来即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="number">3</span></span><br><span class="line">p = <span class="number">1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line">q = <span class="number">1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line">r = <span class="number">132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line">y = <span class="number">5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line">n = p*q*r</span><br><span class="line"></span><br><span class="line">mp = discrete_log(mod(y,p),mod(g,p))</span><br><span class="line">mq = discrete_log(mod(y,q),mod(g,q))</span><br><span class="line">mr = discrete_log(mod(y,r),mod(g,r))</span><br><span class="line"><span class="built_in">print</span>(CRT_list([mp,mq,mr],[p,q,r]))</span><br><span class="line">m = <span class="number">10611516989504525712597368786937786671609696614143113241754963687897074368833799765059908989</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D1scr3te_L0g_W1th_Mult1pl3_pr1m35&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="EzComplex"><a href="#EzComplex" class="headerlink" title="EzComplex"></a>EzComplex</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage9.3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;FAKE&#123;Do_You_know_Complex_numbers&#125;&#x27;</span></span><br><span class="line">p = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">q = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">N = <span class="built_in">pow</span>(p, <span class="number">2</span>) + <span class="built_in">pow</span>(q, <span class="number">2</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line"><span class="string">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>az… 学到了 (<a href="/2023/12/03/Complex-RSA/" title="Complex RSA">Complex-RSA</a>)<br>N &#x3D; p^2 + q^2 &#x3D; (p+qi) * (p-qi)<br>在复数域上分解N 遍历其因子就能得到p,q</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(zn):</span><br><span class="line">    p, q = <span class="built_in">int</span>(d[<span class="number">0</span>]), <span class="built_in">int</span>(d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q) <span class="keyword">and</span> p.bit_length()&gt;<span class="number">300</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p= <span class="subst">&#123;p&#125;</span>\nq= <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">p= <span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span></span><br><span class="line">q= <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,e</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[i^<span class="number">3</span> - <span class="number">10</span>*i^<span class="number">2</span> + <span class="number">31</span>*i - <span class="number">30</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> e])</span><br><span class="line"></span><br><span class="line">LEN = <span class="number">32</span></span><br><span class="line">flag = pad(flag,<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LongArray</span>(<span class="params">t:<span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [bytes_to_long(t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BytesArray</span>(<span class="params">t:<span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [long_to_bytes(t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ArrayXor</span>(<span class="params">a:<span class="built_in">list</span>,b:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [xor(a[i],b) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scissors</span>(<span class="params">flag:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [flag[i:i+<span class="built_in">len</span>(flag)//<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="built_in">len</span>(flag)//<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">m: <span class="built_in">bytes</span>, bits: <span class="built_in">int</span>, level: <span class="built_in">int</span></span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    M = random_matrix(Zmod(p), LEN).matrix_from_rows_and_columns(<span class="built_in">range</span>(LEN), <span class="built_in">range</span>(LEN-level))</span><br><span class="line">    c = vector(GF(p), m) * M</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;p&quot;</span>: p, <span class="string">&quot;M&quot;</span>: M.<span class="built_in">list</span>(), <span class="string">&quot;c&quot;</span>: c.<span class="built_in">list</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">groebner_challenge</span>(<span class="params">m,e</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    s = <span class="built_in">sum</span>(m)</span><br><span class="line">    c = [<span class="built_in">pow</span>(m[i],e[i],p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    c.insert(<span class="number">0</span>,s)</span><br><span class="line">    c.insert(<span class="number">0</span>,p)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">key = os.urandom(LEN)</span><br><span class="line">Get_key = challenge(key,<span class="number">256</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">S_bytes = scissors(flag)</span><br><span class="line">C_bytes = ArrayXor(S_bytes,key)</span><br><span class="line">C_long  = LongArray(C_bytes)</span><br><span class="line"></span><br><span class="line">groebner_challenge = groebner_challenge(C_long,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;keyTask.chall&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;Get_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;groebnerTask.chall&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;groebner_challenge&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>先学习下groeber基再回来补</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023 - 12 - Diary~</title>
    <url>/2023/12/03/2023-12-Diary/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="16506962007ed0509e3cfa0aad93e9beec7ecda9c5e046fa758d37b2ff2a70d6">84ddd93a2d570b3707d5ad36f450649bd9089ff895aa022e66c86996c1b8d12f26a776805ca63152fc06b8f8245079bb338a7a943efc7fdd92f3bc6a120d5b9f4bcfbf7e4f4a50dbe29e6c7de56d1c471680fe22143b75feeed6216317535a680b76be7d22f6a670a4e4e2afc97b3b74530fd2abe982b3faf2281601a62ac07f28f2cc8f9ea94e99b5c41ecb8b2e72900dfa68f63f8a587387d77e50cc18da47246b03d27332279b3bede1beef93d058b07a8513ae12ab397e909db7febec92aea3929e435cb5334ec34df806d1d309cf1e080769002d39984be475e7ec063d53b88bf16a22172958cdcf2bf19ac9a28d388bdb014db2be9dbe551b08a07db8c69daabd8d36b08b2e95e481e19e9519dc51b3849de6d3999af534e55dee82624b66b806c9deaa603642ba8735da648cfdffb625720a758c3e35e120078c9589b1804f0de89b23ef8ee64f671c4ee3078b05fcea49dca9ed5b3415df1d663342263d5c05efb2c850365903d3ab557fbd4068c78fd0219f10aaafb764666e1d635efbaae3c407711fcac02ab94c0484907a11656c54f3f351aa5c4fd116ffe5b062181a18457d02740a0192b9a21ea4f444a9c0aece7b28b955613f3074bf99d3eab4150ab3b1d661cfe993434116f043e6cca7f73144cdd8ac3c2206400a72121149e201524a12c91105d88efca512dd19f94d81fcaac89105d73894d835d8427d9b2463b53c5b7d80475172be8cbfcdfc9e975c03da4accd2549c125725b5fb5f379e3660937200c0c1ec915dfe49cf93675bf8af23ff6886fdb58b78387b55b924f1292f29fb8bd951d077341631e8e7914c0af4afb9d57069c3ef6c6bd414b350fa6ff8f7e818dc5136fa94260a8bbb8b8fdc66f43e52c5af21acd801cc9eb551440423bc0decc153490c9273b54dbd95fcd87f631d740e67c5bddaf6e813aa4b2447dc34004ee21cfe291c8cd43c4be79d6a3c769786ffcf52077ef5655d0411df5d17c5ec58b40ae0085aead7a3e1d9102e19830e953bb9cce6194f677ad8296f41dafca75f33e7e48f05be8a376145d9e192bb24081b45f28c971830852b3fd57283a1fbab1fca66595e26a771441654f1e8e0269e71e8bcc7fc6ef99b21fcdf11abf0ee704f9df73cd871431e308fce0cc52b228fdc903489eb8b869a5541fd9dc417c8ee4f5a4bb5f410afff5d24ceb05d06ee1d8f53d3a89931ce5226c14077ca2ded7f8344d4702b1bc93078573a351fe3b9b0d3862126a20d02ba6391a921b68ab595bb0dca61f24d3cdb268aa772038adc694d2bae317ea2f5f4537cc8da0e9e31ce7fcf0f17c5ed4eb834517db278d6cca0ec3d27c08b8e1c11ff3d69eb4351fafffe6d791e45f6a628930e41cedcbb00a0e2a17572518ffd46dffdb5c73ad0415864a76318eaa516ac37c41f31c8ecb9d18439956dbef61d5ee1a8a7dcbffd768b69048fa3d1a7967cd7b817063109eb21defa7bced37c76b070b72ee6350b446a369367c0f0764683acfbd3d160985c47aa793e8abbbe65618d285e860b72dc6db7c5a11f9d2ef9157ef6445204f276fafd8fa1ccf4661d54ca2c5591c10d49b2ccf91073fede3f7ee697fcc9739fc9461f726ab387ca73fc410fcb44f8173c63da743913ad92ccad9c0b97c21989364c670c3ef00dde556754ee7267601438385b679e7a9fb3b5b62d27ce9dbffeb21c93c77446353efa0e159aa545a061c596115d03cbe4ce076a81f178ade1be0ee2ddc97c15a5d6a96eebf99e17e4b517ec3f69712e0fab308004880f7e0d67797ef5bd13b7d3f5deebf2b5a10b93011655b54aa739bbd8fa7f3b8a03a2415e6232105b9c47c70b27f7ed323f0f707b5b8fc482d85e5647ecd060712c9d0b7aa2dcf813ad91407236d476c35033a42453bad417e064f528ca353b35df63f34810c2af34a37dbbc016d87392e100b697499b1826b2f073b615adedfdba2184477fb21e5439d2cfb2630eb145d40d53de80f206a056893770a87fbb0792125a51d03cbc23a5ce70aa716c455f44cb0e155ee2bd42a4c3f3ba0d95cb3fc0ba1d6086ef24059ed5cbde67f59037785b1e604c473c24b5224dffdc17277c1bf00bacf8d0d1d7c60dbcb6c7a068a4b0881b3b5b6041231a155135e5ef1713637903820a6427bb4cf7dcce8f6a7e2a0796854e00226e53bf0e228e16d0d7bd141566079e4314334a6f463dcddf5ffe92be01cf074425eb47a6db22c272df4e9c6330f378ccb5df062b5c92c8ddb2ea863086e6ca1e266aa8bc371ff642b85e5cb83476f3213ed0c368256592ed5473277b78dfa33bd99eb693cb553bcf05cb5fa95228cb0eef3dd3bc8cd2ab3436ec13014d14aac0078b2c66a0f3a5fc56fe7a51f807a2e67997fe247a3c7b9dfba364bfc5c25ecee851cd907f769c062c131803531ad43368265d4b113d88418d1fc0229d2fbf12ca695cc735c5751636232181136a610a32b53351b3ded8c30d53337a928bbc534de3ec9722f047794dfad62cf5cb7ea1193af75347bea3eb784f994e2524ad17abe9e29c9578cffd5f71764a68aa41be406834b9c5e7b62ee5c809bb98c208332b14dd080a5ff83b5694a0301630cf97825853f142944e9132d8736c0163795aa9e0da00f0f12353f11a11e0f85bbc8d71bc3b738d50592591edadce7c6db19974de5da256f97be4bdec65cc81b2f817597020dbc02f65efb12047cca44799ee3ee8905297ba14a6b7a2718d66ccb01ecc3229d808df4ddf308d7f89e97bbf007b78d818e57a4263ce938b5963d96bd589f6ef10813b3c4c0ae855e2fb60f1b4ef3e38abe3f3c39517d062d76747790d70fdc0d9f9eba9f13ba24f389881360b0e9d3d6a71843ff565a194765f442f58c6c61ed3beb9d1fd51584a4af12731c9ab7de3a0f7e52fe91e959b9536d3fb2eaaef62a697ea60f469ae1d73b0f5a605c2c7925867785e77df04818fa6d2e793b54efcf1a1484b6833b7b4f32987f31c08c6154dc54fd2e3637f984289a9ee24c83811b65ef132e2f2fb0f8a291209349963206ec03f738692b606fa3e2be921c8ce9d06060067d75fd503a6d3459a600886b36a4b86d95caa5000427a62dd90e2fc847122f37cd69b67bef624b94e58023566f4709193ab5caee0cfc9b2a8f6fc6c2bed2a806863b7d39fe5065e292b65e354676754d7aab2a043396d59e971e2500157e0e8705ffe9de3e28e235abaff5691b3cd3132aa6eada4179413526b0b44fad2abe5062a865c332cae2cb4b3da8bf8a2cec738124d393db64267b89383716a84c71178823ea9ea9ce9d29205fcd82eefd4cd24522a0b136ab7e6aef00856e318e80ef896d9b38f35ee55ab986483a4033b12079c7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>DailyPlan</title>
    <url>/2023/12/03/DailyPlan/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ce06a5b01d00320bacdb6ed585933b0cac2f209156924c8962b1d063421a651d">84ddd93a2d570b3707d5ad36f450649bd9089ff895aa022e66c86996c1b8d12f6b1a2e7545af9b92c954a9c981a69d03a814e0546808b15197565aa84da9fbdffd598111d62bb2b7441cb3a89a15939735e51debcd048bdf92fa3d4808693b555698723a51925ca7c3cb074886fa27b29df42402ae14b060aed6ca26281572fb5b6410022c9bc099074fd77ad46550242a4de171854d9edd59a42fe8b9c64bbb9037dd899199a5d80f8b49437d87fa7b44bcfd1f9f0bb13a64547677eceac1f00ab0e66d16f93e837cc352e1e12a30816ef6dbe1dafc9a1a3a30a4b0446912140de0b104b19b0cae993bc3843fd8a7626074290dc866897c59c83033f4a914b84adf61a0b652ee9005c9c0e46ec8035da88b7514b8335cf410e083e26cd3df83c0d4d001382f93aea62358d0fcf35f1a6f3b6bae9996a437ec32253cebdf305c3e329570809b8f7a28a09b49975678b89274f18141514680f49c4128f711953db14da40068bd88e0200718bd980a7ee026a69cf621106b0682cf6627680ebf57b04cc4f9e127c7fed5763a148ee9485de6b248fb417ea46b340f6c061cf68154e334ae92e5489047677e82470a6bdc307e885cf4c969385b221542e1b9d6fe8e61d0942f9a6128b32d71d4908f9b32e95aaf3b35ae26896ce276f84a0971e9aed34d2acd1da953faf8638e491d4c5d08f58f93fedf1a7f69a204a7dce0137a87570054e96048b267c3b89e6af05d8f1ebbb1b55bc56c20c2fa5e58417baee2b24b9520d607602bc17861cc9988759c4404e8dc46a24ee0f250d3daa8c7705f5ce5516f2ad0c5fd6b050882d9375a3621f7ab08dbcf9c8d4003055943e34ae372bcc61440ca50b0ea9bdfb152b11fa29675c2cbe7276220c0831c178df4236c885b0dbd1a8d8b5370239728085b44419d68147958db6a604a11d45af091949b2827c261d8d43f9c4501a74f43d51cf574697493715fdd6ad49de46d9c0f6f33bcc269413870fd53893f9ebc4ba7f97d62b83c9fb9c029e5c57a9d07d34f1a06d4ab9c19b5f851d6d67212ee82bb86e5ac933fc2af0e55fcc77b1232fc5b32cff5358c85e58f390cd7dae22bb7a63333d2f259d1aff04db186a2aaafa83a2ccae66de7e22b84d9a1d119be6ee23be7f6f2a8684db3eb846cac6f79de614b227f1a2d8e4c72d026b1db34ba28a4d8b47ca5f3d490a19a1d4f73eaf7b8cf175749193b34cc68d011f353c0501b05b4f995f2f2a70038523f0bd404c3d12c6221b2f97d607b35c4f41842430a9b05ce1b25aad3dd8ebb79ea81808f1cc74497f397b8ee165b199555483cc95d0dc0855b4acc75ec7b43e68883193a61be81a3d7a7f6c8befadb4f6c9a66f071837054c6c08c08dab9e05603201ebc99ca41379abb7d8a20e00892ecc9f05a4a6b32700c9d43ad1823ea1eae901d7f3442ae3e6279b343748c1481e3d0560619ab1ab04fbcf4c760f48f7d533b15cdada84bae85ea794187c80f576d9f6cfadfdcacab901a412ab790925bd8b23f6d76f5aebf9e633bc790198d64b7315a16fd4e6b25296830e1434de71f71c8f3b8460ff431f7cc76</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>记录第一次jadx APK动调</title>
    <url>/2023/12/03/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1jadx-APK%E5%8A%A8%E8%B0%83/</url>
    <content><![CDATA[<p>这里以NestarCTF2023 WEEK2的AndroDbgme 为例<br>详细记录了关于解包apk 修改manifest 后重签名打包及最后jadx调试的过程</p>
<span id="more"></span>
<p>首先在网上下载apktool(有.jar 和 .bat)<br>然后放在 C&#x2F;Windows下 配置一下环境变量<br>使用命令: apktool  d  xxx.apk 先解包<br>然后在manifest里的这里加上一句 使得允许调试</p>
<p><img src="https://s2.loli.net/2023/12/03/5N24EkviRs3Dbyn.png" alt="1AP~68`_X45`O17@M8SOR_R.png"></p>
<p>apktool  b  xxx 重新打包成apk</p>
<p>由于要重签名 所以要生成keystore<br><code>keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</code></p>
<p>生成keystore后签名</p>
<p><code>jarsigner -verbose -keystore abc.keystore -signedjar des.apk src.APK abc.keystore</code></p>
<p>签名完毕就可以得到改过manifest的apk了</p>
<p>接下来就是动态调试 我这里用的是 jadx+雷电模拟器</p>
<p>在模拟器启动apk</p>
<p>jadx打开 点击debug</p>
<p><img src="https://s2.loli.net/2023/12/03/thwLBGubS9EMWp4.png" alt="img"></p>
<p>随便下个断点 点击运行 就可以在apk看到flag了</p>
<p><img src="https://s2.loli.net/2023/12/03/4ERAbnhmViyXkzw.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF-Re</category>
      </categories>
  </entry>
  <entry>
    <title>DASCTF X CBCTF 2023 10</title>
    <url>/2023/12/03/DASCTF-X-CBCTF-2023-10/</url>
    <content><![CDATA[<p>能力有限 只能复现能做的一些题 其他的慢慢补</p>
<span id="more"></span>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p>chall.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">f</span>):</span><br><span class="line">    random_chars = <span class="built_in">bytes</span>([random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">    f = f + random_chars</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_p</span>(<span class="params">p</span>):</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    P = p</span><br><span class="line">    n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> jacobi(<span class="number">2</span>,n1) == <span class="number">1</span>:</span><br><span class="line">            n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">while</span> P:</span><br><span class="line">            pad = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2023</span>)**<span class="number">2</span> </span><br><span class="line">            message = pad &lt;&lt; <span class="number">1</span> + P % <span class="number">2</span></span><br><span class="line">            cipher = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">            f.write(<span class="built_in">str</span>(cipher)+<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            P //= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>+ <span class="built_in">str</span>(n1) )    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_q</span>(<span class="params">q</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, n</span>):</span><br><span class="line">        e = random.randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">        noise = random.randint(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">        c = <span class="built_in">pow</span>(q+noise,e,n)</span><br><span class="line">        <span class="keyword">return</span> e, noise,c </span><br><span class="line">    </span><br><span class="line">    n2 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    e1, noise1, c1 = encrypt(q, n2)</span><br><span class="line">    e2, noise2, c2 = encrypt(q, n2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>+ <span class="built_in">str</span>(n2) ) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e1, noise1, c1) =&#x27;</span>, (e1,noise1,c1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e2, noise2, c2) =&#x27;</span>, (e2,noise2,c2))</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">guess_p(p)</span><br><span class="line">guess_q(q)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = padding(flag)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line"><span class="string">n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line"><span class="string">(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)</span></span><br><span class="line"><span class="string">(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)</span></span><br><span class="line"><span class="string">c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里比赛的时候大概明白这里的Jacobi的玄机 但是只是储备完全不够 瞎猜的几个结论也求不出p<br>求q的部分当时也以为e不同不能sage跑(虽说写了一个copper但好像写假了。。。 要再认真弄懂copper的原理)<br>先跑q:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">    g1 = (x+noise1)^e1-c1</span><br><span class="line">    g2 = (x+noise2)^e2-c2</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1,g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2,g1%g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1,g2)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(attack())</span></span><br></pre></td></tr></table></figure>
<p>然后求p<br>首先了解kronecker符号<br><img src="https://s2.loli.net/2023/12/03/VSfdpxDN2AtmHkJ.png" alt="_KE8ATP818UNXM_L6_9A_P2.png"><br>由于Jacobi只是将勒让德的奇素数推广到了奇数<br>而kronecker符号是推广到了一般的整数 更具普适意义</p>
<p>两种情况</p>
<ul>
<li><code>(2x^2)^e</code> </li>
<li><code>(2x^2+1)^e</code></li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/m9Br3gGlnudUvAO.png" alt="AHYCN6UYNIUKOMT____HZPE.png"><br><font color=red size=5>不要忘了欧拉准则！！！二次剩余最初的判断方式！！！</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    i = <span class="built_in">int</span>(i)</span><br><span class="line">    <span class="keyword">if</span>(kronecker(i,n1)==<span class="number">1</span>):</span><br><span class="line">        p = <span class="string">&#x27;1&#x27;</span>+p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = <span class="string">&#x27;0&#x27;</span>+p</span><br><span class="line"><span class="comment"># print(int(p,2))</span></span><br></pre></td></tr></table></figure>
<p>或者这种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(kronecker(i,n1)==-<span class="number">1</span>):</span><br><span class="line">        p = <span class="string">&#x27;0&#x27;</span>+p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = <span class="string">&#x27;1&#x27;</span>+p</span><br></pre></td></tr></table></figure>
<p>最后的flag<br><img src="https://s2.loli.net/2023/12/03/4bwU5vxHVqXTBIs.png" alt="6R1Y1YM9VKF78ACQ__@FXF0.png"></p>
<h2 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h2><p>粗浅学了下格密码 看了看背包密码LLL破解的本质<br>还是要学会自己造格子<br>这题跟普通的背包不同在于 每6个中必有3个1<br>所以要再加上一列的约束 即 Σxi &#x3D; 24<br>借大佬的图<br><img src="https://s2.loli.net/2023/12/03/7WanPqKwBNDe2gX.png" alt="Y@V1GI@_GOC3F_LV8V_LY_H.png"><br>最后判断就是在常规的-S那列为0后加上最后一列为0<br>solution.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">65651991706497</span>, <span class="number">247831871690373</span>, <span class="number">120247087605020</span>, <span class="number">236854536567393</span>, <span class="number">38795708921144</span>, <span class="number">256334857906663</span>, <span class="number">120089773523233</span>, <span class="number">165349388120302</span>, <span class="number">123968326805899</span>, <span class="number">79638234559694</span>, <span class="number">259559389823590</span>, <span class="number">256776519514651</span>, <span class="number">107733244474073</span>, <span class="number">216508566448440</span>, <span class="number">39327578905012</span>, <span class="number">118682486932022</span>, <span class="number">263357223061004</span>, <span class="number">132872609024098</span>, <span class="number">44605761726563</span>, <span class="number">24908360451602</span>, <span class="number">237906955893793</span>, <span class="number">204469770496199</span>, <span class="number">7055254513808</span>, <span class="number">221802659519968</span>, <span class="number">169686619990988</span>, <span class="number">23128789035141</span>, <span class="number">208847144870760</span>, <span class="number">272339624469135</span>, <span class="number">269511404473473</span>, <span class="number">112830627321371</span>, <span class="number">73203551744776</span>, <span class="number">42843503010671</span>, <span class="number">118193938825623</span>, <span class="number">49625220390324</span>, <span class="number">230439888723036</span>, <span class="number">241486656550572</span>, <span class="number">107149406378865</span>, <span class="number">233503862264755</span>, <span class="number">269502011971514</span>, <span class="number">181805192674559</span>, <span class="number">152612003195556</span>, <span class="number">184127512098087</span>, <span class="number">165959151027513</span>, <span class="number">188723045133473</span>, <span class="number">241615906682300</span>, <span class="number">216101484550038</span>, <span class="number">81190147709444</span>, <span class="number">124498742419309</span>]</span><br><span class="line">re = <span class="number">4051501228761632</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line">K = <span class="number">2</span>^<span class="number">10</span></span><br><span class="line">M = Matrix(ZZ,n+<span class="number">1</span>,n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    M[i,i] = <span class="number">1</span></span><br><span class="line">    M[i,n] = K*a[i]</span><br><span class="line">    M[i,n+<span class="number">1</span>] = K*<span class="number">1</span></span><br><span class="line">M[n,n] = -K*re</span><br><span class="line">M[n,n+<span class="number">1</span>] = -<span class="number">24</span>*K</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> M.LLL():</span><br><span class="line">    <span class="keyword">if</span>(line[-<span class="number">1</span>]==<span class="number">0</span> <span class="keyword">and</span> line[-<span class="number">2</span>]==<span class="number">0</span>):</span><br><span class="line">        x = [<span class="built_in">abs</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(x).issubset([<span class="number">0</span>, <span class="number">1</span>]):</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/03/YjdHfbD6wquvmnB.png" alt="image.png"></p>
<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="auuuu3"><a href="#auuuu3" class="headerlink" title="auuuu3"></a>auuuu3</h2><p>给的是一个autoit格式的exe<br>如果用IDA查看 基本上是做不出来的<br>万幸的是有个脚本可以帮我们extract<br><a href="https://github.com/nazywam/AutoIt-Ripper">https://github.com/nazywam/AutoIt-Ripper</a><br>然后这么用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> autoit_ripper <span class="keyword">import</span> extract, AutoItVersion</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\浏览器下载\auuuu3.exe&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># EA05 for v3.00+, EA06 for v3.26+</span></span><br><span class="line"><span class="comment"># Omitting `version` or passing None will try both versions</span></span><br><span class="line">content_list = extract(data=file_content, version=AutoItVersion.EA06)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\浏览器下载\auuuu3.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> content_list:</span><br><span class="line">        s = <span class="built_in">str</span>(content)</span><br><span class="line">        f.write(s)</span><br></pre></td></tr></table></figure>
<p>WP用的exe我没找到… 但是这样提取出来大致也能看<br>很容易定位到最后一部分<br><img src="https://s2.loli.net/2023/12/03/GAH385FJgWbe4xw.png" alt="image-1.png"><br>这里相当于load了一个dll 只是是用hex写的 我们将这段opcode导入dll用IDA来分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">OPCODE = <span class="string">&quotquot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\浏览器下载\enc.dll&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(binascii.unhexlify(OPCODE))</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/03/o6lqvjngdYhQsIW.png" alt="ZZ_QD_HMMKFJ94TSU_~VHPT.png"><br>标准的xxtea加密</p>
<p>我们已知 ciphertext<code>7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675</code></p>
<p>key<code>Wowww111auUu3</code><br>小端序转一下 解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">10</span>]= &#123;<span class="number">0x1A181872</span>,<span class="number">0x4B9FF702</span>,<span class="number">0xFFE87357</span>,<span class="number">0x32E73FE8</span>,<span class="number">0x9F2596DF</span>,<span class="number">0xAB6AB8F2</span>,<span class="number">0xA1685494</span>,<span class="number">0x833DA832</span>,<span class="number">0x0E759DCF</span>,<span class="number">0x75866C31</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">0x77776f57</span>,<span class="number">0x31313177</span>,<span class="number">0x75557561</span>,<span class="number">0x33</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n= <span class="number">10</span>; </span><br><span class="line">    btea(v, -n, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">    		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(v[i]&gt;&gt;(<span class="number">8</span>*j))&amp;<span class="number">0xff</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>flag : <strong>DASCTF{Oh1_autO1t_iS_so_Co0oL_aNd_Fun}</strong><br>可以看到 这题主要考的其实是合理利用工具进行分析(找到autoit-ripper后的分析其实并不难 <del>但如果只会IDA就G了…</del>)</p>
<h2 id="marshal"><a href="#marshal" class="headerlink" title="marshal"></a>marshal</h2><p>题目给的一个嵌套marshal的py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">code = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line"></span><br><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="built_in">exec</span>(l)</span><br></pre></td></tr></table></figure>
<p>直接执行是会报错的 拿到这种还是先用dis.dis查看下字节码(本地跑还一直报错 用在线python跑就行了)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(l)</span><br></pre></td></tr></table></figure>
<p>可以发现里面还嵌了marshal</p>
<details>
<summary>点击查看代码</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3           0 LOAD_CONST               0 (12)</span><br><span class="line">              2 LOAD_CONST               1 (5)</span><br><span class="line">              4 LOAD_CONST               2 (6)</span><br><span class="line">              6 LOAD_CONST               3 (11)</span><br><span class="line">              8 LOAD_CONST               4 (9)</span><br><span class="line">             10 LOAD_CONST               5 (0)</span><br><span class="line">             12 LOAD_CONST               6 (10)</span><br><span class="line">             14 LOAD_CONST               7 (13)</span><br><span class="line">             16 LOAD_CONST               8 (3)</span><br><span class="line">             18 LOAD_CONST               9 (14)</span><br><span class="line">             20 LOAD_CONST              10 (15)</span><br><span class="line">             22 LOAD_CONST              11 (8)</span><br><span class="line">             24 LOAD_CONST              12 (4)</span><br><span class="line">             26 LOAD_CONST              13 (7)</span><br><span class="line">             28 LOAD_CONST              14 (1)</span><br><span class="line">             30 LOAD_CONST              15 (2)</span><br><span class="line">             32 BUILD_LIST              16</span><br><span class="line">             34 STORE_NAME               0 (Sbox)</span><br><span class="line"></span><br><span class="line">  4          36 LOAD_CONST              16 (&lt;code object &lt;listcomp&gt; at 0x7fbf6f8f83a0, file &quot;&quot;, line 4&gt;)</span><br><span class="line">             38 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">             40 MAKE_FUNCTION            0</span><br><span class="line">             42 LOAD_NAME                1 (range)</span><br><span class="line">             44 LOAD_CONST              18 (16)</span><br><span class="line">             46 CALL_FUNCTION            1</span><br><span class="line">             48 GET_ITER</span><br><span class="line">             50 CALL_FUNCTION            1</span><br><span class="line">             52 STORE_NAME               2 (Sbox_inv)</span><br><span class="line"></span><br><span class="line">  5          54 LOAD_CONST               5 (0)</span><br><span class="line">             56 LOAD_CONST              18 (16)</span><br><span class="line">             58 LOAD_CONST              19 (32)</span><br><span class="line">             60 LOAD_CONST              20 (48)</span><br><span class="line">             62 LOAD_CONST              14 (1)</span><br><span class="line">             64 LOAD_CONST              21 (17)</span><br><span class="line">             66 LOAD_CONST              22 (33)</span><br><span class="line">             68 LOAD_CONST              23 (49)</span><br><span class="line">             70 LOAD_CONST              15 (2)</span><br><span class="line">             72 LOAD_CONST              24 (18)</span><br><span class="line">             74 LOAD_CONST              25 (34)</span><br><span class="line">             76 LOAD_CONST              26 (50)</span><br><span class="line">             78 LOAD_CONST               8 (3)</span><br><span class="line">             80 LOAD_CONST              27 (19)</span><br><span class="line">             82 LOAD_CONST              28 (35)</span><br><span class="line">             84 LOAD_CONST              29 (51)</span><br><span class="line"></span><br><span class="line">  6          86 LOAD_CONST              12 (4)</span><br><span class="line">             88 LOAD_CONST              30 (20)</span><br><span class="line">             90 LOAD_CONST              31 (36)</span><br><span class="line">             92 LOAD_CONST              32 (52)</span><br><span class="line">             94 LOAD_CONST               1 (5)</span><br><span class="line">             96 LOAD_CONST              33 (21)</span><br><span class="line">             98 LOAD_CONST              34 (37)</span><br><span class="line">            100 LOAD_CONST              35 (53)</span><br><span class="line">            102 LOAD_CONST               2 (6)</span><br><span class="line">            104 LOAD_CONST              36 (22)</span><br><span class="line">            106 LOAD_CONST              37 (38)</span><br><span class="line">            108 LOAD_CONST              38 (54)</span><br><span class="line">            110 LOAD_CONST              13 (7)</span><br><span class="line">            112 LOAD_CONST              39 (23)</span><br><span class="line">            114 LOAD_CONST              40 (39)</span><br><span class="line">            116 LOAD_CONST              41 (55)</span><br><span class="line"></span><br><span class="line">  7         118 LOAD_CONST              11 (8)</span><br><span class="line">            120 LOAD_CONST              42 (24)</span><br><span class="line">            122 LOAD_CONST              43 (40)</span><br><span class="line">            124 LOAD_CONST              44 (56)</span><br><span class="line">            126 LOAD_CONST               4 (9)</span><br><span class="line">            128 LOAD_CONST              45 (25)</span><br><span class="line">            130 LOAD_CONST              46 (41)</span><br><span class="line">            132 LOAD_CONST              47 (57)</span><br><span class="line">            134 LOAD_CONST               6 (10)</span><br><span class="line">            136 LOAD_CONST              48 (26)</span><br><span class="line">            138 LOAD_CONST              49 (42)</span><br><span class="line">            140 LOAD_CONST              50 (58)</span><br><span class="line">            142 LOAD_CONST               3 (11)</span><br><span class="line">            144 LOAD_CONST              51 (27)</span><br><span class="line">            146 LOAD_CONST              52 (43)</span><br><span class="line">            148 LOAD_CONST              53 (59)</span><br><span class="line"></span><br><span class="line">  8         150 LOAD_CONST               0 (12)</span><br><span class="line">            152 LOAD_CONST              54 (28)</span><br><span class="line">            154 LOAD_CONST              55 (44)</span><br><span class="line">            156 LOAD_CONST              56 (60)</span><br><span class="line">            158 LOAD_CONST               7 (13)</span><br><span class="line">            160 LOAD_CONST              57 (29)</span><br><span class="line">            162 LOAD_CONST              58 (45)</span><br><span class="line">            164 LOAD_CONST              59 (61)</span><br><span class="line">            166 LOAD_CONST               9 (14)</span><br><span class="line">            168 LOAD_CONST              60 (30)</span><br><span class="line">            170 LOAD_CONST              61 (46)</span><br><span class="line">            172 LOAD_CONST              62 (62)</span><br><span class="line">            174 LOAD_CONST              10 (15)</span><br><span class="line">            176 LOAD_CONST              63 (31)</span><br><span class="line">            178 LOAD_CONST              64 (47)</span><br><span class="line">            180 LOAD_CONST              65 (63)</span><br><span class="line"></span><br><span class="line">  5         182 BUILD_LIST              64</span><br><span class="line">            184 STORE_NAME               3 (PBox)</span><br><span class="line"></span><br><span class="line">  9         186 LOAD_CONST              66 (&lt;code object &lt;listcomp&gt; at 0x7fbf6f8f8660, file &quot;&quot;, line 9&gt;)</span><br><span class="line">            188 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            190 MAKE_FUNCTION            0</span><br><span class="line">            192 LOAD_NAME                1 (range)</span><br><span class="line">            194 LOAD_CONST              67 (64)</span><br><span class="line">            196 CALL_FUNCTION            1</span><br><span class="line">            198 GET_ITER</span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            202 STORE_NAME               4 (PBox_inv)</span><br><span class="line"></span><br><span class="line"> 11         204 LOAD_NAME                5 (marshal)</span><br><span class="line">            206 LOAD_METHOD              6 (loads)</span><br><span class="line">            208 LOAD_CONST              68 (b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;)</span><br><span class="line">            210 CALL_METHOD              1</span><br><span class="line">            212 STORE_NAME               7 (co)</span><br><span class="line"></span><br><span class="line"> 12         214 LOAD_NAME                8 (exec)</span><br><span class="line">            216 LOAD_NAME                7 (co)</span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            220 POP_TOP</span><br><span class="line">            222 LOAD_CONST              69 (None)</span><br><span class="line">            224 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7fbf6f8f83a0, file &quot;&quot;, line 4&gt;:</span><br><span class="line">  4           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (Sbox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7fbf6f8f8660, file &quot;&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (PBox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<p>注意到有几个显眼特征:</p>
<ul>
<li>Sbox</li>
<li>PBox</li>
<li>generateRoundkeys80<br>搜索可以得到:</li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/QR6G7gCuYtfhc1P.png" alt="B68_Z___PC67M0HVVJ2_DA8.png"></p>
<p>说明是present算法<br>那我们怎么得到那几个关键变量的值呢？<br>这里跟着官方WP学习了一手全局hook的思想<br>![&#96;BEPIHG0_C8_CY_@7@6~1L1.png](<a href="https://s2.loli.net/2023/12/03/4wQCeFy9LIT2jms.png">https://s2.loli.net/2023/12/03/4wQCeFy9LIT2jms.png</a>)<br>但是实际用的时候会发现 在exec后用的话 程序会直接退出(调用了exit())<br><img src="https://s2.loli.net/2023/12/03/GPh2KRF5AdOcoBj.png" alt="O_DK_VOF3HP@PW0_O@RGN1Q.png"><br>而我们在exec执行前定义一个exit 相当于把系统的exit给覆盖掉 (利用全局特性 类似web get&#x2F;post修改全局变量)<br>但是这样运行还是报错 我们再加个try except块来保证能得到globals()<br><img src="https://s2.loli.net/2023/12/03/6zMsQ3kjYfnLX52.png" alt="HY65JZD_HH__3_U6_X1YF@L.png"></p>
<p>可以看到这时已经能得到一些关键值了<br>总结一下 : 现在得到了</p>
<ul>
<li>sbox</li>
<li>sbox_inv</li>
<li>pbox</li>
<li>pbox_inv</li>
<li>cmps</li>
</ul>
<p>发现这里还少了 key的值<br>说明key不在globals里 这里再次利用全局hook的技巧<br>key在<code>generateRoundkeys80</code>中被调用</p>
<p><img src="https://s2.loli.net/2023/12/03/1iHt5M7uEXzVw4A.png" alt="img"></p>
<p>所以我们修改generateRoundkeys80 使它输出传入的两个变量的值即可(使用lambda <del>python高级特征学到了</del>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generateRoundkeys80 = <span class="keyword">lambda</span> x1,x2: <span class="built_in">print</span>(x1,x2)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/03/lEFAxXu9cnajroK.png" alt="_G0380___9__SM1E_1O~LD0.png"><br>这就得到了key!<br>但是直接套会发现解出来不对…<br>那就只能看字节码 手动脱marshal(5,6次吧)<br>得到关键的generatekey80的字节码(最后一层才脱出来 说明关键应该在这里)</p>
<details>
<summary>点击查看代码</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  2           0 LOAD_CONST               0 (&lt;code object generateRoundkeys80 at 0x7fb5577493a0, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;generateRoundkeys80&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (generateRoundkeys80)</span><br><span class="line"></span><br><span class="line"> 11           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">             12 LOAD_CONST                 2           0 LOAD_CONST               0 (&lt;code object encrypt at 0x7f7a22c7c660, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;encrypt&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (encrypt)</span><br><span class="line"></span><br><span class="line"> 16           8 LOAD_NAME                1 (input)</span><br><span class="line">             10 LOAD_CONST               2 (&#x27;pls input ur flag:&#x27;)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 STORE_NAME               2 (inp)</span><br><span class="line"></span><br><span class="line"> 17          16 LOAD_NAME                3 (len)</span><br><span class="line">             18 LOAD_NAME                2 (inp)</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 LOAD_CONST               3 (32)</span><br><span class="line">             24 COMPARE_OP               3 (!=)</span><br><span class="line">             26 POP_JUMP_IF_FALSE       44</span><br><span class="line"></span><br><span class="line"> 18          28 LOAD_NAME                4 (print)</span><br><span class="line">             30 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">             32 CALL_FUNCTION            1</span><br><span class="line">             34 POP_TOP</span><br><span class="line"></span><br><span class="line"> 19          36 LOAD_NAME                5 (exit)</span><br><span class="line">             38 LOAD_CONST               5 (0)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 POP_TOP</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;   44 LOAD_NAME                2 (inp)</span><br><span class="line">             46 LOAD_CONST               6 (None)</span><br><span class="line">             48 LOAD_CONST               7 (8)</span><br><span class="line">             50 BUILD_SLICE              2</span><br><span class="line">             52 BINARY_SUBSCR</span><br><span class="line">             54 LOAD_NAME                2 (inp)</span><br><span class="line">             56 LOAD_CONST               7 (8)</span><br><span class="line">             58 LOAD_CONST               8 (16)</span><br><span class="line">             60 BUILD_SLICE              2</span><br><span class="line">             62 BINARY_SUBSCR</span><br><span class="line">             64 LOAD_NAME                2 (inp)</span><br><span class="line">             66 LOAD_CONST               8 (16)</span><br><span class="line">             68 LOAD_CONST               9 (24)</span><br><span class="line">             70 BUILD_SLICE              2</span><br><span class="line">             72 BINARY_SUBSCR</span><br><span class="line">             74 LOAD_NAME                2 (inp)</span><br><span class="line">             76 LOAD_CONST               9 (24)</span><br><span class="line">             78 LOAD_CONST               3 (32)</span><br><span class="line">             80 BUILD_SLICE              2</span><br><span class="line">             82 BINARY_SUBSCR</span><br><span class="line">             84 BUILD_LIST               4</span><br><span class="line">             86 STORE_NAME               6 (blocks)</span><br><span class="line"></span><br><span class="line"> 21          88 LOAD_CONST              10 (120617461261311902)</span><br><span class="line">             90 LOAD_CONST              11 (16357837616839286114)</span><br><span class="line">             92 LOAD_CONST              12 (312508749794633008)</span><br><span class="line">             94 LOAD_CONST              13 (1843701600916795272)</span><br><span class="line">             96 BUILD_LIST               4</span><br><span class="line">             98 STORE_NAME               7 (cmps)</span><br><span class="line"></span><br><span class="line"> 22         100 LOAD_NAME                0 (encrypt)</span><br><span class="line">            102 LOAD_NAME                6 (blocks)</span><br><span class="line">            104 CALL_FUNCTION            1</span><br><span class="line">            106 STORE_NAME               8 (out_blocks)</span><br><span class="line"></span><br><span class="line"> 23         108 LOAD_NAME                9 (range)</span><br><span class="line">            110 LOAD_CONST              14 (4)</span><br><span class="line">            112 CALL_FUNCTION            1</span><br><span class="line">            114 GET_ITER</span><br><span class="line">        &gt;&gt;  116 FOR_ITER                36 (to 154)</span><br><span class="line">            118 STORE_NAME              10 (i)</span><br><span class="line"></span><br><span class="line"> 24         120 LOAD_NAME                7 (cmps)</span><br><span class="line">            122 LOAD_NAME               10 (i)</span><br><span class="line">            124 BINARY_SUBSCR</span><br><span class="line">            126 LOAD_NAME                8 (out_blocks)</span><br><span class="line">            128 LOAD_NAME               10 (i)</span><br><span class="line">            130 BINARY_SUBSCR</span><br><span class="line">            132 COMPARE_OP               3 (!=)</span><br><span class="line">            134 POP_JUMP_IF_FALSE      116</span><br><span class="line"></span><br><span class="line"> 25         136 LOAD_NAME                4 (print)</span><br><span class="line">            138 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">            140 CALL_FUNCTION            1</span><br><span class="line">            142 POP_TOP</span><br><span class="line"></span><br><span class="line"> 26         144 LOAD_NAME                5 (exit)</span><br><span class="line">            146 LOAD_CONST               5 (0)</span><br><span class="line">            148 CALL_FUNCTION            1</span><br><span class="line">            150 POP_TOP</span><br><span class="line">            152 JUMP_ABSOLUTE          116</span><br><span class="line"></span><br><span class="line"> 27     &gt;&gt;  154 LOAD_NAME                4 (print)</span><br><span class="line">            156 LOAD_CONST              15 (&#x27;Correct!&#x27;)</span><br><span class="line">            158 CALL_FUNCTION            1</span><br><span class="line">            160 POP_TOP</span><br><span class="line">            162 LOAD_CONST               6 (None)</span><br><span class="line">            164 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object encrypt at 0x7f7a22c7c660, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (32)</span><br><span class="line">              2 STORE_FAST               1 (rounds)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (generateRoundkeys80)</span><br><span class="line">              6 LOAD_CONST               2 (85354531916197809168417)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 CALL_FUNCTION            2</span><br><span class="line">             12 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  5          14 BUILD_LIST               0</span><br><span class="line">             16 STORE_FAST               3 (out)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_FAST                0 (blocks)</span><br><span class="line">             20 GET_ITER</span><br><span class="line">        &gt;&gt;   22 FOR_ITER                84 (to 108)</span><br><span class="line">             24 STORE_FAST               4 (block)</span><br><span class="line"></span><br><span class="line">  7          26 LOAD_GLOBAL              1 (string2number)</span><br><span class="line">             28 LOAD_FAST                4 (block)</span><br><span class="line">             30 CALL_FUNCTION            1</span><br><span class="line">             32 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line">  8          34 LOAD_GLOBAL              2 (range)</span><br><span class="line">             36 LOAD_FAST                1 (rounds)</span><br><span class="line">             38 LOAD_CONST               3 (1)</span><br><span class="line">             40 BINARY_SUBTRACT</span><br><span class="line">             42 CALL_FUNCTION            1</span><br><span class="line">             44 GET_ITER</span><br><span class="line">        &gt;&gt;   46 FOR_ITER                34 (to 82)</span><br><span class="line">             48 STORE_FAST               6 (i)</span><br><span class="line"></span><br><span class="line">  9          50 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             52 LOAD_FAST                5 (state)</span><br><span class="line">             54 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             56 LOAD_FAST                6 (i)</span><br><span class="line">             58 BINARY_SUBSCR</span><br><span class="line">             60 CALL_FUNCTION            2</span><br><span class="line">             62 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 10          64 LOAD_GLOBAL              4 (sBoxLayer)</span><br><span class="line">             66 LOAD_FAST                5 (state)</span><br><span class="line">             68 CALL_FUNCTION            1</span><br><span class="line">             70 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 11          72 LOAD_GLOBAL              5 (pLayer)</span><br><span class="line">             74 LOAD_FAST                5 (state)</span><br><span class="line">             76 CALL_FUNCTION            1</span><br><span class="line">             78 STORE_FAST               5 (state)</span><br><span class="line">             80 JUMP_ABSOLUTE           46</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;   82 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             84 LOAD_FAST                5 (state)</span><br><span class="line">             86 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             88 LOAD_CONST               4 (-1)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">             92 CALL_FUNCTION            2</span><br><span class="line">             94 STORE_FAST               7 (cipher)</span><br><span class="line"></span><br><span class="line"> 13          96 LOAD_FAST                3 (out)</span><br><span class="line">             98 LOAD_METHOD              6 (append)</span><br><span class="line">            100 LOAD_FAST                7 (cipher)</span><br><span class="line">            102 CALL_METHOD              1</span><br><span class="line">            104 POP_TOP</span><br><span class="line">            106 JUMP_ABSOLUTE           22</span><br><span class="line"></span><br><span class="line"> 14     &gt;&gt;  108 LOAD_FAST                3 (out)</span><br><span class="line">            110 RETURN_VALUE</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line"> 12          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object generateRoundkeys80 at 0x7fb5577493a0, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               1 (1)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 LOAD_CONST               1 (1)</span><br><span class="line">             12 BINARY_ADD</span><br><span class="line">             14 LOAD_CONST               1 (1)</span><br><span class="line">             16 CALL_FUNCTION            3</span><br><span class="line">             18 GET_ITER</span><br><span class="line">        &gt;&gt;   20 FOR_ITER                90 (to 112)</span><br><span class="line">             22 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             26 LOAD_METHOD              1 (append)</span><br><span class="line">             28 LOAD_FAST                0 (key)</span><br><span class="line">             30 LOAD_CONST               2 (16)</span><br><span class="line">             32 BINARY_RSHIFT</span><br><span class="line">             34 CALL_METHOD              1</span><br><span class="line">             36 POP_TOP</span><br><span class="line"></span><br><span class="line">  6          38 LOAD_FAST                0 (key)</span><br><span class="line">             40 LOAD_CONST               3 (524287)</span><br><span class="line">             42 BINARY_AND</span><br><span class="line">             44 LOAD_CONST               4 (61)</span><br><span class="line">             46 BINARY_LSHIFT</span><br><span class="line">             48 LOAD_FAST                0 (key)</span><br><span class="line">             50 LOAD_CONST               5 (19)</span><br><span class="line">             52 BINARY_RSHIFT</span><br><span class="line">             54 BINARY_ADD</span><br><span class="line">             56 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  7          58 LOAD_GLOBAL              2 (Sbox)</span><br><span class="line">             60 LOAD_FAST                0 (key)</span><br><span class="line">             62 LOAD_CONST               6 (76)</span><br><span class="line">             64 BINARY_RSHIFT</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             68 LOAD_CONST               6 (76)</span><br><span class="line">             70 BINARY_LSHIFT</span><br><span class="line">             72 LOAD_FAST                0 (key)</span><br><span class="line">             74 LOAD_CONST               7 (2)</span><br><span class="line">             76 LOAD_CONST               6 (76)</span><br><span class="line">             78 BINARY_POWER</span><br><span class="line">             80 LOAD_CONST               1 (1)</span><br><span class="line">             82 BINARY_SUBTRACT</span><br><span class="line">             84 BINARY_AND</span><br><span class="line">             86 BINARY_ADD</span><br><span class="line">             88 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  8          90 LOAD_FAST                0 (key)</span><br><span class="line">             92 LOAD_FAST                3 (i)</span><br><span class="line">             94 LOAD_CONST               8 (15)</span><br><span class="line">             96 BINARY_LSHIFT</span><br><span class="line">             98 LOAD_FAST                0 (key)</span><br><span class="line">            100 LOAD_CONST               5 (19)</span><br><span class="line">            102 BINARY_RSHIFT</span><br><span class="line">            104 BINARY_XOR</span><br><span class="line">            106 INPLACE_XOR</span><br><span class="line">            108 STORE_FAST               0 (key)</span><br><span class="line">            110 JUMP_ABSOLUTE           20</span><br><span class="line"></span><br><span class="line">  9     &gt;&gt;  112 LOAD_FAST                2 (roundkeys)</span><br><span class="line">            114 RETURN_VALUE</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<p><img src="https://s2.loli.net/2023/12/03/IOML12SXx45RyFU.png" alt="img"></p>
<p>这里也能解释为什么前面全局hook后调用encrypt(xxx)<br>结合标准roundkeys生成算法<br><img src="https://s2.loli.net/2023/12/03/Rusgx94JzwmIdvU.png" alt="img"></p>
<p>再对比字节码(通过特征参数定位)<br><img src="https://s2.loli.net/2023/12/03/OEBXFZSzy8VUcGt.png" alt="img"><br>可以发现在 <code>key ^= i &lt;&lt; 15</code> 的基础上变成了<br><code>key ^= (i&lt;&lt;15) ^ (key &gt;&gt; 19)</code><br>所以在标准代码上稍作修改:(直接搬官方的了 应该是对着字节码写的吧 网上找的都不好直接改 <del>还不如自己手搓字节码</del>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            output += Sbox_inv[( state &gt;&gt; (i*<span class="number">4</span>)) &amp; <span class="number">0xF</span>] &lt;&lt; (i*<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            output += ((state &gt;&gt; i) &amp; <span class="number">0x01</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key,rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rounds+<span class="number">1</span>,<span class="number">1</span>): </span><br><span class="line">            roundkeys.append(key &gt;&gt;<span class="number">16</span>)</span><br><span class="line">            key = ((key &amp; (<span class="number">2</span>**<span class="number">19</span>-<span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">            key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>)+(key &amp; (<span class="number">2</span>**<span class="number">76</span>-<span class="number">1</span>))</span><br><span class="line">            key ^= (i &lt;&lt; <span class="number">15</span>)^(key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#        0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f</span></span><br><span class="line">Sbox= [<span class="number">0xc</span>,<span class="number">0x5</span>,<span class="number">0x6</span>,<span class="number">0xb</span>,<span class="number">0x9</span>,<span class="number">0x0</span>,<span class="number">0xa</span>,<span class="number">0xd</span>,<span class="number">0x3</span>,<span class="number">0xe</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x4</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x2</span>]</span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">PBox = [<span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,</span><br><span class="line">        <span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,</span><br><span class="line">        <span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span>]</span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">blocks</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = block</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">                state = addRoundKey(state, roundkeys[-i-<span class="number">1</span>])</span><br><span class="line">                state = pLayer_dec(state)</span><br><span class="line">                state = sBoxLayer_dec(state)</span><br><span class="line">        decipher = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        flag += <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(decipher&gt;&gt;(c*<span class="number">8</span>) &amp; <span class="number">0xff</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line">decrypt(cmps)</span><br><span class="line"><span class="comment"># 83ab766012aef9934c95ed93e9822a91</span></span><br></pre></td></tr></table></figure>

<p>想了想还是自己手搓一下(练习下字节码) 把加密代码写了下:<br>还复习了几个点:</p>
<ul>
<li>INPLACE_ADD: output +&#x3D;</li>
<li>BINARY_SUBSCR 用来划分块 避免字节码产生歧义</li>
</ul>
<p>自己写的时候 发现string2number直接看字节码是不太能写出来的 但知道原理自己写一下也差不了多少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    generateRoundkeys80(<span class="number">85354531916197809168417</span>,rounds)</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = string2number(block)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state,roundkeys[i]) <span class="comment"># roundkeys是数组</span></span><br><span class="line">            state = sBoxLayer(state)</span><br><span class="line">            state = pLayer(state)</span><br><span class="line">        cipher = addRoundKey(state,roundkeys[-<span class="number">1</span>])</span><br><span class="line">        out.append(cipher)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state^roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox[(<span class="number">4</span>*i&gt;&gt;<span class="number">15</span>)&amp;<span class="number">15</span>]&lt;&lt;(<span class="number">4</span>*i)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state&gt;&gt;i)&amp;<span class="number">1</span>)&lt;&lt;PBox[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate the roundkeys for a 80-bit key</span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">            key:    the key as a 80-bit integer</span></span><br><span class="line"><span class="string">            rounds: the number of rounds as an integer</span></span><br><span class="line"><span class="string">    Output: list of 64-bit roundkeys as integers&quot;&quot;&quot;</span></span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, rounds + <span class="number">1</span>):  <span class="comment"># (K1 ... K32)</span></span><br><span class="line">        <span class="comment"># rawkey: used in comments to show what happens at bitlevel</span></span><br><span class="line">        <span class="comment"># rawKey[0:64]</span></span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 1. Shift</span></span><br><span class="line">        <span class="comment"># rawKey[19:len(rawKey)]+rawKey[0:19]</span></span><br><span class="line">        key = ((key &amp; (<span class="number">2</span> ** <span class="number">19</span> - <span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">        <span class="comment"># 2. SBox</span></span><br><span class="line">        <span class="comment"># rawKey[76:80] = S(rawKey[76:80])</span></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; (<span class="number">2</span> ** <span class="number">76</span> - <span class="number">1</span>))</span><br><span class="line">        <span class="comment">#3. Salt</span></span><br><span class="line">        <span class="comment">#rawKey[15:20] ^ i</span></span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>)^(key&gt;&gt;<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br></pre></td></tr></table></figure>

<p>最后放一份手脱marshal的大致字节码:</p>
<details>
<summary>点击查看代码</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3           0 LOAD_CONST               0 (12)</span><br><span class="line">              2 LOAD_CONST               1 (5)</span><br><span class="line">              4 LOAD_CONST               2 (6)</span><br><span class="line">              6 LOAD_CONST               3 (11)</span><br><span class="line">              8 LOAD_CONST               4 (9)</span><br><span class="line">             10 LOAD_CONST               5 (0)</span><br><span class="line">             12 LOAD_CONST               6 (10)</span><br><span class="line">             14 LOAD_CONST               7 (13)</span><br><span class="line">             16 LOAD_CONST               8 (3)</span><br><span class="line">             18 LOAD_CONST               9 (14)</span><br><span class="line">             20 LOAD_CONST              10 (15)</span><br><span class="line">             22 LOAD_CONST              11 (8)</span><br><span class="line">             24 LOAD_CONST              12 (4)</span><br><span class="line">             26 LOAD_CONST              13 (7)</span><br><span class="line">             28 LOAD_CONST              14 (1)</span><br><span class="line">             30 LOAD_CONST              15 (2)</span><br><span class="line">             32 BUILD_LIST              16</span><br><span class="line">             34 STORE_NAME               0 (Sbox)</span><br><span class="line"></span><br><span class="line">  4          36 LOAD_CONST              16 (&lt;code object &lt;listcomp&gt; at 0x7f7b29b00a80, file &quot;&quot;, line 4&gt;)</span><br><span class="line">             38 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">             40 MAKE_FUNCTION            0</span><br><span class="line">             42 LOAD_NAME                1 (range)</span><br><span class="line">             44 LOAD_CONST              18 (16)</span><br><span class="line">             46 CALL_FUNCTION            1</span><br><span class="line">             48 GET_ITER</span><br><span class="line">             50 CALL_FUNCTION            1</span><br><span class="line">             52 STORE_NAME               2 (Sbox_inv)</span><br><span class="line"></span><br><span class="line">  5          54 LOAD_CONST               5 (0)</span><br><span class="line">             56 LOAD_CONST              18 (16)</span><br><span class="line">             58 LOAD_CONST              19 (32)</span><br><span class="line">             60 LOAD_CONST              20 (48)</span><br><span class="line">             62 LOAD_CONST              14 (1)</span><br><span class="line">             64 LOAD_CONST              21 (17)</span><br><span class="line">             66 LOAD_CONST              22 (33)</span><br><span class="line">             68 LOAD_CONST              23 (49)</span><br><span class="line">             70 LOAD_CONST              15 (2)</span><br><span class="line">             72 LOAD_CONST              24 (18)</span><br><span class="line">             74 LOAD_CONST              25 (34)</span><br><span class="line">             76 LOAD_CONST              26 (50)</span><br><span class="line">             78 LOAD_CONST               8 (3)</span><br><span class="line">             80 LOAD_CONST              27 (19)</span><br><span class="line">             82 LOAD_CONST              28 (35)</span><br><span class="line">             84 LOAD_CONST              29 (51)</span><br><span class="line"></span><br><span class="line">  6          86 LOAD_CONST              12 (4)</span><br><span class="line">             88 LOAD_CONST              30 (20)</span><br><span class="line">             90 LOAD_CONST              31 (36)</span><br><span class="line">             92 LOAD_CONST              32 (52)</span><br><span class="line">             94 LOAD_CONST               1 (5)</span><br><span class="line">             96 LOAD_CONST              33 (21)</span><br><span class="line">             98 LOAD_CONST              34 (37)</span><br><span class="line">            100 LOAD_CONST              35 (53)</span><br><span class="line">            102 LOAD_CONST               2 (6)</span><br><span class="line">            104 LOAD_CONST              36 (22)</span><br><span class="line">            106 LOAD_CONST              37 (38)</span><br><span class="line">            108 LOAD_CONST              38 (54)</span><br><span class="line">            110 LOAD_CONST              13 (7)</span><br><span class="line">            112 LOAD_CONST              39 (23)</span><br><span class="line">            114 LOAD_CONST              40 (39)</span><br><span class="line">            116 LOAD_CONST              41 (55)</span><br><span class="line"></span><br><span class="line">  7         118 LOAD_CONST              11 (8)</span><br><span class="line">            120 LOAD_CONST              42 (24)</span><br><span class="line">            122 LOAD_CONST              43 (40)</span><br><span class="line">            124 LOAD_CONST              44 (56)</span><br><span class="line">            126 LOAD_CONST               4 (9)</span><br><span class="line">            128 LOAD_CONST              45 (25)</span><br><span class="line">            130 LOAD_CONST              46 (41)</span><br><span class="line">            132 LOAD_CONST              47 (57)</span><br><span class="line">            134 LOAD_CONST               6 (10)</span><br><span class="line">            136 LOAD_CONST              48 (26)</span><br><span class="line">            138 LOAD_CONST              49 (42)</span><br><span class="line">            140 LOAD_CONST              50 (58)</span><br><span class="line">            142 LOAD_CONST               3 (11)</span><br><span class="line">            144 LOAD_CONST              51 (27)</span><br><span class="line">            146 LOAD_CONST              52 (43)</span><br><span class="line">            148 LOAD_CONST              53 (59)</span><br><span class="line"></span><br><span class="line">  8         150 LOAD_CONST               0 (12)</span><br><span class="line">            152 LOAD_CONST              54 (28)</span><br><span class="line">            154 LOAD_CONST              55 (44)</span><br><span class="line">            156 LOAD_CONST              56 (60)</span><br><span class="line">            158 LOAD_CONST               7 (13)</span><br><span class="line">            160 LOAD_CONST              57 (29)</span><br><span class="line">            162 LOAD_CONST              58 (45)</span><br><span class="line">            164 LOAD_CONST              59 (61)</span><br><span class="line">            166 LOAD_CONST               9 (14)</span><br><span class="line">            168 LOAD_CONST              60 (30)</span><br><span class="line">            170 LOAD_CONST              61 (46)</span><br><span class="line">            172 LOAD_CONST              62 (62)</span><br><span class="line">            174 LOAD_CONST              10 (15)</span><br><span class="line">            176 LOAD_CONST              63 (31)</span><br><span class="line">            178 LOAD_CONST              64 (47)</span><br><span class="line">            180 LOAD_CONST              65 (63)</span><br><span class="line"></span><br><span class="line">  5         182 BUILD_LIST              64</span><br><span class="line">            184 STORE_NAME               3 (PBox)</span><br><span class="line"></span><br><span class="line">  9         186 LOAD_CONST              66 (&lt;code object &lt;listcomp&gt; at 0x7f7b29a76a80, file &quot;&quot;, line 9&gt;)</span><br><span class="line">            188 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            190 MAKE_FUNCTION            0</span><br><span class="line">            192 LOAD_NAME                1 (range)</span><br><span class="line">            194 LOAD_CONST              67 (64)</span><br><span class="line">            196 CALL_FUNCTION            1</span><br><span class="line">            198 GET_ITER</span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            202 STORE_NAME               4 (PBox_inv)</span><br><span class="line"></span><br><span class="line"> 11         204 LOAD_NAME                5 (marshal)</span><br><span class="line">            206 LOAD_METHOD              6 (loads)</span><br><span class="line">              2           0 LOAD_CONST               0 (&lt;code object addRoundKey at 0x7f5223878a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;addRoundKey&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (addRoundKey)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object sBoxLayer at 0x7fab1d117a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;sBoxLayer&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (sBoxLayer)</span><br><span class="line"></span><br><span class="line">  8           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object pLayer at 0x7f023882ba80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;pLayer&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (pLayer)</span><br><span class="line"></span><br><span class="line">  8           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object string2number at 0x7f7370421a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;string2number&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (string2number)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object generateRoundkeys80 at 0x7f133db26a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;generateRoundkeys80&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (generateRoundkeys80)</span><br><span class="line"></span><br><span class="line"> 11           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object encrypt at 0x7f57c4c3aa80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;encrypt&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (encrypt)</span><br><span class="line"></span><br><span class="line"> 16           8 LOAD_NAME                1 (input)</span><br><span class="line">             10 LOAD_CONST               2 (&#x27;pls input ur flag:&#x27;)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 STORE_NAME               2 (inp)</span><br><span class="line"></span><br><span class="line"> 17          16 LOAD_NAME                3 (len)</span><br><span class="line">             18 LOAD_NAME                2 (inp)</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 LOAD_CONST               3 (32)</span><br><span class="line">             24 COMPARE_OP               3 (!=)</span><br><span class="line">             26 POP_JUMP_IF_FALSE       44</span><br><span class="line"></span><br><span class="line"> 18          28 LOAD_NAME                4 (print)</span><br><span class="line">             30 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">             32 CALL_FUNCTION            1</span><br><span class="line">             34 POP_TOP</span><br><span class="line"></span><br><span class="line"> 19          36 LOAD_NAME                5 (exit)</span><br><span class="line">             38 LOAD_CONST               5 (0)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 POP_TOP</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;   44 LOAD_NAME                2 (inp)</span><br><span class="line">             46 LOAD_CONST               6 (None)</span><br><span class="line">             48 LOAD_CONST               7 (8)</span><br><span class="line">             50 BUILD_SLICE              2</span><br><span class="line">             52 BINARY_SUBSCR</span><br><span class="line">             54 LOAD_NAME                2 (inp)</span><br><span class="line">             56 LOAD_CONST               7 (8)</span><br><span class="line">             58 LOAD_CONST               8 (16)</span><br><span class="line">             60 BUILD_SLICE              2</span><br><span class="line">             62 BINARY_SUBSCR</span><br><span class="line">             64 LOAD_NAME                2 (inp)</span><br><span class="line">             66 LOAD_CONST               8 (16)</span><br><span class="line">             68 LOAD_CONST               9 (24)</span><br><span class="line">             70 BUILD_SLICE              2</span><br><span class="line">             72 BINARY_SUBSCR</span><br><span class="line">             74 LOAD_NAME                2 (inp)</span><br><span class="line">             76 LOAD_CONST               9 (24)</span><br><span class="line">             78 LOAD_CONST               3 (32)</span><br><span class="line">             80 BUILD_SLICE              2</span><br><span class="line">             82 BINARY_SUBSCR</span><br><span class="line">             84 BUILD_LIST               4</span><br><span class="line">             86 STORE_NAME               6 (blocks)</span><br><span class="line"></span><br><span class="line"> 21          88 LOAD_CONST              10 (120617461261311902)</span><br><span class="line">             90 LOAD_CONST              11 (16357837616839286114)</span><br><span class="line">             92 LOAD_CONST              12 (312508749794633008)</span><br><span class="line">             94 LOAD_CONST              13 (1843701600916795272)</span><br><span class="line">             96 BUILD_LIST               4</span><br><span class="line">             98 STORE_NAME               7 (cmps)</span><br><span class="line"></span><br><span class="line"> 22         100 LOAD_NAME                0 (encrypt)</span><br><span class="line">            102 LOAD_NAME                6 (blocks)</span><br><span class="line">            104 CALL_FUNCTION            1</span><br><span class="line">            106 STORE_NAME               8 (out_blocks)</span><br><span class="line"></span><br><span class="line"> 23         108 LOAD_NAME                9 (range)</span><br><span class="line">            110 LOAD_CONST              14 (4)</span><br><span class="line">            112 CALL_FUNCTION            1</span><br><span class="line">            114 GET_ITER</span><br><span class="line">        &gt;&gt;  116 FOR_ITER                36 (to 154)</span><br><span class="line">            118 STORE_NAME              10 (i)</span><br><span class="line"></span><br><span class="line"> 24         120 LOAD_NAME                7 (cmps)</span><br><span class="line">            122 LOAD_NAME               10 (i)</span><br><span class="line">            124 BINARY_SUBSCR</span><br><span class="line">            126 LOAD_NAME                8 (out_blocks)</span><br><span class="line">            128 LOAD_NAME               10 (i)</span><br><span class="line">            130 BINARY_SUBSCR</span><br><span class="line">            132 COMPARE_OP               3 (!=)</span><br><span class="line">            134 POP_JUMP_IF_FALSE      116</span><br><span class="line"></span><br><span class="line"> 25         136 LOAD_NAME                4 (print)</span><br><span class="line">            138 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">            140 CALL_FUNCTION            1</span><br><span class="line">            142 POP_TOP</span><br><span class="line"></span><br><span class="line"> 26         144 LOAD_NAME                5 (exit)</span><br><span class="line">            146 LOAD_CONST               5 (0)</span><br><span class="line">            148 CALL_FUNCTION            1</span><br><span class="line">            150 POP_TOP</span><br><span class="line">            152 JUMP_ABSOLUTE          116</span><br><span class="line"></span><br><span class="line"> 27     &gt;&gt;  154 LOAD_NAME                4 (print)</span><br><span class="line">            156 LOAD_CONST              15 (&#x27;Correct!&#x27;)</span><br><span class="line">            158 CALL_FUNCTION            1</span><br><span class="line">            160 POP_TOP</span><br><span class="line">            162 LOAD_CONST               6 (None)</span><br><span class="line">            164 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object encrypt at 0x7f57c4c3aa80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (32)</span><br><span class="line">              2 STORE_FAST               1 (rounds)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (generateRoundkeys80)</span><br><span class="line">              6 LOAD_CONST               2 (85354531916197809168417)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 CALL_FUNCTION            2</span><br><span class="line">             12 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  5          14 BUILD_LIST               0</span><br><span class="line">             16 STORE_FAST               3 (out)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_FAST                0 (blocks)</span><br><span class="line">             20 GET_ITER</span><br><span class="line">        &gt;&gt;   22 FOR_ITER                84 (to 108)</span><br><span class="line">             24 STORE_FAST               4 (block)</span><br><span class="line"></span><br><span class="line">  7          26 LOAD_GLOBAL              1 (string2number)</span><br><span class="line">             28 LOAD_FAST                4 (block)</span><br><span class="line">             30 CALL_FUNCTION            1</span><br><span class="line">             32 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line">  8          34 LOAD_GLOBAL              2 (range)</span><br><span class="line">             36 LOAD_FAST                1 (rounds)</span><br><span class="line">             38 LOAD_CONST               3 (1)</span><br><span class="line">             40 BINARY_SUBTRACT</span><br><span class="line">             42 CALL_FUNCTION            1</span><br><span class="line">             44 GET_ITER</span><br><span class="line">        &gt;&gt;   46 FOR_ITER                34 (to 82)</span><br><span class="line">             48 STORE_FAST               6 (i)</span><br><span class="line"></span><br><span class="line">  9          50 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             52 LOAD_FAST                5 (state)</span><br><span class="line">             54 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             56 LOAD_FAST                6 (i)</span><br><span class="line">             58 BINARY_SUBSCR</span><br><span class="line">             60 CALL_FUNCTION            2</span><br><span class="line">             62 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 10          64 LOAD_GLOBAL              4 (sBoxLayer)</span><br><span class="line">             66 LOAD_FAST                5 (state)</span><br><span class="line">             68 CALL_FUNCTION            1</span><br><span class="line">             70 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 11          72 LOAD_GLOBAL              5 (pLayer)</span><br><span class="line">             74 LOAD_FAST                5 (state)</span><br><span class="line">             76 CALL_FUNCTION            1</span><br><span class="line">             78 STORE_FAST               5 (state)</span><br><span class="line">             80 JUMP_ABSOLUTE           46</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;   82 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             84 LOAD_FAST                5 (state)</span><br><span class="line">             86 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             88 LOAD_CONST               4 (-1)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">             92 CALL_FUNCTION            2</span><br><span class="line">             94 STORE_FAST               7 (cipher)</span><br><span class="line"></span><br><span class="line"> 13          96 LOAD_FAST                3 (out)</span><br><span class="line">             98 LOAD_METHOD              6 (append)</span><br><span class="line">            100 LOAD_FAST                7 (cipher)</span><br><span class="line">            102 CALL_METHOD              1</span><br><span class="line">            104 POP_TOP</span><br><span class="line">            106 JUMP_ABSOLUTE           22</span><br><span class="line"></span><br><span class="line"> 14     &gt;&gt;  108 LOAD_FAST                3 (out)</span><br><span class="line">            110 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line"> 12          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object generateRoundkeys80 at 0x7f133db26a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               1 (1)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 LOAD_CONST               1 (1)</span><br><span class="line">             12 BINARY_ADD</span><br><span class="line">             14 LOAD_CONST               1 (1)</span><br><span class="line">             16 CALL_FUNCTION            3</span><br><span class="line">             18 GET_ITER</span><br><span class="line">        &gt;&gt;   20 FOR_ITER                90 (to 112)</span><br><span class="line">             22 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             26 LOAD_METHOD              1 (append)</span><br><span class="line">             28 LOAD_FAST                0 (key)</span><br><span class="line">             30 LOAD_CONST               2 (16)</span><br><span class="line">             32 BINARY_RSHIFT</span><br><span class="line">             34 CALL_METHOD              1</span><br><span class="line">             36 POP_TOP</span><br><span class="line"></span><br><span class="line">  6          38 LOAD_FAST                0 (key)</span><br><span class="line">             40 LOAD_CONST               3 (524287)</span><br><span class="line">             42 BINARY_AND</span><br><span class="line">             44 LOAD_CONST               4 (61)</span><br><span class="line">             46 BINARY_LSHIFT</span><br><span class="line">             48 LOAD_FAST                0 (key)</span><br><span class="line">             50 LOAD_CONST               5 (19)</span><br><span class="line">             52 BINARY_RSHIFT</span><br><span class="line">             54 BINARY_ADD</span><br><span class="line">             56 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  7          58 LOAD_GLOBAL              2 (Sbox)</span><br><span class="line">             60 LOAD_FAST                0 (key)</span><br><span class="line">             62 LOAD_CONST               6 (76)</span><br><span class="line">             64 BINARY_RSHIFT</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             68 LOAD_CONST               6 (76)</span><br><span class="line">             70 BINARY_LSHIFT</span><br><span class="line">             72 LOAD_FAST                0 (key)</span><br><span class="line">             74 LOAD_CONST               7 (2)</span><br><span class="line">             76 LOAD_CONST               6 (76)</span><br><span class="line">             78 BINARY_POWER</span><br><span class="line">             80 LOAD_CONST               1 (1)</span><br><span class="line">             82 BINARY_SUBTRACT</span><br><span class="line">             84 BINARY_AND</span><br><span class="line">             86 BINARY_ADD</span><br><span class="line">             88 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  8          90 LOAD_FAST                0 (key)</span><br><span class="line">             92 LOAD_FAST                3 (i)</span><br><span class="line">             94 LOAD_CONST               8 (15)</span><br><span class="line">             96 BINARY_LSHIFT</span><br><span class="line">             98 LOAD_FAST                0 (key)</span><br><span class="line">            100 LOAD_CONST               5 (19)</span><br><span class="line">            102 BINARY_RSHIFT</span><br><span class="line">            104 BINARY_XOR</span><br><span class="line">            106 INPLACE_XOR</span><br><span class="line">            108 STORE_FAST               0 (key)</span><br><span class="line">            110 JUMP_ABSOLUTE           20</span><br><span class="line"></span><br><span class="line">  9     &gt;&gt;  112 LOAD_FAST                2 (roundkeys)</span><br><span class="line">            114 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object string2number at 0x7f7370421a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_GLOBAL              0 (sum)</span><br><span class="line">              2 LOAD_CLOSURE             0 (i)</span><br><span class="line">              4 BUILD_TUPLE              1</span><br><span class="line">              6 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x7f73704aba80, file &quot;&quot;, line 3&gt;)</span><br><span class="line">              8 LOAD_CONST               2 (&#x27;string2number.&lt;locals&gt;.&lt;listcomp&gt;&#x27;)</span><br><span class="line">             10 MAKE_FUNCTION            8 (closure)</span><br><span class="line">             12 LOAD_GLOBAL              1 (range)</span><br><span class="line">             14 LOAD_CONST               3 (8)</span><br><span class="line">             16 CALL_FUNCTION            1</span><br><span class="line">             18 GET_ITER</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f73704aba80, file &quot;&quot;, line 3&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                24 (to 30)</span><br><span class="line">              6 STORE_FAST               1 (c)</span><br><span class="line">              8 LOAD_GLOBAL              0 (ord)</span><br><span class="line">             10 LOAD_DEREF               0 (i)</span><br><span class="line">             12 LOAD_FAST                1 (c)</span><br><span class="line">             14 BINARY_SUBSCR</span><br><span class="line">             16 CALL_FUNCTION            1</span><br><span class="line">             18 LOAD_CONST               0 (8)</span><br><span class="line">             20 LOAD_FAST                1 (c)</span><br><span class="line">             22 BINARY_MULTIPLY</span><br><span class="line">             24 BINARY_LSHIFT</span><br><span class="line">             26 LIST_APPEND              2</span><br><span class="line">             28 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   30 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  9          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object pLayer at 0x7f023882ba80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (0)</span><br><span class="line">              2 STORE_FAST               1 (output)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               2 (64)</span><br><span class="line">              8 CALL_FUNCTION            1</span><br><span class="line">             10 GET_ITER</span><br><span class="line">        &gt;&gt;   12 FOR_ITER                28 (to 42)</span><br><span class="line">             14 STORE_FAST               2 (i)</span><br><span class="line"></span><br><span class="line">  5          16 LOAD_FAST                1 (output)</span><br><span class="line">             18 LOAD_FAST                0 (state)</span><br><span class="line">             20 LOAD_FAST                2 (i)</span><br><span class="line">             22 BINARY_RSHIFT</span><br><span class="line">             24 LOAD_CONST               3 (1)</span><br><span class="line">             26 BINARY_AND</span><br><span class="line">             28 LOAD_GLOBAL              1 (PBox)</span><br><span class="line">             30 LOAD_FAST                2 (i)</span><br><span class="line">             32 BINARY_SUBSCR</span><br><span class="line">             34 BINARY_LSHIFT</span><br><span class="line">             36 INPLACE_ADD</span><br><span class="line">             38 STORE_FAST               1 (output)</span><br><span class="line">             40 JUMP_ABSOLUTE           12</span><br><span class="line"></span><br><span class="line">  6     &gt;&gt;   42 LOAD_FAST                1 (output)</span><br><span class="line">             44 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  9          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object sBoxLayer at 0x7fab1d117a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (0)</span><br><span class="line">              2 STORE_FAST               1 (output)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               2 (16)</span><br><span class="line">              8 CALL_FUNCTION            1</span><br><span class="line">             10 GET_ITER</span><br><span class="line">        &gt;&gt;   12 FOR_ITER                36 (to 50)</span><br><span class="line">             14 STORE_FAST               2 (i)</span><br><span class="line"></span><br><span class="line">  5          16 LOAD_FAST                1 (output)</span><br><span class="line">             18 LOAD_GLOBAL              1 (Sbox)</span><br><span class="line">             20 LOAD_FAST                0 (state)</span><br><span class="line">             22 LOAD_FAST                2 (i)</span><br><span class="line">             24 LOAD_CONST               3 (4)</span><br><span class="line">             26 BINARY_MULTIPLY</span><br><span class="line">             28 BINARY_RSHIFT</span><br><span class="line">             30 LOAD_CONST               4 (15)</span><br><span class="line">             32 BINARY_AND</span><br><span class="line">             34 BINARY_SUBSCR</span><br><span class="line">             36 LOAD_FAST                2 (i)</span><br><span class="line">             38 LOAD_CONST               3 (4)</span><br><span class="line">             40 BINARY_MULTIPLY</span><br><span class="line">             42 BINARY_LSHIFT</span><br><span class="line">             44 INPLACE_ADD</span><br><span class="line">             46 STORE_FAST               1 (output)</span><br><span class="line">             48 JUMP_ABSOLUTE           12</span><br><span class="line"></span><br><span class="line">  6     &gt;&gt;   50 LOAD_FAST                1 (output)</span><br><span class="line">             52 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object addRoundKey at 0x7f5223878a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_FAST                0 (state)</span><br><span class="line">              2 LOAD_FAST                1 (roundkey)</span><br><span class="line">              4 BINARY_XOR</span><br><span class="line">              6 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            210 CALL_METHOD              1</span><br><span class="line">            212 STORE_NAME               7 (co)</span><br><span class="line"></span><br><span class="line"> 12         214 LOAD_NAME                8 (exec)</span><br><span class="line">            216 LOAD_NAME                7 (co)</span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            220 POP_TOP</span><br><span class="line">            222 LOAD_CONST              69 (None)</span><br><span class="line">            224 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f7b29b00a80, file &quot;&quot;, line 4&gt;:</span><br><span class="line">  4           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (Sbox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f7b29a76a80, file &quot;&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (PBox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>CTF-WP</category>
      </categories>
  </entry>
  <entry>
    <title>12.3 KasakiNozomi&#39;s Birthday!</title>
    <url>/2023/12/02/12-3-KasakiNozomi-s-Birthday/</url>
    <content><![CDATA[<p><strong>今天是伞哥哥的生日啊！</strong></p>
<span id="more"></span>
<p><img src="https://s2.loli.net/2023/12/03/uknXZsdHrz42wPN.jpg" alt="3092507-20230224232909457-349401112.jpg"></p>
<p>我最最最最最最最喜欢的角色啊！！！<br>感谢京阿尼 感谢京吹 感谢利兹与青鸟~<br>这也差不多是入坑二次元一年吧~ 这一年来也改变了许许多多~<br>借霙的话吧~<br>喜欢希美的笑声        喜欢希美的一言一语<br>喜欢希美的脚步声      喜欢希美的头发<br>喜欢……<br>希美的一切~<br>🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂</p>
]]></content>
  </entry>
</search>
